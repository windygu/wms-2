// <autogenerated>
//   This file was generated by T4 code generator GenerateAggregatesControllers.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.Metadata;
using Dddml.Wms.HttpServices.Filters;
using System.Linq;
using System.Net;
using System.ComponentModel;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Web.Http;
using Newtonsoft.Json.Linq;
using Dddml.Support.Criterion;

namespace Dddml.Wms.HttpServices.ApiControllers
{

    [RoutePrefix("api/InventoryItems")]
    public partial class InventoryItemsController : ApiController
    {

        IInventoryItemApplicationService _inventoryItemApplicationService = ApplicationContext.Current["InventoryItemApplicationService"] as IInventoryItemApplicationService;

        [Route(Order = 1)]
        [HttpGet]
        public IEnumerable<IInventoryItemStateDto> GetAll(string sort = null, string fields = null, int firstResult = 0, int maxResults = int.MaxValue, string filter = null)
        {
          try {
            IEnumerable<IInventoryItemState> states = null; 
            if (!String.IsNullOrWhiteSpace(filter))
            {
                states = _inventoryItemApplicationService.Get(CriterionDto.ToSubclass(JObject.Parse(filter).ToObject<CriterionDto>(), new WebApiControllerTypeConverter(), new PropertyTypeResolver()
                    , n => (InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary.ContainsKey(n) ? InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary[n] : n))
                    , InventoryItemsControllerUtils.GetQueryOrders(sort, QueryOrderSeparator), firstResult, maxResults);
            }
            else 
            {
                states = _inventoryItemApplicationService.Get(InventoryItemsControllerUtils.GetQueryFilterDictionary(this.Request.GetQueryNameValuePairs())
                    , InventoryItemsControllerUtils.GetQueryOrders(sort, QueryOrderSeparator), firstResult, maxResults);
            }
            var stateDtos = new List<IInventoryItemStateDto>();
            foreach (var s in states)
            {
                var dto = s is InventoryItemStateDtoWrapper ? (InventoryItemStateDtoWrapper)s : new InventoryItemStateDtoWrapper(s);
                if (String.IsNullOrWhiteSpace(fields))
                {
                    dto.AllFieldsReturned = true;
                }
                else
                {
                    dto.ReturnedFieldsString = fields;
                }
                stateDtos.Add(dto);
            }
            return stateDtos;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [HttpGet]
        public IInventoryItemStateDto Get(string id, string fields = null)
        {
          try {
            var idObj = InventoryItemsControllerUtils.ParseIdString(id);
            var state = _inventoryItemApplicationService.Get(idObj);
            if (state == null) { return null; }
            var stateDto = new InventoryItemStateDtoWrapper(state);
            if (String.IsNullOrWhiteSpace(fields))
            {
                stateDto.AllFieldsReturned = true;
            }
            else
            {
                stateDto.ReturnedFieldsString = fields;
            }
            return stateDto;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }


        [Route("_count")]
        [HttpGet]
        public long GetCount(string filter = null)
        {
          try {
            long count = 0;
            if (!String.IsNullOrWhiteSpace(filter))
            {
                count = _inventoryItemApplicationService.GetCount(CriterionDto.ToSubclass(JObject.Parse(filter).ToObject<CriterionDto>(), new WebApiControllerTypeConverter(), new PropertyTypeResolver()
                    , n => (InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary.ContainsKey(n) ? InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary[n] : n)));
            }
            else 
            {
                count = _inventoryItemApplicationService.GetCount(InventoryItemsControllerUtils.GetQueryFilterDictionary(this.Request.GetQueryNameValuePairs()));
            }
            return count;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("_metadata/filteringFields")]
        [HttpGet]
        public IEnumerable<PropertyMetadataDto> GetMetadataFilteringFields()
        {
          try {
            var filtering = new List<PropertyMetadataDto>();
            foreach (var p in InventoryItemMetadata.Instance.Properties)
            {
                if (p.IsFilteringProperty)
                {
                    var pdto = new PropertyMetadataDto(p.Name, p.TypeName, p.IsFilteringProperty,
                       !String.IsNullOrWhiteSpace(p.SourceChainingName) ? p.SourceChainingName :
                       (!String.IsNullOrWhiteSpace(p.DerivedFrom) ? p.DerivedFrom : p.Name));
                    filtering.Add(pdto);
                }
            }
            return filtering;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("{id}/_stateEvents/{version}")]
        [HttpGet]
        public InventoryItemStateCreatedOrMergePatchedOrDeletedDto GetStateEvent(string id, long version)
        {
          try {
            var idObj = InventoryItemsControllerUtils.ParseIdString(id);
            var conv = new InventoryItemStateEventDtoConverter();
            var se = _inventoryItemApplicationService.GetEvent(idObj, version);
            return se == null ? null : conv.ToInventoryItemStateEventDto(se);
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("{id}/_historyStates/{version}")]
        [HttpGet]
        public IInventoryItemStateDto GetHistoryState(string id, long version, string fields = null)
        {
          try {
            var idObj = InventoryItemsControllerUtils.ParseIdString(id);
            var state = _inventoryItemApplicationService.GetHistoryState(idObj, version);
            if (state == null) { return null; }
            var stateDto = new InventoryItemStateDtoWrapper(state);
            if (String.IsNullOrWhiteSpace(fields))
            {
                stateDto.AllFieldsReturned = true;
            }
            else
            {
                stateDto.ReturnedFieldsString = fields;
            }
            return stateDto;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("{inventoryItemId}/InventoryItemEntries/{entrySeqId}")]
        [HttpGet]
        public IInventoryItemEntryStateDto GetInventoryItemEntry(string inventoryItemId, long entrySeqId)
        {
          try {
            var state = (InventoryItemEntryState)_inventoryItemApplicationService.GetInventoryItemEntry(((new ValueObjectTextFormatter<InventoryItemId>()).Parse(inventoryItemId)), entrySeqId);
            if (state == null) { return null; }
            var stateDto = new InventoryItemEntryStateDtoWrapper(state);
            stateDto.AllFieldsReturned = true;
            return stateDto;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }

        [Route("{inventoryItemId}/InventoryItemEntries/")]
        [HttpGet]
        public IEnumerable<IInventoryItemEntryStateDto> GetInventoryItemEntries(string inventoryItemId)
        {
          try {
            var states = _inventoryItemApplicationService.GetInventoryItemEntries(((new ValueObjectTextFormatter<InventoryItemId>()).Parse(inventoryItemId)));
            if (states == null) { return null; }
            var stateDtos = new List<IInventoryItemEntryStateDto>();
            foreach (var s in states)
            {
                var dto = s is InventoryItemEntryStateDtoWrapper ? (InventoryItemEntryStateDtoWrapper)s : new InventoryItemEntryStateDtoWrapper((IInventoryItemEntryState)s);
                dto.AllFieldsReturned = true;
                stateDtos.Add(dto);
            }
            return stateDtos;
          } catch (Exception ex) { var response = HttpServiceExceptionUtils.GetErrorHttpResponseMessage(ex); throw new HttpResponseException(response); }
        }


		// /////////////////////////////////////////////////

        protected virtual string QueryOrderSeparator
        {
            get { return ","; }
        }

        // ////////////////////////////////

        private class PropertyTypeResolver : IPropertyTypeResolver
        {

            public Type ResolveTypeByPropertyName(string propertyName)
            {
                return InventoryItemsControllerUtils.GetFilterPropertyType(propertyName);
            }
        }

    }


    
    public static class InventoryItemsControllerUtils
    {

        public static void SetNullIdOrThrowOnInconsistentIds(string id, CreateOrMergePatchOrDeleteInventoryItemDto value)
        {
            var idObj = ParseIdString(id.IsNormalized() ? id : id.Normalize());
            if (value.InventoryItemId == null)
            {
                value.InventoryItemId = idObj;
            }
            else if (!((ICreateOrMergePatchOrDeleteInventoryItem)value).InventoryItemId.Equals(idObj))
            {
                throw DomainError.Named("inconsistentId", "Argument Id {0} NOT equals body Id {1}", id, value.InventoryItemId);
            }
        }

        public static InventoryItemId ParseIdString(string idString)
        {
            var formatter = new ValueObjectTextFormatter<InventoryItemId>();
            return formatter.Parse(idString);
        }

        public static string GetFilterPropertyName(string fieldName)
        {
            if (String.Equals(fieldName, "sort", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "firstResult", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "maxResults", StringComparison.InvariantCultureIgnoreCase)
                || String.Equals(fieldName, "fields", StringComparison.InvariantCultureIgnoreCase))
            {
                return null;
            }
            if (InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary.ContainsKey(fieldName))
            {
                return InventoryItemMetadata.Instance.FilteringPropertyAliasDictionary[fieldName];
            }
            return null;
        }

        public static Type GetFilterPropertyType(string propertyName)
        {
            if (InventoryItemMetadata.Instance.PropertyMetadataDictionary.ContainsKey(propertyName))
            {
                return InventoryItemMetadata.Instance.PropertyMetadataDictionary[propertyName].Type;
            }
            return typeof(string);
        }

        public static IDictionary<string, object> GetQueryFilterDictionary(IEnumerable<KeyValuePair<string, string>> queryNameValuePairs)
        {
            var filter = new Dictionary<string, object>();
            foreach (var p in queryNameValuePairs)
            {
                var pName = GetFilterPropertyName(p.Key);
                if (!String.IsNullOrWhiteSpace(pName))
                {
                    Type type = GetFilterPropertyType(pName);
                    var pValue = ApplicationContext.Current.TypeConverter.ConvertFromString(type, p.Value);
                    filter.Add(pName, pValue);
                }
            }
            return filter;
        }

        public static IList<string> GetQueryOrders(string str, string separator)
        {
            if (String.IsNullOrWhiteSpace(str))
            {
                return new string[0];
            }
            var arr = str.Split(new string[] { separator }, StringSplitOptions.RemoveEmptyEntries);
            var orders = new List<string>();
            foreach (var a in arr)
            {
                orders.Add(a.Trim());
            }
            return orders;
        }

        public static IEnumerable<IInventoryItemStateDto> ToInventoryItemStateDtoCollection(IEnumerable<InventoryItemId> ids)
        {
            var states = new List<IInventoryItemStateDto>();
            foreach (var id in ids)
            {
                var dto = new InventoryItemStateDtoWrapper();
                dto.InventoryItemId = id;
                states.Add(dto);
            }
            return states;
        }

        public static IEnumerable<IInventoryItemState> ToInventoryItemStateCollection(IEnumerable<InventoryItemId> ids)
        {
            var states = new List<InventoryItemState>();
            foreach (var id in ids)
            {
                var s = new InventoryItemState();
                s.InventoryItemId = id;
                states.Add(s);
            }
            return states;
        }

    }

}

