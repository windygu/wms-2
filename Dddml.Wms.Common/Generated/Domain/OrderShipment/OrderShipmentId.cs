// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.OrderShipment;

namespace Dddml.Wms.Domain.OrderShipment
{

	public class OrderShipmentId
	{

		private string _orderId;

		public virtual string OrderId { 
			get { return this._orderId; } 
			set { _orderId = value; } 
		}

		private string _orderItemSeqId;

		public virtual string OrderItemSeqId { 
			get { return this._orderItemSeqId; } 
			set { _orderItemSeqId = value; } 
		}

		private string _shipGroupSeqId;

		public virtual string ShipGroupSeqId { 
			get { return this._shipGroupSeqId; } 
			set { _shipGroupSeqId = value; } 
		}

		private string _shipmentId;

		public virtual string ShipmentId { 
			get { return this._shipmentId; } 
			set { _shipmentId = value; } 
		}

		private string _shipmentItemSeqId;

		public virtual string ShipmentItemSeqId { 
			get { return this._shipmentItemSeqId; } 
			set { _shipmentItemSeqId = value; } 
		}


        #region  Flattened Properties


        #endregion

		public OrderShipmentId ()
		{
		}

		public OrderShipmentId (string orderId, string orderItemSeqId, string shipGroupSeqId, string shipmentId, string shipmentItemSeqId)
		{
			this._orderId = orderId;
			this._orderItemSeqId = orderItemSeqId;
			this._shipGroupSeqId = shipGroupSeqId;
			this._shipmentId = shipmentId;
			this._shipmentItemSeqId = shipmentItemSeqId;

		}


		public override bool Equals (object obj)
		{
			if (Object.ReferenceEquals (this, obj)) {
				return true;
			}

			OrderShipmentId other = obj as OrderShipmentId;
			if (other == null) {
				return false;
			}

			return true 
				&& Object.Equals (this.OrderId, other.OrderId)
				&& Object.Equals (this.OrderItemSeqId, other.OrderItemSeqId)
				&& Object.Equals (this.ShipGroupSeqId, other.ShipGroupSeqId)
				&& Object.Equals (this.ShipmentId, other.ShipmentId)
				&& Object.Equals (this.ShipmentItemSeqId, other.ShipmentItemSeqId)
				;
		}

		public override int GetHashCode ()
		{
			int hash = 0;
			if (this.OrderId != null) {
				hash += 13 * this.OrderId.GetHashCode ();
			}
			if (this.OrderItemSeqId != null) {
				hash += 13 * this.OrderItemSeqId.GetHashCode ();
			}
			if (this.ShipGroupSeqId != null) {
				hash += 13 * this.ShipGroupSeqId.GetHashCode ();
			}
			if (this.ShipmentId != null) {
				hash += 13 * this.ShipmentId.GetHashCode ();
			}
			if (this.ShipmentItemSeqId != null) {
				hash += 13 * this.ShipmentItemSeqId.GetHashCode ();
			}
			return hash;
		}

        public static bool operator ==(OrderShipmentId obj1, OrderShipmentId obj2)
        {
            return Object.Equals(obj1, obj2);
        }

        public static bool operator !=(OrderShipmentId obj1, OrderShipmentId obj2)
        {
            return !Object.Equals(obj1, obj2);
        }

        public override string ToString()
        {
            return String.Empty
                + "OrderId: " + this.OrderId + ", "
                + "OrderItemSeqId: " + this.OrderItemSeqId + ", "
                + "ShipGroupSeqId: " + this.ShipGroupSeqId + ", "
                + "ShipmentId: " + this.ShipmentId + ", "
                + "ShipmentItemSeqId: " + this.ShipmentItemSeqId + ", "
                ;
        }

        protected internal static readonly string[] FlattenedPropertyNames = new string[] { "OrderId", "OrderItemSeqId", "ShipGroupSeqId", "ShipmentId", "ShipmentItemSeqId" };

        protected internal static readonly Type[] FlattenedPropertyTypes = new Type[] { typeof(string), typeof(string), typeof(string), typeof(string), typeof(string) };

        protected internal static readonly IDictionary<string, Type> FlattenedPropertyTypeDictionary;

        static OrderShipmentId()
        {
            var dict = new Dictionary<string, Type>();
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                dict.Add(FlattenedPropertyNames[i], FlattenedPropertyTypes[i]);
            }
            FlattenedPropertyTypeDictionary = dict;
        }

        protected internal void ForEachFlattenedProperty(Action<string, object> act)
        {
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                string pn = FlattenedPropertyNames[i];
                if (Char.IsLower(pn[0])) { pn = Char.ToUpper(pn[0]) + pn.Substring(1); }
                var m = this.GetType().GetProperty(pn, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                object pv = m.GetValue(this);
                act(pn, pv);
            }
        }

        protected internal void SetFlattenedPropertyValues(params object[] values)
        {
            for (int i = 0; i < FlattenedPropertyNames.Length; i++)
            {
                string pn = FlattenedPropertyNames[i];
                if (Char.IsLower(pn[0])) { pn = Char.ToUpper(pn[0]) + pn.Substring(1); }
                var v = values[i];
                var m = this.GetType().GetProperty(pn, System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                m.SetValue(this, v);
            }
        }
	}

}


