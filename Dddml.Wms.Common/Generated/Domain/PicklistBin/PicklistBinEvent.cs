// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistBinDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistBin
{

	public abstract class PicklistBinEventBase : IPicklistBinEvent
	{

		public virtual PicklistBinEventId PicklistBinEventId { get; set; }

        public virtual string PicklistBinId
        {
            get { return PicklistBinEventId.PicklistBinId; }
            set { PicklistBinEventId.PicklistBinId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		PicklistBinEventId IGlobalIdentity<PicklistBinEventId>.GlobalId {
			get
			{
				return this.PicklistBinEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IPicklistBinEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected PicklistBinEventBase()
        {
        }

        protected PicklistBinEventBase(PicklistBinEventId stateEventId)
        {
            this.PicklistBinEventId = stateEventId;
        }

		protected IPicklistItemEventDao PicklistItemEventDao
		{
			get { return ApplicationContext.Current["PicklistItemEventDao"] as IPicklistItemEventDao; }
		}

        protected PicklistItemEventId NewPicklistItemEventId(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEventId = new PicklistItemEventId(this.PicklistBinEventId.PicklistBinId, picklistItemOrderShipGrpInvId, this.PicklistBinEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IPicklistItemEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IPicklistBinEvent oe, IPicklistItemEvent e)
		{
			if (!oe.PicklistBinEventId.PicklistBinId.Equals(e.PicklistItemEventId.PicklistBinId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id PicklistBinId {0} but inner id PicklistBinId {1}", 
					oe.PicklistBinEventId.PicklistBinId, e.PicklistItemEventId.PicklistBinId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class PicklistBinStateEventBase : PicklistBinEventBase, IPicklistBinStateEvent
    {

		public virtual string PicklistId { get; set; }

		public virtual long? BinLocationNumber { get; set; }

		public virtual string PrimaryOrderId { get; set; }

		public virtual string PrimaryShipGroupSeqId { get; set; }

		public virtual bool? Active { get; set; }

        protected PicklistBinStateEventBase() : base()
        {
        }

        protected PicklistBinStateEventBase(PicklistBinEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class PicklistBinStateCreated : PicklistBinStateEventBase, IPicklistBinStateCreated, ISaveable
	{
		public PicklistBinStateCreated () : this(new PicklistBinEventId())
		{
		}

		public PicklistBinStateCreated (PicklistBinEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PicklistItemEventId, IPicklistItemStateCreated> _picklistItemEvents = new Dictionary<PicklistItemEventId, IPicklistItemStateCreated>();
        
        private IEnumerable<IPicklistItemStateCreated> _readOnlyPicklistItemEvents;

        public virtual IEnumerable<IPicklistItemStateCreated> PicklistItemEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._picklistItemEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistItemEvents != null) { return _readOnlyPicklistItemEvents; }
                    var eventDao = PicklistItemEventDao;
                    var eL = new List<IPicklistItemStateCreated>();
                    foreach (var e in eventDao.FindByPicklistBinEventId(this.PicklistBinEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistItemStateCreated)e);
                    }
                    return (_readOnlyPicklistItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistItemEvent(e);
                    }
                }
                else { this._picklistItemEvents.Clear(); }
            }
        }
    
		public virtual void AddPicklistItemEvent(IPicklistItemStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistItemEvents[e.PicklistItemEventId] = e;
		}

        public virtual IPicklistItemStateCreated NewPicklistItemStateCreated(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEvent = new PicklistItemStateCreated(NewPicklistItemEventId(picklistItemOrderShipGrpInvId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistItemStateCreated e in this.PicklistItemEvents) {
				PicklistItemEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class PicklistBinStateMergePatched : PicklistBinStateEventBase, IPicklistBinStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyPicklistIdRemoved { get; set; }

		public virtual bool IsPropertyBinLocationNumberRemoved { get; set; }

		public virtual bool IsPropertyPrimaryOrderIdRemoved { get; set; }

		public virtual bool IsPropertyPrimaryShipGroupSeqIdRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public PicklistBinStateMergePatched ()
		{
		}

		public PicklistBinStateMergePatched (PicklistBinEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<PicklistItemEventId, IPicklistItemEvent> _picklistItemEvents = new Dictionary<PicklistItemEventId, IPicklistItemEvent>();

        private IEnumerable<IPicklistItemEvent> _readOnlyPicklistItemEvents;
        
        public virtual IEnumerable<IPicklistItemEvent> PicklistItemEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._picklistItemEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistItemEvents != null) { return _readOnlyPicklistItemEvents; }
                    var eventDao = PicklistItemEventDao;
                    var eL = new List<IPicklistItemEvent>();
                    foreach (var e in eventDao.FindByPicklistBinEventId(this.PicklistBinEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistItemEvent)e);
                    }
                    return (_readOnlyPicklistItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistItemEvent(e);
                    }
                }
                else { this._picklistItemEvents.Clear(); }
            }
        }

		public virtual void AddPicklistItemEvent(IPicklistItemEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistItemEvents[e.PicklistItemEventId] = e;
		}

        public virtual IPicklistItemStateCreated NewPicklistItemStateCreated(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEvent = new PicklistItemStateCreated(NewPicklistItemEventId(picklistItemOrderShipGrpInvId));
            return stateEvent;
        }

        public virtual IPicklistItemStateMergePatched NewPicklistItemStateMergePatched(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEvent = new PicklistItemStateMergePatched(NewPicklistItemEventId(picklistItemOrderShipGrpInvId));
            return stateEvent;
        }

        public virtual IPicklistItemStateRemoved NewPicklistItemStateRemoved(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEvent = new PicklistItemStateRemoved(NewPicklistItemEventId(picklistItemOrderShipGrpInvId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistItemEvent e in this.PicklistItemEvents) {
				PicklistItemEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}


	public class PicklistBinStateDeleted : PicklistBinStateEventBase, IPicklistBinStateDeleted, ISaveable
	{
		public PicklistBinStateDeleted ()
		{
		}

		public PicklistBinStateDeleted (PicklistBinEventId stateEventId) : base(stateEventId)
		{
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Deleted;
        }

		private Dictionary<PicklistItemEventId, IPicklistItemStateRemoved> _picklistItemEvents = new Dictionary<PicklistItemEventId, IPicklistItemStateRemoved>();
		
        private IEnumerable<IPicklistItemStateRemoved> _readOnlyPicklistItemEvents;

        public virtual IEnumerable<IPicklistItemStateRemoved> PicklistItemEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._picklistItemEvents.Values;
                }
                else
                {
                    if (_readOnlyPicklistItemEvents != null) { return _readOnlyPicklistItemEvents; }
                    var eventDao = PicklistItemEventDao;
                    var eL = new List<IPicklistItemStateRemoved>();
                    foreach (var e in eventDao.FindByPicklistBinEventId(this.PicklistBinEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IPicklistItemStateRemoved)e);
                    }
                    return (_readOnlyPicklistItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddPicklistItemEvent(e);
                    }
                }
                else { this._picklistItemEvents.Clear(); }
            }
        }
	
		public virtual void AddPicklistItemEvent(IPicklistItemStateRemoved e)
		{
			ThrowOnInconsistentEventIds(e);
			this._picklistItemEvents[e.PicklistItemEventId] = e;
		}

        public virtual IPicklistItemStateRemoved NewPicklistItemStateRemoved(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
        {
            var stateEvent = new PicklistItemStateRemoved(NewPicklistItemEventId(picklistItemOrderShipGrpInvId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IPicklistItemStateRemoved e in this.PicklistItemEvents) {
				PicklistItemEventDao.Save(e);
			}
		}


	}



}

