// <autogenerated>
//   This file was generated by T4 code generator GeneratePicklistBinDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.PicklistBin;

namespace Dddml.Wms.Domain.PicklistBin
{

	public partial class PicklistBinStateDtoWrapper : StateDtoWrapperBase, IPicklistBinStateDto, IPicklistBinState
	{

        internal static IList<string> _collectionFieldNames = new string[] { "PicklistItems" };

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(_collectionFieldNames, fieldName);
        }

		private IPicklistBinState _state;

        public PicklistBinStateDtoWrapper()
        {
            this._state = new PicklistBinState();
        }

		public PicklistBinStateDtoWrapper(IPicklistBinState state)
		{
            this._state = state;
		}

		public IPicklistBinState ToPicklistBinState()
		{
			return this._state;
		}

		public virtual string PicklistBinId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PicklistBinId"))
                {
                    return _state.PicklistBinId;
                }
                return null;
            }
            set
            {
                _state.PicklistBinId = value;
            }
        }

        string IPicklistBinStateProperties.PicklistBinId
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).PicklistBinId;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).PicklistBinId = value;
            }
        }

		public virtual string PicklistId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PicklistId"))
                {
                    return _state.PicklistId;
                }
                return null;
            }
            set
            {
                _state.PicklistId = value;
            }
        }

        string IPicklistBinStateProperties.PicklistId
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).PicklistId;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).PicklistId = value;
            }
        }

		public virtual long? BinLocationNumber
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("BinLocationNumber"))
                {
                    return _state.BinLocationNumber;
                }
                return null;
            }
            set
            {
                _state.BinLocationNumber = value;
            }
        }

        long? IPicklistBinStateProperties.BinLocationNumber
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).BinLocationNumber;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).BinLocationNumber = value;
            }
        }

		public virtual string PrimaryOrderId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PrimaryOrderId"))
                {
                    return _state.PrimaryOrderId;
                }
                return null;
            }
            set
            {
                _state.PrimaryOrderId = value;
            }
        }

        string IPicklistBinStateProperties.PrimaryOrderId
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).PrimaryOrderId;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).PrimaryOrderId = value;
            }
        }

		public virtual string PrimaryShipGroupSeqId
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("PrimaryShipGroupSeqId"))
                {
                    return _state.PrimaryShipGroupSeqId;
                }
                return null;
            }
            set
            {
                _state.PrimaryShipGroupSeqId = value;
            }
        }

        string IPicklistBinStateProperties.PrimaryShipGroupSeqId
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).PrimaryShipGroupSeqId;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).PrimaryShipGroupSeqId = value;
            }
        }

		public virtual bool? Active
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Active"))
                {
                    return (this._state as IPicklistBinStateProperties).Active;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IPicklistBinStateProperties).Active = value.Value;
                }
            }
        }

        bool IPicklistBinStateProperties.Active
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).Active;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).Active = value;
            }
        }

		public virtual long? Version
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("Version"))
                {
                    return (this._state as IPicklistBinStateProperties).Version;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    (this._state as IPicklistBinStateProperties).Version = value.Value;
                }
            }
        }

        long IPicklistBinStateProperties.Version
        {
            get 
            {
                return (this._state as IPicklistBinStateProperties).Version;
            }
            set 
            {
                (this._state as IPicklistBinStateProperties).Version = value;
            }
        }

		public virtual string CreatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedBy"))
                {
                    return _state.CreatedBy;
                }
                return null;
            }
            set
            {
                _state.CreatedBy = value;
            }
        }

		public virtual DateTime? CreatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("CreatedAt"))
                {
                    return _state.CreatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.CreatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.CreatedAt = value.Value;
                }
            }
        }

		public virtual string UpdatedBy
		{
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedBy"))
                {
                    return _state.UpdatedBy;
                }
                return null;
            }
            set
            {
                _state.UpdatedBy = value;
            }
        }

		public virtual DateTime? UpdatedAt
        {
            get
            {
                if ((this as IStateDtoWrapper).ReturnedFieldsContains("UpdatedAt"))
                {
                    return _state.UpdatedAt.Date < default(DateTime).Date.AddDays(1) ? (DateTime?)null : _state.UpdatedAt;
                }
                return null;
            }
            set
            {
                if (value != null && value.HasValue)
                {
                    _state.UpdatedAt = value.Value;
                }
            }
        }

		#region IIdentity implementation

		string IGlobalIdentity<string>.GlobalId
		{
			get { return (_state as IPicklistBinState).GlobalId; }
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
            return (_state as IActive).IsActive();
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
            get { return (_state as IDeleted).Deleted; }
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
            get { return (_state as IPicklistBinState).CreatedBy; }
            set { (_state as IPicklistBinState).CreatedBy = value; }
		}

		DateTime ICreated<string>.CreatedAt
		{
            get { return (_state as IPicklistBinState).CreatedAt; }
            set { (_state as IPicklistBinState).CreatedAt = value; }
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
            get { return (_state as IPicklistBinState).UpdatedBy; }
            set { (_state as IPicklistBinState).UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
            get { return (_state as IPicklistBinState).UpdatedAt; }
            set { (_state as IPicklistBinState).UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IAggregateVersioned<long>.AggregateVersion
		{
            get { return (_state as IPicklistBinStateProperties).Version; }
		}

		#endregion

        bool IPicklistBinState.IsUnsaved
        {
            get { return this.Version == PicklistBinState.VersionZero; }
        }

        public virtual IPicklistItemStateDto[] PicklistItems
        {
            get 
            {
                if (!(this as IStateDtoWrapper).ReturnedFieldsContains("PicklistItems"))
                {
                    return null;
                }
                var dtos = new List<IPicklistItemStateDto>();
                if (this._state.PicklistItems != null)
                {
                    foreach (var s in this._state.PicklistItems)
                    {
                        var dto = new PicklistItemStateDtoWrapper((PicklistItemState)s);
                        var returnFS = CollectionUtils.DictionaryGetValueIgnoringCase(ReturnedFields, "PicklistItems");
                        if (!String.IsNullOrWhiteSpace(returnFS))
                        {
                            (dto as IStateDtoWrapper).ReturnedFieldsString = returnFS;
                        }
                        else
                        {
                            (dto as IStateDtoWrapper).AllFieldsReturned = this.AllFieldsReturned;
                        }
                        dtos.Add(dto);
                    }
                }
                return dtos.ToArray();
            }
            set 
            {
                if (value == null) { value = new PicklistItemStateDtoWrapper[0]; }
                var states = new List<IPicklistItemState>();
                foreach (var s in value)
                {
                    states.Add(s.ToPicklistItemState());
                }
                this._state.PicklistItems = new DtoPicklistItemStates(this._state, states);
            }
        }

        IPicklistItemStates IPicklistBinState.PicklistItems
        {
            get { return _state.PicklistItems; }
            set { _state.PicklistItems = value; }
        }

		void IPicklistBinState.When(IPicklistBinStateCreated e)
		{
            throw new NotSupportedException();
		}

		bool IPicklistBinState.ForReapplying
		{
            get { throw new NotSupportedException(); }
		}

        public bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }

		void IPicklistBinState.When(IPicklistBinStateMergePatched e)
		{
            throw new NotSupportedException();
		}

		void IPicklistBinState.When(IPicklistBinStateDeleted e)
		{
            throw new NotSupportedException();
		}

		void IPicklistBinState.Mutate(IEvent e)
		{
            throw new NotSupportedException();
		}

        // //////////////////////////////////////////////////////////////

        public class DtoPicklistItemStates : IPicklistItemStates
        {

            private IPicklistBinState _outerState;

            private IEnumerable<IPicklistItemState> _innerStates;

            public DtoPicklistItemStates(IPicklistBinState outerState, IEnumerable<IPicklistItemState> innerStates)
            {
                this._outerState = outerState;
                if (innerStates == null)
                {
                    this._innerStates = new IPicklistItemState[] { };
                }
                else
                {
                    this._innerStates = innerStates;
                }
            }

            public IEnumerator<IPicklistItemState> GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
            {
                return _innerStates.GetEnumerator();
            }

            public IPicklistItemState Get(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId)
            {
                throw new NotSupportedException();
            }

            public IPicklistItemState Get(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId, bool forCreation)
            {
                throw new NotSupportedException();
            }

            public IPicklistItemState Get(PicklistItemOrderShipGrpInvId picklistItemOrderShipGrpInvId, bool forCreation, bool nullAllowed)
            {
                throw new NotSupportedException();
            }

            public void Remove(IPicklistItemState state)
            {
                throw new NotSupportedException();
            }

            public void AddToSave(IPicklistItemState state)
            {
                throw new NotSupportedException();
            }

            public void Save()
            {
                throw new NotSupportedException();
            }
        }

	}

    partial class PicklistBinStateDtoWrapperCollection : StateDtoWrapperCollectionBase<PicklistBinStateDtoWrapper>
    {

        protected override bool IsCollectionField(string fieldName)
        {
            return CollectionUtils.CollectionContainsIgnoringCase(PicklistBinStateDtoWrapper._collectionFieldNames, fieldName);
        }

    }

}

