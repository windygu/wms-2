// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

    public class ShipmentStateEventDtoConverter
    {
        public virtual ShipmentStateCreatedOrMergePatchedOrDeletedDto ToShipmentStateEventDto(IShipmentEvent stateEvent)
        {
            if (stateEvent.EventType == StateEventType.Created)
            {
                var e = (IShipmentStateCreated)stateEvent;
                return ToShipmentStateCreatedDto(e);
            }
            else if (stateEvent.EventType == StateEventType.MergePatched)
            {
                var e = (IShipmentStateMergePatched)stateEvent;
                return ToShipmentStateMergePatchedDto(e);
            }
            throw DomainError.Named("invalidEventType", String.Format("Invalid state event type: {0}", stateEvent.EventType));
        }

        public virtual ShipmentStateCreatedDto ToShipmentStateCreatedDto(IShipmentStateCreated e)
        {
            var dto = new ShipmentStateCreatedDto();
            dto.ShipmentEventId = e.ShipmentEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ShipmentTypeId = e.ShipmentTypeId;
            dto.StatusId = e.StatusId;
            dto.PrimaryOrderId = e.PrimaryOrderId;
            dto.PrimaryReturnId = e.PrimaryReturnId;
            dto.PrimaryShipGroupSeqId = e.PrimaryShipGroupSeqId;
            dto.OnlyOneOrder = e.OnlyOneOrder;
            dto.OnlyOneOrderShipGroup = e.OnlyOneOrderShipGroup;
            dto.PicklistBinId = e.PicklistBinId;
            dto.BolNumber = e.BolNumber;
            dto.SealNumber = e.SealNumber;
            dto.VehicleId = e.VehicleId;
            dto.ExternalOrderNumber = e.ExternalOrderNumber;
            dto.Carrier = e.Carrier;
            dto.DateShipped = e.DateShipped;
            dto.EstimatedReadyDate = e.EstimatedReadyDate;
            dto.EstimatedShipDate = e.EstimatedShipDate;
            dto.EstimatedShipWorkEffId = e.EstimatedShipWorkEffId;
            dto.EstimatedArrivalDate = e.EstimatedArrivalDate;
            dto.EstimatedArrivalWorkEffId = e.EstimatedArrivalWorkEffId;
            dto.LatestCancelDate = e.LatestCancelDate;
            dto.EstimatedShipCost = e.EstimatedShipCost;
            dto.CurrencyUomId = e.CurrencyUomId;
            dto.HandlingInstructions = e.HandlingInstructions;
            dto.OriginFacilityId = e.OriginFacilityId;
            dto.DestinationFacilityId = e.DestinationFacilityId;
            dto.OriginContactMechId = e.OriginContactMechId;
            dto.OriginTelecomNumberId = e.OriginTelecomNumberId;
            dto.DestinationContactMechId = e.DestinationContactMechId;
            dto.DestinationTelecomNumberId = e.DestinationTelecomNumberId;
            dto.PartyIdTo = e.PartyIdTo;
            dto.PartyIdFrom = e.PartyIdFrom;
            dto.AdditionalShippingCharge = e.AdditionalShippingCharge;
            dto.AddtlShippingChargeDesc = e.AddtlShippingChargeDesc;
            dto.Active = e.Active;
            var shipmentImageEvents = new List<ShipmentImageStateCreatedDto>();
            foreach (var ee in e.ShipmentImageEvents)
            {
                ShipmentImageStateCreatedDto eeDto = ShipmentImageStateEventDtoConverter.ToShipmentImageStateCreatedDto(ee);
                shipmentImageEvents.Add(eeDto);
            }
            dto.ShipmentImageEvents = shipmentImageEvents.ToArray();

            var shipmentItemEvents = new List<ShipmentItemStateCreatedDto>();
            foreach (var ee in e.ShipmentItemEvents)
            {
                ShipmentItemStateCreatedDto eeDto = ShipmentItemStateEventDtoConverter.ToShipmentItemStateCreatedDto(ee);
                shipmentItemEvents.Add(eeDto);
            }
            dto.ShipmentItemEvents = shipmentItemEvents.ToArray();

            var shipmentReceiptEvents = new List<ShipmentReceiptStateCreatedDto>();
            foreach (var ee in e.ShipmentReceiptEvents)
            {
                ShipmentReceiptStateCreatedDto eeDto = ShipmentReceiptStateEventDtoConverter.ToShipmentReceiptStateCreatedDto(ee);
                shipmentReceiptEvents.Add(eeDto);
            }
            dto.ShipmentReceiptEvents = shipmentReceiptEvents.ToArray();

            var itemIssuanceEvents = new List<ItemIssuanceStateCreatedDto>();
            foreach (var ee in e.ItemIssuanceEvents)
            {
                ItemIssuanceStateCreatedDto eeDto = ItemIssuanceStateEventDtoConverter.ToItemIssuanceStateCreatedDto(ee);
                itemIssuanceEvents.Add(eeDto);
            }
            dto.ItemIssuanceEvents = itemIssuanceEvents.ToArray();

            return dto;
        }

        public virtual ShipmentStateMergePatchedDto ToShipmentStateMergePatchedDto(IShipmentStateMergePatched e)
        {
            var dto = new ShipmentStateMergePatchedDto();
            dto.ShipmentEventId = e.ShipmentEventId;
            dto.CreatedAt = e.CreatedAt;
            dto.CreatedBy = e.CreatedBy;
            dto.CommandId = e.CommandId;
            dto.ShipmentTypeId = e.ShipmentTypeId;
            dto.StatusId = e.StatusId;
            dto.PrimaryOrderId = e.PrimaryOrderId;
            dto.PrimaryReturnId = e.PrimaryReturnId;
            dto.PrimaryShipGroupSeqId = e.PrimaryShipGroupSeqId;
            dto.OnlyOneOrder = e.OnlyOneOrder;
            dto.OnlyOneOrderShipGroup = e.OnlyOneOrderShipGroup;
            dto.PicklistBinId = e.PicklistBinId;
            dto.BolNumber = e.BolNumber;
            dto.SealNumber = e.SealNumber;
            dto.VehicleId = e.VehicleId;
            dto.ExternalOrderNumber = e.ExternalOrderNumber;
            dto.Carrier = e.Carrier;
            dto.DateShipped = e.DateShipped;
            dto.EstimatedReadyDate = e.EstimatedReadyDate;
            dto.EstimatedShipDate = e.EstimatedShipDate;
            dto.EstimatedShipWorkEffId = e.EstimatedShipWorkEffId;
            dto.EstimatedArrivalDate = e.EstimatedArrivalDate;
            dto.EstimatedArrivalWorkEffId = e.EstimatedArrivalWorkEffId;
            dto.LatestCancelDate = e.LatestCancelDate;
            dto.EstimatedShipCost = e.EstimatedShipCost;
            dto.CurrencyUomId = e.CurrencyUomId;
            dto.HandlingInstructions = e.HandlingInstructions;
            dto.OriginFacilityId = e.OriginFacilityId;
            dto.DestinationFacilityId = e.DestinationFacilityId;
            dto.OriginContactMechId = e.OriginContactMechId;
            dto.OriginTelecomNumberId = e.OriginTelecomNumberId;
            dto.DestinationContactMechId = e.DestinationContactMechId;
            dto.DestinationTelecomNumberId = e.DestinationTelecomNumberId;
            dto.PartyIdTo = e.PartyIdTo;
            dto.PartyIdFrom = e.PartyIdFrom;
            dto.AdditionalShippingCharge = e.AdditionalShippingCharge;
            dto.AddtlShippingChargeDesc = e.AddtlShippingChargeDesc;
            dto.Active = e.Active;
            dto.IsPropertyShipmentTypeIdRemoved = e.IsPropertyShipmentTypeIdRemoved;
            dto.IsPropertyStatusIdRemoved = e.IsPropertyStatusIdRemoved;
            dto.IsPropertyPrimaryOrderIdRemoved = e.IsPropertyPrimaryOrderIdRemoved;
            dto.IsPropertyPrimaryReturnIdRemoved = e.IsPropertyPrimaryReturnIdRemoved;
            dto.IsPropertyPrimaryShipGroupSeqIdRemoved = e.IsPropertyPrimaryShipGroupSeqIdRemoved;
            dto.IsPropertyOnlyOneOrderRemoved = e.IsPropertyOnlyOneOrderRemoved;
            dto.IsPropertyOnlyOneOrderShipGroupRemoved = e.IsPropertyOnlyOneOrderShipGroupRemoved;
            dto.IsPropertyPicklistBinIdRemoved = e.IsPropertyPicklistBinIdRemoved;
            dto.IsPropertyBolNumberRemoved = e.IsPropertyBolNumberRemoved;
            dto.IsPropertySealNumberRemoved = e.IsPropertySealNumberRemoved;
            dto.IsPropertyVehicleIdRemoved = e.IsPropertyVehicleIdRemoved;
            dto.IsPropertyExternalOrderNumberRemoved = e.IsPropertyExternalOrderNumberRemoved;
            dto.IsPropertyCarrierRemoved = e.IsPropertyCarrierRemoved;
            dto.IsPropertyDateShippedRemoved = e.IsPropertyDateShippedRemoved;
            dto.IsPropertyEstimatedReadyDateRemoved = e.IsPropertyEstimatedReadyDateRemoved;
            dto.IsPropertyEstimatedShipDateRemoved = e.IsPropertyEstimatedShipDateRemoved;
            dto.IsPropertyEstimatedShipWorkEffIdRemoved = e.IsPropertyEstimatedShipWorkEffIdRemoved;
            dto.IsPropertyEstimatedArrivalDateRemoved = e.IsPropertyEstimatedArrivalDateRemoved;
            dto.IsPropertyEstimatedArrivalWorkEffIdRemoved = e.IsPropertyEstimatedArrivalWorkEffIdRemoved;
            dto.IsPropertyLatestCancelDateRemoved = e.IsPropertyLatestCancelDateRemoved;
            dto.IsPropertyEstimatedShipCostRemoved = e.IsPropertyEstimatedShipCostRemoved;
            dto.IsPropertyCurrencyUomIdRemoved = e.IsPropertyCurrencyUomIdRemoved;
            dto.IsPropertyHandlingInstructionsRemoved = e.IsPropertyHandlingInstructionsRemoved;
            dto.IsPropertyOriginFacilityIdRemoved = e.IsPropertyOriginFacilityIdRemoved;
            dto.IsPropertyDestinationFacilityIdRemoved = e.IsPropertyDestinationFacilityIdRemoved;
            dto.IsPropertyOriginContactMechIdRemoved = e.IsPropertyOriginContactMechIdRemoved;
            dto.IsPropertyOriginTelecomNumberIdRemoved = e.IsPropertyOriginTelecomNumberIdRemoved;
            dto.IsPropertyDestinationContactMechIdRemoved = e.IsPropertyDestinationContactMechIdRemoved;
            dto.IsPropertyDestinationTelecomNumberIdRemoved = e.IsPropertyDestinationTelecomNumberIdRemoved;
            dto.IsPropertyPartyIdToRemoved = e.IsPropertyPartyIdToRemoved;
            dto.IsPropertyPartyIdFromRemoved = e.IsPropertyPartyIdFromRemoved;
            dto.IsPropertyAdditionalShippingChargeRemoved = e.IsPropertyAdditionalShippingChargeRemoved;
            dto.IsPropertyAddtlShippingChargeDescRemoved = e.IsPropertyAddtlShippingChargeDescRemoved;
            dto.IsPropertyActiveRemoved = e.IsPropertyActiveRemoved;
            var shipmentImageEvents = new List<ShipmentImageStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.ShipmentImageEvents)
            {
                ShipmentImageStateCreatedOrMergePatchedOrRemovedDto eeDto = ShipmentImageStateEventDtoConverter.ToShipmentImageStateEventDto(ee);
                shipmentImageEvents.Add(eeDto);
            }
            dto.ShipmentImageEvents = shipmentImageEvents.ToArray();

            var shipmentItemEvents = new List<ShipmentItemStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.ShipmentItemEvents)
            {
                ShipmentItemStateCreatedOrMergePatchedOrRemovedDto eeDto = ShipmentItemStateEventDtoConverter.ToShipmentItemStateEventDto(ee);
                shipmentItemEvents.Add(eeDto);
            }
            dto.ShipmentItemEvents = shipmentItemEvents.ToArray();

            var shipmentReceiptEvents = new List<ShipmentReceiptStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.ShipmentReceiptEvents)
            {
                ShipmentReceiptStateCreatedOrMergePatchedOrRemovedDto eeDto = ShipmentReceiptStateEventDtoConverter.ToShipmentReceiptStateEventDto(ee);
                shipmentReceiptEvents.Add(eeDto);
            }
            dto.ShipmentReceiptEvents = shipmentReceiptEvents.ToArray();

            var itemIssuanceEvents = new List<ItemIssuanceStateCreatedOrMergePatchedOrRemovedDto>();
            foreach (var ee in e.ItemIssuanceEvents)
            {
                ItemIssuanceStateCreatedOrMergePatchedOrRemovedDto eeDto = ItemIssuanceStateEventDtoConverter.ToItemIssuanceStateEventDto(ee);
                itemIssuanceEvents.Add(eeDto);
            }
            dto.ItemIssuanceEvents = itemIssuanceEvents.ToArray();


            return dto;
        }


        protected virtual ShipmentImageStateEventDtoConverter ShipmentImageStateEventDtoConverter
        {
            get
            {
                return new ShipmentImageStateEventDtoConverter();
            }
        }

        protected virtual ShipmentItemStateEventDtoConverter ShipmentItemStateEventDtoConverter
        {
            get
            {
                return new ShipmentItemStateEventDtoConverter();
            }
        }

        protected virtual ShipmentReceiptStateEventDtoConverter ShipmentReceiptStateEventDtoConverter
        {
            get
            {
                return new ShipmentReceiptStateEventDtoConverter();
            }
        }

        protected virtual ItemIssuanceStateEventDtoConverter ItemIssuanceStateEventDtoConverter
        {
            get
            {
                return new ItemIssuanceStateEventDtoConverter();
            }
        }


    }


}

