// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public abstract class ShipmentEventBase : IShipmentEvent
	{

		public virtual ShipmentEventId ShipmentEventId { get; set; }

        public virtual string ShipmentId
        {
            get { return ShipmentEventId.ShipmentId; }
            set { ShipmentEventId.ShipmentId = value; }
        }

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

        public virtual string CommandId { get; set; }

        string IEvent.CommandId { get { return this.CommandId; } set { this.CommandId = value; } }

		ShipmentEventId IGlobalIdentity<ShipmentEventId>.GlobalId {
			get
			{
				return this.ShipmentEventId;
			}
		}

        public virtual bool EventReadOnly { get; set; }

        bool IShipmentEvent.ReadOnly
        {
            get
            {
                return this.EventReadOnly;
            }
            set
            {
                this.EventReadOnly = value;
            }
        }


		string ICreated<string>.CreatedBy {
			get {
				return this.CreatedBy;
			}
			set {
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt {
			get {
				return this.CreatedAt;
			}
			set {
				this.CreatedAt = value;
			}
		}

        protected ShipmentEventBase()
        {
        }

        protected ShipmentEventBase(ShipmentEventId stateEventId)
        {
            this.ShipmentEventId = stateEventId;
        }

		protected IShipmentImageEventDao ShipmentImageEventDao
		{
			get { return ApplicationContext.Current["ShipmentImageEventDao"] as IShipmentImageEventDao; }
		}

        protected ShipmentImageEventId NewShipmentImageEventId(string sequenceId)
        {
            var stateEventId = new ShipmentImageEventId(this.ShipmentEventId.ShipmentId, sequenceId, this.ShipmentEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IShipmentImageEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IShipmentEvent oe, IShipmentImageEvent e)
		{
			if (!oe.ShipmentEventId.ShipmentId.Equals(e.ShipmentImageEventId.ShipmentId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ShipmentId {0} but inner id ShipmentId {1}", 
					oe.ShipmentEventId.ShipmentId, e.ShipmentImageEventId.ShipmentId);
			}
		}


		protected IShipmentItemEventDao ShipmentItemEventDao
		{
			get { return ApplicationContext.Current["ShipmentItemEventDao"] as IShipmentItemEventDao; }
		}

        protected ShipmentItemEventId NewShipmentItemEventId(string shipmentItemSeqId)
        {
            var stateEventId = new ShipmentItemEventId(this.ShipmentEventId.ShipmentId, shipmentItemSeqId, this.ShipmentEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IShipmentItemEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IShipmentEvent oe, IShipmentItemEvent e)
		{
			if (!oe.ShipmentEventId.ShipmentId.Equals(e.ShipmentItemEventId.ShipmentId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ShipmentId {0} but inner id ShipmentId {1}", 
					oe.ShipmentEventId.ShipmentId, e.ShipmentItemEventId.ShipmentId);
			}
		}


		protected IShipmentReceiptEventDao ShipmentReceiptEventDao
		{
			get { return ApplicationContext.Current["ShipmentReceiptEventDao"] as IShipmentReceiptEventDao; }
		}

        protected ShipmentReceiptEventId NewShipmentReceiptEventId(string receiptSeqId)
        {
            var stateEventId = new ShipmentReceiptEventId(this.ShipmentEventId.ShipmentId, receiptSeqId, this.ShipmentEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IShipmentReceiptEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IShipmentEvent oe, IShipmentReceiptEvent e)
		{
			if (!oe.ShipmentEventId.ShipmentId.Equals(e.ShipmentReceiptEventId.ShipmentId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ShipmentId {0} but inner id ShipmentId {1}", 
					oe.ShipmentEventId.ShipmentId, e.ShipmentReceiptEventId.ShipmentId);
			}
		}


		protected IItemIssuanceEventDao ItemIssuanceEventDao
		{
			get { return ApplicationContext.Current["ItemIssuanceEventDao"] as IItemIssuanceEventDao; }
		}

        protected ItemIssuanceEventId NewItemIssuanceEventId(string itemIssuanceSeqId)
        {
            var stateEventId = new ItemIssuanceEventId(this.ShipmentEventId.ShipmentId, itemIssuanceSeqId, this.ShipmentEventId.Version);
            return stateEventId;
        }


        protected void ThrowOnInconsistentEventIds(IItemIssuanceEvent e)
        {
            ThrowOnInconsistentEventIds(this, e);
        }

		public static void ThrowOnInconsistentEventIds(IShipmentEvent oe, IItemIssuanceEvent e)
		{
			if (!oe.ShipmentEventId.ShipmentId.Equals(e.ItemIssuanceEventId.ShipmentId))
			{ 
				throw DomainError.Named("inconsistentEventIds", "Outer Id ShipmentId {0} but inner id ShipmentId {1}", 
					oe.ShipmentEventId.ShipmentId, e.ItemIssuanceEventId.ShipmentId);
			}
		}



        string IEventDto.EventType
        {
            get { return this.GetEventType(); }
        }

        protected abstract string GetEventType();

	}

    public abstract class ShipmentStateEventBase : ShipmentEventBase, IShipmentStateEvent
    {

		public virtual string ShipmentTypeId { get; set; }

		public virtual string StatusId { get; set; }

		public virtual string PrimaryOrderId { get; set; }

		public virtual string PrimaryReturnId { get; set; }

		public virtual string PrimaryShipGroupSeqId { get; set; }

		public virtual bool? OnlyOneOrder { get; set; }

		public virtual string PicklistBinId { get; set; }

		public virtual string BolNumber { get; set; }

		public virtual string SealNumber { get; set; }

		public virtual string VehicleId { get; set; }

		public virtual string ExternalOrderNumber { get; set; }

		public virtual string Carrier { get; set; }

		public virtual DateTime? DateShipped { get; set; }

		public virtual DateTime? EstimatedReadyDate { get; set; }

		public virtual DateTime? EstimatedShipDate { get; set; }

		public virtual string EstimatedShipWorkEffId { get; set; }

		public virtual DateTime? EstimatedArrivalDate { get; set; }

		public virtual string EstimatedArrivalWorkEffId { get; set; }

		public virtual DateTime? LatestCancelDate { get; set; }

		public virtual decimal? EstimatedShipCost { get; set; }

		public virtual string CurrencyUomId { get; set; }

		public virtual string HandlingInstructions { get; set; }

		public virtual string OriginFacilityId { get; set; }

		public virtual string DestinationFacilityId { get; set; }

		public virtual string OriginContactMechId { get; set; }

		public virtual string OriginTelecomNumberId { get; set; }

		public virtual string DestinationContactMechId { get; set; }

		public virtual string DestinationTelecomNumberId { get; set; }

		public virtual string PartyIdTo { get; set; }

		public virtual string PartyIdFrom { get; set; }

		public virtual decimal? AdditionalShippingCharge { get; set; }

		public virtual string AddtlShippingChargeDesc { get; set; }

		public virtual bool? Active { get; set; }

        protected ShipmentStateEventBase() : base()
        {
        }

        protected ShipmentStateEventBase(ShipmentEventId stateEventId) : base(stateEventId)
        {
        }

    }

	public class ShipmentStateCreated : ShipmentStateEventBase, IShipmentStateCreated, ISaveable
	{
		public ShipmentStateCreated () : this(new ShipmentEventId())
		{
		}

		public ShipmentStateCreated (ShipmentEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<ShipmentImageEventId, IShipmentImageStateCreated> _shipmentImageEvents = new Dictionary<ShipmentImageEventId, IShipmentImageStateCreated>();
        
        private IEnumerable<IShipmentImageStateCreated> _readOnlyShipmentImageEvents;

        public virtual IEnumerable<IShipmentImageStateCreated> ShipmentImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentImageEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentImageEvents != null) { return _readOnlyShipmentImageEvents; }
                    var eventDao = ShipmentImageEventDao;
                    var eL = new List<IShipmentImageStateCreated>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentImageStateCreated)e);
                    }
                    return (_readOnlyShipmentImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentImageEvent(e);
                    }
                }
                else { this._shipmentImageEvents.Clear(); }
            }
        }
    
		public virtual void AddShipmentImageEvent(IShipmentImageStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentImageEvents[e.ShipmentImageEventId] = e;
		}

        public virtual IShipmentImageStateCreated NewShipmentImageStateCreated(string sequenceId)
        {
            var stateEvent = new ShipmentImageStateCreated(NewShipmentImageEventId(sequenceId));
            return stateEvent;
        }

		private Dictionary<ShipmentItemEventId, IShipmentItemStateCreated> _shipmentItemEvents = new Dictionary<ShipmentItemEventId, IShipmentItemStateCreated>();
        
        private IEnumerable<IShipmentItemStateCreated> _readOnlyShipmentItemEvents;

        public virtual IEnumerable<IShipmentItemStateCreated> ShipmentItemEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentItemEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentItemEvents != null) { return _readOnlyShipmentItemEvents; }
                    var eventDao = ShipmentItemEventDao;
                    var eL = new List<IShipmentItemStateCreated>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentItemStateCreated)e);
                    }
                    return (_readOnlyShipmentItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentItemEvent(e);
                    }
                }
                else { this._shipmentItemEvents.Clear(); }
            }
        }
    
		public virtual void AddShipmentItemEvent(IShipmentItemStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentItemEvents[e.ShipmentItemEventId] = e;
		}

        public virtual IShipmentItemStateCreated NewShipmentItemStateCreated(string shipmentItemSeqId)
        {
            var stateEvent = new ShipmentItemStateCreated(NewShipmentItemEventId(shipmentItemSeqId));
            return stateEvent;
        }

		private Dictionary<ShipmentReceiptEventId, IShipmentReceiptStateCreated> _shipmentReceiptEvents = new Dictionary<ShipmentReceiptEventId, IShipmentReceiptStateCreated>();
        
        private IEnumerable<IShipmentReceiptStateCreated> _readOnlyShipmentReceiptEvents;

        public virtual IEnumerable<IShipmentReceiptStateCreated> ShipmentReceiptEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentReceiptEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentReceiptEvents != null) { return _readOnlyShipmentReceiptEvents; }
                    var eventDao = ShipmentReceiptEventDao;
                    var eL = new List<IShipmentReceiptStateCreated>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentReceiptStateCreated)e);
                    }
                    return (_readOnlyShipmentReceiptEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentReceiptEvent(e);
                    }
                }
                else { this._shipmentReceiptEvents.Clear(); }
            }
        }
    
		public virtual void AddShipmentReceiptEvent(IShipmentReceiptStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentReceiptEvents[e.ShipmentReceiptEventId] = e;
		}

        public virtual IShipmentReceiptStateCreated NewShipmentReceiptStateCreated(string receiptSeqId)
        {
            var stateEvent = new ShipmentReceiptStateCreated(NewShipmentReceiptEventId(receiptSeqId));
            return stateEvent;
        }

		private Dictionary<ItemIssuanceEventId, IItemIssuanceStateCreated> _itemIssuanceEvents = new Dictionary<ItemIssuanceEventId, IItemIssuanceStateCreated>();
        
        private IEnumerable<IItemIssuanceStateCreated> _readOnlyItemIssuanceEvents;

        public virtual IEnumerable<IItemIssuanceStateCreated> ItemIssuanceEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._itemIssuanceEvents.Values;
                }
                else
                {
                    if (_readOnlyItemIssuanceEvents != null) { return _readOnlyItemIssuanceEvents; }
                    var eventDao = ItemIssuanceEventDao;
                    var eL = new List<IItemIssuanceStateCreated>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IItemIssuanceStateCreated)e);
                    }
                    return (_readOnlyItemIssuanceEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddItemIssuanceEvent(e);
                    }
                }
                else { this._itemIssuanceEvents.Clear(); }
            }
        }
    
		public virtual void AddItemIssuanceEvent(IItemIssuanceStateCreated e)
		{
			ThrowOnInconsistentEventIds(e);
			this._itemIssuanceEvents[e.ItemIssuanceEventId] = e;
		}

        public virtual IItemIssuanceStateCreated NewItemIssuanceStateCreated(string itemIssuanceSeqId)
        {
            var stateEvent = new ItemIssuanceStateCreated(NewItemIssuanceEventId(itemIssuanceSeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IShipmentImageStateCreated e in this.ShipmentImageEvents) {
				ShipmentImageEventDao.Save(e);
			}
			foreach (IShipmentItemStateCreated e in this.ShipmentItemEvents) {
				ShipmentItemEventDao.Save(e);
			}
			foreach (IShipmentReceiptStateCreated e in this.ShipmentReceiptEvents) {
				ShipmentReceiptEventDao.Save(e);
			}
			foreach (IItemIssuanceStateCreated e in this.ItemIssuanceEvents) {
				ItemIssuanceEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.Created;
        }

	}


	public class ShipmentStateMergePatched : ShipmentStateEventBase, IShipmentStateMergePatched, ISaveable
	{
		public virtual bool IsPropertyShipmentTypeIdRemoved { get; set; }

		public virtual bool IsPropertyStatusIdRemoved { get; set; }

		public virtual bool IsPropertyPrimaryOrderIdRemoved { get; set; }

		public virtual bool IsPropertyPrimaryReturnIdRemoved { get; set; }

		public virtual bool IsPropertyPrimaryShipGroupSeqIdRemoved { get; set; }

		public virtual bool IsPropertyOnlyOneOrderRemoved { get; set; }

		public virtual bool IsPropertyPicklistBinIdRemoved { get; set; }

		public virtual bool IsPropertyBolNumberRemoved { get; set; }

		public virtual bool IsPropertySealNumberRemoved { get; set; }

		public virtual bool IsPropertyVehicleIdRemoved { get; set; }

		public virtual bool IsPropertyExternalOrderNumberRemoved { get; set; }

		public virtual bool IsPropertyCarrierRemoved { get; set; }

		public virtual bool IsPropertyDateShippedRemoved { get; set; }

		public virtual bool IsPropertyEstimatedReadyDateRemoved { get; set; }

		public virtual bool IsPropertyEstimatedShipDateRemoved { get; set; }

		public virtual bool IsPropertyEstimatedShipWorkEffIdRemoved { get; set; }

		public virtual bool IsPropertyEstimatedArrivalDateRemoved { get; set; }

		public virtual bool IsPropertyEstimatedArrivalWorkEffIdRemoved { get; set; }

		public virtual bool IsPropertyLatestCancelDateRemoved { get; set; }

		public virtual bool IsPropertyEstimatedShipCostRemoved { get; set; }

		public virtual bool IsPropertyCurrencyUomIdRemoved { get; set; }

		public virtual bool IsPropertyHandlingInstructionsRemoved { get; set; }

		public virtual bool IsPropertyOriginFacilityIdRemoved { get; set; }

		public virtual bool IsPropertyDestinationFacilityIdRemoved { get; set; }

		public virtual bool IsPropertyOriginContactMechIdRemoved { get; set; }

		public virtual bool IsPropertyOriginTelecomNumberIdRemoved { get; set; }

		public virtual bool IsPropertyDestinationContactMechIdRemoved { get; set; }

		public virtual bool IsPropertyDestinationTelecomNumberIdRemoved { get; set; }

		public virtual bool IsPropertyPartyIdToRemoved { get; set; }

		public virtual bool IsPropertyPartyIdFromRemoved { get; set; }

		public virtual bool IsPropertyAdditionalShippingChargeRemoved { get; set; }

		public virtual bool IsPropertyAddtlShippingChargeDescRemoved { get; set; }

		public virtual bool IsPropertyActiveRemoved { get; set; }


		public ShipmentStateMergePatched ()
		{
		}

		public ShipmentStateMergePatched (ShipmentEventId stateEventId) : base(stateEventId)
		{
		}

		private Dictionary<ShipmentImageEventId, IShipmentImageEvent> _shipmentImageEvents = new Dictionary<ShipmentImageEventId, IShipmentImageEvent>();

        private IEnumerable<IShipmentImageEvent> _readOnlyShipmentImageEvents;
        
        public virtual IEnumerable<IShipmentImageEvent> ShipmentImageEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentImageEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentImageEvents != null) { return _readOnlyShipmentImageEvents; }
                    var eventDao = ShipmentImageEventDao;
                    var eL = new List<IShipmentImageEvent>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentImageEvent)e);
                    }
                    return (_readOnlyShipmentImageEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentImageEvent(e);
                    }
                }
                else { this._shipmentImageEvents.Clear(); }
            }
        }

		public virtual void AddShipmentImageEvent(IShipmentImageEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentImageEvents[e.ShipmentImageEventId] = e;
		}

        public virtual IShipmentImageStateCreated NewShipmentImageStateCreated(string sequenceId)
        {
            var stateEvent = new ShipmentImageStateCreated(NewShipmentImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IShipmentImageStateMergePatched NewShipmentImageStateMergePatched(string sequenceId)
        {
            var stateEvent = new ShipmentImageStateMergePatched(NewShipmentImageEventId(sequenceId));
            return stateEvent;
        }

        public virtual IShipmentImageStateRemoved NewShipmentImageStateRemoved(string sequenceId)
        {
            var stateEvent = new ShipmentImageStateRemoved(NewShipmentImageEventId(sequenceId));
            return stateEvent;
        }

		private Dictionary<ShipmentItemEventId, IShipmentItemEvent> _shipmentItemEvents = new Dictionary<ShipmentItemEventId, IShipmentItemEvent>();

        private IEnumerable<IShipmentItemEvent> _readOnlyShipmentItemEvents;
        
        public virtual IEnumerable<IShipmentItemEvent> ShipmentItemEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentItemEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentItemEvents != null) { return _readOnlyShipmentItemEvents; }
                    var eventDao = ShipmentItemEventDao;
                    var eL = new List<IShipmentItemEvent>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentItemEvent)e);
                    }
                    return (_readOnlyShipmentItemEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentItemEvent(e);
                    }
                }
                else { this._shipmentItemEvents.Clear(); }
            }
        }

		public virtual void AddShipmentItemEvent(IShipmentItemEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentItemEvents[e.ShipmentItemEventId] = e;
		}

        public virtual IShipmentItemStateCreated NewShipmentItemStateCreated(string shipmentItemSeqId)
        {
            var stateEvent = new ShipmentItemStateCreated(NewShipmentItemEventId(shipmentItemSeqId));
            return stateEvent;
        }

        public virtual IShipmentItemStateMergePatched NewShipmentItemStateMergePatched(string shipmentItemSeqId)
        {
            var stateEvent = new ShipmentItemStateMergePatched(NewShipmentItemEventId(shipmentItemSeqId));
            return stateEvent;
        }

		private Dictionary<ShipmentReceiptEventId, IShipmentReceiptEvent> _shipmentReceiptEvents = new Dictionary<ShipmentReceiptEventId, IShipmentReceiptEvent>();

        private IEnumerable<IShipmentReceiptEvent> _readOnlyShipmentReceiptEvents;
        
        public virtual IEnumerable<IShipmentReceiptEvent> ShipmentReceiptEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._shipmentReceiptEvents.Values;
                }
                else
                {
                    if (_readOnlyShipmentReceiptEvents != null) { return _readOnlyShipmentReceiptEvents; }
                    var eventDao = ShipmentReceiptEventDao;
                    var eL = new List<IShipmentReceiptEvent>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IShipmentReceiptEvent)e);
                    }
                    return (_readOnlyShipmentReceiptEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddShipmentReceiptEvent(e);
                    }
                }
                else { this._shipmentReceiptEvents.Clear(); }
            }
        }

		public virtual void AddShipmentReceiptEvent(IShipmentReceiptEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._shipmentReceiptEvents[e.ShipmentReceiptEventId] = e;
		}

        public virtual IShipmentReceiptStateCreated NewShipmentReceiptStateCreated(string receiptSeqId)
        {
            var stateEvent = new ShipmentReceiptStateCreated(NewShipmentReceiptEventId(receiptSeqId));
            return stateEvent;
        }

        public virtual IShipmentReceiptStateMergePatched NewShipmentReceiptStateMergePatched(string receiptSeqId)
        {
            var stateEvent = new ShipmentReceiptStateMergePatched(NewShipmentReceiptEventId(receiptSeqId));
            return stateEvent;
        }

		private Dictionary<ItemIssuanceEventId, IItemIssuanceEvent> _itemIssuanceEvents = new Dictionary<ItemIssuanceEventId, IItemIssuanceEvent>();

        private IEnumerable<IItemIssuanceEvent> _readOnlyItemIssuanceEvents;
        
        public virtual IEnumerable<IItemIssuanceEvent> ItemIssuanceEvents
        {
            get
            {
                if (!EventReadOnly)
                {
                    return this._itemIssuanceEvents.Values;
                }
                else
                {
                    if (_readOnlyItemIssuanceEvents != null) { return _readOnlyItemIssuanceEvents; }
                    var eventDao = ItemIssuanceEventDao;
                    var eL = new List<IItemIssuanceEvent>();
                    foreach (var e in eventDao.FindByShipmentEventId(this.ShipmentEventId))
                    {
                        e.ReadOnly = true;
                        eL.Add((IItemIssuanceEvent)e);
                    }
                    return (_readOnlyItemIssuanceEvents = eL);
                }
            }
            set 
            {
                if (value != null)
                {
                    foreach (var e in value)
                    {
                        AddItemIssuanceEvent(e);
                    }
                }
                else { this._itemIssuanceEvents.Clear(); }
            }
        }

		public virtual void AddItemIssuanceEvent(IItemIssuanceEvent e)
		{
			ThrowOnInconsistentEventIds(e);
			this._itemIssuanceEvents[e.ItemIssuanceEventId] = e;
		}

        public virtual IItemIssuanceStateCreated NewItemIssuanceStateCreated(string itemIssuanceSeqId)
        {
            var stateEvent = new ItemIssuanceStateCreated(NewItemIssuanceEventId(itemIssuanceSeqId));
            return stateEvent;
        }

        public virtual IItemIssuanceStateMergePatched NewItemIssuanceStateMergePatched(string itemIssuanceSeqId)
        {
            var stateEvent = new ItemIssuanceStateMergePatched(NewItemIssuanceEventId(itemIssuanceSeqId));
            return stateEvent;
        }

        public virtual IItemIssuanceStateRemoved NewItemIssuanceStateRemoved(string itemIssuanceSeqId)
        {
            var stateEvent = new ItemIssuanceStateRemoved(NewItemIssuanceEventId(itemIssuanceSeqId));
            return stateEvent;
        }

		public virtual void Save ()
		{
			foreach (IShipmentImageEvent e in this.ShipmentImageEvents) {
				ShipmentImageEventDao.Save(e);
			}
			foreach (IShipmentItemEvent e in this.ShipmentItemEvents) {
				ShipmentItemEventDao.Save(e);
			}
			foreach (IShipmentReceiptEvent e in this.ShipmentReceiptEvents) {
				ShipmentReceiptEventDao.Save(e);
			}
			foreach (IItemIssuanceEvent e in this.ItemIssuanceEvents) {
				ItemIssuanceEventDao.Save(e);
			}
		}

        protected override string GetEventType()
        {
            return Dddml.Wms.Specialization.StateEventType.MergePatched;
        }

	}




}

