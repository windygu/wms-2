// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;

namespace Dddml.Wms.Domain.Shipment
{

	public partial class ItemIssuanceState : ItemIssuanceStateProperties, IItemIssuanceState
	{

		public virtual string CreatedBy { get; set; }

		public virtual DateTime CreatedAt { get; set; }

		public virtual string UpdatedBy { get; set; }

		public virtual DateTime UpdatedAt { get; set; }

		public virtual bool Deleted { get; set; }


		#region IIdentity implementation

        private ShipmentItemIssuanceId _shipmentItemIssuanceId = new ShipmentItemIssuanceId();

        public virtual ShipmentItemIssuanceId ShipmentItemIssuanceId 
        {
            get { return this._shipmentItemIssuanceId; }
            set { this._shipmentItemIssuanceId = value; }
        }

		ShipmentItemIssuanceId IGlobalIdentity<ShipmentItemIssuanceId>.GlobalId {
			get {
				return  this.ShipmentItemIssuanceId;
			}
		}

        string ILocalIdentity<string>.LocalId
        {
            get
            {
                return this.ItemIssuanceSeqId;
            }
        }


        public override string ShipmentId {
			get {
				return this.ShipmentItemIssuanceId.ShipmentId;
			}
			set {
				this.ShipmentItemIssuanceId.ShipmentId = value;
			}
		}

        public override string ItemIssuanceSeqId {
			get {
				return this.ShipmentItemIssuanceId.ItemIssuanceSeqId;
			}
			set {
				this.ShipmentItemIssuanceId.ItemIssuanceSeqId = value;
			}
		}

		#endregion

		#region IActive implementation

		bool IActive.IsActive()
		{
			return this.Active;
		}

		#endregion

		#region IDeleted implementation

		bool IDeleted.Deleted
		{
			get
			{
				return this.Deleted;
			}
		}

		#endregion

		#region ICreated implementation

		string ICreated<string>.CreatedBy
		{
			get
			{
				return this.CreatedBy;
			}
			set
			{
				this.CreatedBy = value;
			}
		}

		DateTime ICreated<string>.CreatedAt
		{
			get
			{
				return this.CreatedAt;
			}
			set
			{
				this.CreatedAt = value;
			}
		}

		#endregion

		#region IUpdated implementation

		string IUpdated<string>.UpdatedBy
		{
			get { return this.UpdatedBy; }
			set { this.UpdatedBy = value; }
		}

		DateTime IUpdated<string>.UpdatedAt
		{
			get { return this.UpdatedAt; }
			set { this.UpdatedAt = value; }
		}

		#endregion

		#region IVersioned implementation

		long IEntityVersioned<long>.EntityVersion
		{
			get
			{
				return this.Version;
			}
		}


		#endregion

        bool IItemIssuanceState.IsUnsaved
        {
            get { return this.Version == VersionZero; }
        }

		public static long VersionZero
		{
			get
			{
				return (long)0;
			}
		}


        public virtual bool StateReadOnly { get; set; }

        bool IState.ReadOnly
        {
            get { return this.StateReadOnly; }
            set { this.StateReadOnly = value; }
        }
	
        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public ItemIssuanceState() : this(false)
        {
        }

        public ItemIssuanceState(bool forReapplying)
        {
            this._forReapplying = forReapplying;
            InitializeProperties();
        }


		public virtual void When(IItemIssuanceStateCreated e)
		{
			ThrowOnWrongEvent(e);
			this.OrderId = e.OrderId;

			this.OrderItemSeqId = e.OrderItemSeqId;

			this.ShipGroupSeqId = e.ShipGroupSeqId;

			this.ProductId = e.ProductId;

			this.LocatorId = e.LocatorId;

			this.AttributeSetInstanceId = e.AttributeSetInstanceId;

			this.ShipmentItemSeqId = e.ShipmentItemSeqId;

			this.FixedAssetId = e.FixedAssetId;

			this.MaintHistSeqId = e.MaintHistSeqId;

			this.IssuedDateTime = e.IssuedDateTime;

			this.IssuedByUserLoginId = e.IssuedByUserLoginId;

			this.Quantity = e.Quantity;

			this.CancelQuantity = e.CancelQuantity;

            this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);

			this.Deleted = false;

			this.CreatedBy = e.CreatedBy;
			this.CreatedAt = e.CreatedAt;


		}


		public virtual void When(IItemIssuanceStateMergePatched e)
		{
			ThrowOnWrongEvent(e);

			if (e.OrderId == null)
			{
				if (e.IsPropertyOrderIdRemoved)
				{
					this.OrderId = default(string);
				}
			}
			else
			{
				this.OrderId = e.OrderId;
			}

			if (e.OrderItemSeqId == null)
			{
				if (e.IsPropertyOrderItemSeqIdRemoved)
				{
					this.OrderItemSeqId = default(string);
				}
			}
			else
			{
				this.OrderItemSeqId = e.OrderItemSeqId;
			}

			if (e.ShipGroupSeqId == null)
			{
				if (e.IsPropertyShipGroupSeqIdRemoved)
				{
					this.ShipGroupSeqId = default(string);
				}
			}
			else
			{
				this.ShipGroupSeqId = e.ShipGroupSeqId;
			}

			if (e.ProductId == null)
			{
				if (e.IsPropertyProductIdRemoved)
				{
					this.ProductId = default(string);
				}
			}
			else
			{
				this.ProductId = e.ProductId;
			}

			if (e.LocatorId == null)
			{
				if (e.IsPropertyLocatorIdRemoved)
				{
					this.LocatorId = default(string);
				}
			}
			else
			{
				this.LocatorId = e.LocatorId;
			}

			if (e.AttributeSetInstanceId == null)
			{
				if (e.IsPropertyAttributeSetInstanceIdRemoved)
				{
					this.AttributeSetInstanceId = default(string);
				}
			}
			else
			{
				this.AttributeSetInstanceId = e.AttributeSetInstanceId;
			}

			if (e.ShipmentItemSeqId == null)
			{
				if (e.IsPropertyShipmentItemSeqIdRemoved)
				{
					this.ShipmentItemSeqId = default(string);
				}
			}
			else
			{
				this.ShipmentItemSeqId = e.ShipmentItemSeqId;
			}

			if (e.FixedAssetId == null)
			{
				if (e.IsPropertyFixedAssetIdRemoved)
				{
					this.FixedAssetId = default(string);
				}
			}
			else
			{
				this.FixedAssetId = e.FixedAssetId;
			}

			if (e.MaintHistSeqId == null)
			{
				if (e.IsPropertyMaintHistSeqIdRemoved)
				{
					this.MaintHistSeqId = default(string);
				}
			}
			else
			{
				this.MaintHistSeqId = e.MaintHistSeqId;
			}

			if (e.IssuedDateTime == null)
			{
				if (e.IsPropertyIssuedDateTimeRemoved)
				{
					this.IssuedDateTime = default(DateTime?);
				}
			}
			else
			{
				this.IssuedDateTime = e.IssuedDateTime;
			}

			if (e.IssuedByUserLoginId == null)
			{
				if (e.IsPropertyIssuedByUserLoginIdRemoved)
				{
					this.IssuedByUserLoginId = default(string);
				}
			}
			else
			{
				this.IssuedByUserLoginId = e.IssuedByUserLoginId;
			}

			if (e.Quantity == null)
			{
				if (e.IsPropertyQuantityRemoved)
				{
					this.Quantity = default(decimal?);
				}
			}
			else
			{
				this.Quantity = e.Quantity;
			}

			if (e.CancelQuantity == null)
			{
				if (e.IsPropertyCancelQuantityRemoved)
				{
					this.CancelQuantity = default(decimal?);
				}
			}
			else
			{
				this.CancelQuantity = e.CancelQuantity;
			}

			if (e.Active == null)
			{
				if (e.IsPropertyActiveRemoved)
				{
					this.Active = default(bool);
				}
			}
			else
			{
				this.Active = (e.Active != null && e.Active.HasValue) ? e.Active.Value : default(bool);
			}


			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;


		}

		public virtual void When(IItemIssuanceStateRemoved e)
		{
			ThrowOnWrongEvent(e);

			this.Deleted = true;
			this.UpdatedBy = e.CreatedBy;
			this.UpdatedAt = e.CreatedAt;

		}


		public virtual void Mutate(IEvent e)
		{
            StateReadOnly = false;
			((dynamic)this).When((dynamic)e);
		}

        protected void ThrowOnWrongEvent(IItemIssuanceEvent e)
        {
            var id = new System.Text.StringBuilder(); 
            id.Append("[").Append("ItemIssuance|");

            var stateEntityIdShipmentId = (this as IGlobalIdentity<ShipmentItemIssuanceId>).GlobalId.ShipmentId;
            var eventEntityIdShipmentId = e.ItemIssuanceEventId.ShipmentId;
            if (stateEntityIdShipmentId != eventEntityIdShipmentId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id ShipmentId {0} in state but entity id ShipmentId {1} in event", stateEntityIdShipmentId, eventEntityIdShipmentId);
            }
            id.Append(stateEntityIdShipmentId).Append(",");

            var stateEntityIdItemIssuanceSeqId = (this as IGlobalIdentity<ShipmentItemIssuanceId>).GlobalId.ItemIssuanceSeqId;
            var eventEntityIdItemIssuanceSeqId = e.ItemIssuanceEventId.ItemIssuanceSeqId;
            if (stateEntityIdItemIssuanceSeqId != eventEntityIdItemIssuanceSeqId)
            {
                throw DomainError.Named("mutateWrongEntity", "Entity Id ItemIssuanceSeqId {0} in state but entity id ItemIssuanceSeqId {1} in event", stateEntityIdItemIssuanceSeqId, eventEntityIdItemIssuanceSeqId);
            }
            id.Append(stateEntityIdItemIssuanceSeqId).Append(",");

            id.Append("]");

            if (ForReapplying) { return; }
            var stateVersion = this.Version;
            var stateEvent = e is IItemIssuanceStateEvent ? (IItemIssuanceStateEvent)e : null;
            if (e == null) { return; }
            stateEvent.Version = stateVersion;
            //var stateEventStateVersion = stateEvent.Version;
            //if (ItemIssuanceState.VersionZero == stateEventStateVersion)
            //{
            //    stateEventStateVersion = stateEvent.Version = stateVersion;
            //}
            //if (stateVersion != stateEventStateVersion)
            //{
            //    throw OptimisticConcurrencyException.Create(stateVersion, stateEventStateVersion, id.ToString());
            //}
        }
    }

}

