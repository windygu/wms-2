// <autogenerated>
//   This file was generated by T4 code generator GenerateOrderDomain.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Order;
using Dddml.Wms.Domain.PartyRole;

namespace Dddml.Wms.Domain.Order
{

    public class OrderShipGroupStates : IOrderShipGroupStates
    {
        
		protected IOrderShipGroupStateDao OrderShipGroupStateDao
		{
			get
			{
				return ApplicationContext.Current["OrderShipGroupStateDao"] as IOrderShipGroupStateDao;
			}
		}

		private Dictionary<OrderShipGroupId, IOrderShipGroupState> _loadedOrderShipGroupStates = new Dictionary<OrderShipGroupId, IOrderShipGroupState>();

		private Dictionary<OrderShipGroupId, IOrderShipGroupState> _removedOrderShipGroupStates = new Dictionary<OrderShipGroupId, IOrderShipGroupState>();

		protected virtual IEnumerable<IOrderShipGroupState> LoadedOrderShipGroupStates {
			get {
				return this._loadedOrderShipGroupStates.Values;
			}
		}

        private IOrderState _orderState;

        private IEnumerable<IOrderShipGroupState> InnerEnumeralbe
        {
            get
            {
                if (!ForReapplying)
                {
                    return OrderShipGroupStateDao.FindByOrderId(_orderState.OrderId);
                }
                else
                {
                    return _loadedOrderShipGroupStates.Values.Where(s => !(_removedOrderShipGroupStates.ContainsKey(s.GlobalId) && s.Deleted));
                }
            }
        }

        private bool _forReapplying;

        public virtual bool ForReapplying
        {
            get { return _forReapplying; }
            set { _forReapplying = value; } 
        }

        public OrderShipGroupStates(IOrderState outerState)
        {
            this._orderState = outerState;
            this._forReapplying = outerState.ForReapplying;
        }

        public IEnumerator<IOrderShipGroupState> GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return InnerEnumeralbe.GetEnumerator();
        }

        public virtual void Remove(IOrderShipGroupState state)
        {
            this._removedOrderShipGroupStates.Add(state.GlobalId, state);
        }

        public virtual IOrderShipGroupState Get(string shipGroupSeqId)
		{
			return Get(shipGroupSeqId, false, false);
		}

        public virtual IOrderShipGroupState Get(string shipGroupSeqId, bool forCreation)
        {
			return Get(shipGroupSeqId, forCreation, false);
        }

        public virtual IOrderShipGroupState Get(string shipGroupSeqId, bool forCreation, bool nullAllowed)
        {
            OrderShipGroupId globalId = new OrderShipGroupId(_orderState.OrderId, shipGroupSeqId);
            if (_loadedOrderShipGroupStates.ContainsKey(globalId)) {
                var state = _loadedOrderShipGroupStates[globalId];
                if (this._orderState != null && this._orderState.ReadOnly == false) { ((IOrderShipGroupState)state).ReadOnly = false; }
                return state;
            }
            if (forCreation || ForReapplying)
            {
                var state = new OrderShipGroupState(ForReapplying);
                state.OrderShipGroupId = globalId;
                _loadedOrderShipGroupStates.Add(globalId, state);
                if (this._orderState != null && this._orderState.ReadOnly == false) { ((IOrderShipGroupState)state).ReadOnly = false; }
                return state;
            }
            else
            {
                var state = OrderShipGroupStateDao.Get(globalId, nullAllowed);
                if (state != null)
                {
                    _loadedOrderShipGroupStates.Add(globalId, state);
                }
                if (this._orderState != null && this._orderState.ReadOnly == false) { ((IOrderShipGroupState)state).ReadOnly = false; }
                return state;
            }
        }

        public virtual void AddToSave(IOrderShipGroupState state)
        {
            this._loadedOrderShipGroupStates[state.GlobalId] = state;
        }

		#region Saveable Implements

		public virtual void Save ()
		{
			foreach (IOrderShipGroupState s in this.LoadedOrderShipGroupStates) {
                OrderShipGroupStateDao.Save(s);
			}
            foreach(IOrderShipGroupState s in this._removedOrderShipGroupStates.Values)
            {
                OrderShipGroupStateDao.Delete(s);
            }
		}

		#endregion


    }



}


