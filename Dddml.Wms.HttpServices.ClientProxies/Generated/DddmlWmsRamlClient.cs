// <autogenerated>
//   This file was generated by T4 code generator GenerateRamlClientProxies.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Xml.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using RAML.Api.Core;
//using Raml.Common;
using Dddml.Wms.HttpServices.ClientProxies.Raml.Models;
using Dddml.Wms.Domain.Attribute;
using Dddml.Wms.Domain.AttributeSet;
using Dddml.Wms.Domain.AttributeSetInstance;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionField;
using Dddml.Wms.Domain.AttributeSetInstanceExtensionFieldGroup;
using Dddml.Wms.Domain.ContactMech;
using Dddml.Wms.Domain.DamageHandlingMethod;
using Dddml.Wms.Domain.DamageReason;
using Dddml.Wms.Domain.DamageType;
using Dddml.Wms.Domain.DocumentType;
using Dddml.Wms.Domain.Facility;
using Dddml.Wms.Domain.GoodIdentificationType;
using Dddml.Wms.Domain.InOut;
using Dddml.Wms.Domain.InventoryItem;
using Dddml.Wms.Domain.InventoryItemRequirement;
using Dddml.Wms.Domain.InventoryPostingRule;
using Dddml.Wms.Domain.InventoryPRTriggered;
using Dddml.Wms.Domain.Locator;
using Dddml.Wms.Domain.LocatorType;
using Dddml.Wms.Domain.Lot;
using Dddml.Wms.Domain.Movement;
using Dddml.Wms.Domain.MovementConfirmation;
using Dddml.Wms.Domain.MovementType;
using Dddml.Wms.Domain.Order;
using Dddml.Wms.Domain.OrderItemShipGrpInvReservation;
using Dddml.Wms.Domain.OrderShipment;
using Dddml.Wms.Domain.OrganizationStructure;
using Dddml.Wms.Domain.OrganizationStructureType;
using Dddml.Wms.Domain.Party;
using Dddml.Wms.Domain.PartyRole;
using Dddml.Wms.Domain.PhysicalInventory;
using Dddml.Wms.Domain.Picklist;
using Dddml.Wms.Domain.PicklistBin;
using Dddml.Wms.Domain.Pickwave;
using Dddml.Wms.Domain.Product;
using Dddml.Wms.Domain.ProductCategory;
using Dddml.Wms.Domain.ProductCategoryMember;
using Dddml.Wms.Domain.RejectionReason;
using Dddml.Wms.Domain.RoleType;
using Dddml.Wms.Domain.SellableInventoryItem;
using Dddml.Wms.Domain.Shipment;
using Dddml.Wms.Domain.ShipmentMethodType;
using Dddml.Wms.Domain.ShipmentPackage;
using Dddml.Wms.Domain.ShipmentType;
using Dddml.Wms.Domain.StatusItem;
using Dddml.Wms.Domain.SupplierProduct;
using Dddml.Wms.Domain.Uom;
using Dddml.Wms.Domain.UomConversion;
using Dddml.Wms.Domain.UomType;
using Dddml.Wms.Domain.Warehouse;

namespace Dddml.Wms.HttpServices.ClientProxies.Raml
{
    public partial class Attribute
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attribute(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeGetResponse> Get(Models.AttributeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributePutRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributePatchRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeDeleteRequest request)
        {

            var url = "Attributes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Attributes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Attributes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributesGetResponse> Get(Models.AttributesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributesCountGetRequest request)
        {

            var url = "Attributes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeStateEventGetResponse> Get(Models.AttributeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeHistoryStateGetResponse> Get(Models.AttributeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeValue
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeValue(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeValueGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeValueGetResponse> Get(Models.AttributeValueGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{attributeId}/AttributeValues/{value}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

			if(request.UriParameters.Value == null)
				throw new InvalidOperationException("Uri Parameter Value cannot be null");

            url = url.Replace("{value}", request.UriParameters.Value.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeValueGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    /// <summary>
    /// The alias of the attribute.
    /// </summary>
    public partial class AttributeAlias
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeAlias(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeAliasGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeAliasGetResponse> Get(Models.AttributeAliasGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Attributes/{attributeId}/AttributeAlias/{code}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

			if(request.UriParameters.Code == null)
				throw new InvalidOperationException("Uri Parameter Code cannot be null");

            url = url.Replace("{code}", request.UriParameters.Code.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeAliasGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSet
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSet(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetGetResponse> Get(Models.AttributeSetGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetPutRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetPatchRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetDeleteRequest request)
        {

            var url = "AttributeSets/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSets
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSets(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetsGetResponse> Get(Models.AttributeSetsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetsCountGetRequest request)
        {

            var url = "AttributeSets/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetStateEventGetResponse> Get(Models.AttributeSetStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetHistoryStateGetResponse> Get(Models.AttributeSetHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeUse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeUse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeUseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeUseGetResponse> Get(Models.AttributeUseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSets/{attributeSetId}/AttributeUses/{attributeId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.AttributeSetId == null)
				throw new InvalidOperationException("Uri Parameter AttributeSetId cannot be null");

            url = url.Replace("{attributeSetId}", request.UriParameters.AttributeSetId.ToString());

			if(request.UriParameters.AttributeId == null)
				throw new InvalidOperationException("Uri Parameter AttributeId cannot be null");

            url = url.Replace("{attributeId}", request.UriParameters.AttributeId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeUseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ContactMech
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ContactMech(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ContactMechGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ContactMechGetResponse> Get(Models.ContactMechGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ContactMeches/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ContactMechGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ContactMechPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ContactMechPutRequest request)
        {

            var url = "ContactMeches/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateContactMechDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ContactMechPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ContactMechPatchRequest request)
        {

            var url = "ContactMeches/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchContactMechDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ContactMechDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ContactMechDeleteRequest request)
        {

            var url = "ContactMeches/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ContactMeches
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ContactMeches(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ContactMechesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ContactMechesGetResponse> Get(Models.ContactMechesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ContactMeches";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ContactMechesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ContactMechesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ContactMechesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ContactMechesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ContactMechesCountGetRequest request)
        {

            var url = "ContactMeches/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ContactMechStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ContactMechStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ContactMechStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ContactMechStateEventGetResponse> Get(Models.ContactMechStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ContactMeches/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ContactMechStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ContactMechHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ContactMechHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ContactMechHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ContactMechHistoryStateGetResponse> Get(Models.ContactMechHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ContactMeches/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ContactMechHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageHandlingMethod
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageHandlingMethod(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageHandlingMethodGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageHandlingMethodGetResponse> Get(Models.DamageHandlingMethodGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageHandlingMethods/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageHandlingMethodGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageHandlingMethodPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.DamageHandlingMethodPutRequest request)
        {

            var url = "DamageHandlingMethods/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateDamageHandlingMethodDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageHandlingMethodPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.DamageHandlingMethodPatchRequest request)
        {

            var url = "DamageHandlingMethods/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchDamageHandlingMethodDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageHandlingMethodDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.DamageHandlingMethodDeleteRequest request)
        {

            var url = "DamageHandlingMethods/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageHandlingMethods
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageHandlingMethods(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageHandlingMethodsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageHandlingMethodsGetResponse> Get(Models.DamageHandlingMethodsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageHandlingMethods";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageHandlingMethodsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageHandlingMethodsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageHandlingMethodsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageHandlingMethodsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.DamageHandlingMethodsCountGetRequest request)
        {

            var url = "DamageHandlingMethods/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageHandlingMethodStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageHandlingMethodStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageHandlingMethodStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageHandlingMethodStateEventGetResponse> Get(Models.DamageHandlingMethodStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageHandlingMethods/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageHandlingMethodStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageHandlingMethodHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageHandlingMethodHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageHandlingMethodHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageHandlingMethodHistoryStateGetResponse> Get(Models.DamageHandlingMethodHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageHandlingMethods/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageHandlingMethodHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageReason
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageReason(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageReasonGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageReasonGetResponse> Get(Models.DamageReasonGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageReasonGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageReasonPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.DamageReasonPutRequest request)
        {

            var url = "DamageReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateDamageReasonDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageReasonPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.DamageReasonPatchRequest request)
        {

            var url = "DamageReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchDamageReasonDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageReasonDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.DamageReasonDeleteRequest request)
        {

            var url = "DamageReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageReasons
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageReasons(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageReasonsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageReasonsGetResponse> Get(Models.DamageReasonsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageReasons";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageReasonsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageReasonsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageReasonsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageReasonsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.DamageReasonsCountGetRequest request)
        {

            var url = "DamageReasons/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageReasonStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageReasonStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageReasonStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageReasonStateEventGetResponse> Get(Models.DamageReasonStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageReasons/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageReasonStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageReasonHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageReasonHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageReasonHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageReasonHistoryStateGetResponse> Get(Models.DamageReasonHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageReasons/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageReasonHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageTypeGetResponse> Get(Models.DamageTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.DamageTypePutRequest request)
        {

            var url = "DamageTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateDamageTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.DamageTypePatchRequest request)
        {

            var url = "DamageTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchDamageTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DamageTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.DamageTypeDeleteRequest request)
        {

            var url = "DamageTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageTypesGetResponse> Get(Models.DamageTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.DamageTypesCountGetRequest request)
        {

            var url = "DamageTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageTypeStateEventGetResponse> Get(Models.DamageTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DamageTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DamageTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DamageTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DamageTypeHistoryStateGetResponse> Get(Models.DamageTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DamageTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DamageTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeGetResponse> Get(Models.DocumentTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.DocumentTypePutRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateDocumentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.DocumentTypePatchRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchDocumentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.DocumentTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.DocumentTypeDeleteRequest request)
        {

            var url = "DocumentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypesGetResponse> Get(Models.DocumentTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.DocumentTypesCountGetRequest request)
        {

            var url = "DocumentTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeStateEventGetResponse> Get(Models.DocumentTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class DocumentTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal DocumentTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.DocumentTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.DocumentTypeHistoryStateGetResponse> Get(Models.DocumentTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "DocumentTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.DocumentTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Facility
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Facility(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.FacilityGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.FacilityGetResponse> Get(Models.FacilityGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Facilities/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.FacilityGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.FacilityPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.FacilityPutRequest request)
        {

            var url = "Facilities/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateFacilityDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.FacilityPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.FacilityPatchRequest request)
        {

            var url = "Facilities/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchFacilityDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.FacilityDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.FacilityDeleteRequest request)
        {

            var url = "Facilities/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Facilities
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Facilities(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.FacilitiesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.FacilitiesGetResponse> Get(Models.FacilitiesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Facilities";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.FacilitiesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FacilitiesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal FacilitiesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.FacilitiesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.FacilitiesCountGetRequest request)
        {

            var url = "Facilities/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FacilityStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal FacilityStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.FacilityStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.FacilityStateEventGetResponse> Get(Models.FacilityStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Facilities/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.FacilityStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class FacilityHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal FacilityHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.FacilityHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.FacilityHistoryStateGetResponse> Get(Models.FacilityHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Facilities/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.FacilityHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentificationType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentificationType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.GoodIdentificationTypeGetResponse> Get(Models.GoodIdentificationTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "GoodIdentificationTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.GoodIdentificationTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.GoodIdentificationTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.GoodIdentificationTypePutRequest request)
        {

            var url = "GoodIdentificationTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateGoodIdentificationTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.GoodIdentificationTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.GoodIdentificationTypePatchRequest request)
        {

            var url = "GoodIdentificationTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchGoodIdentificationTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.GoodIdentificationTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.GoodIdentificationTypeDeleteRequest request)
        {

            var url = "GoodIdentificationTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentificationTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentificationTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.GoodIdentificationTypesGetResponse> Get(Models.GoodIdentificationTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "GoodIdentificationTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.GoodIdentificationTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentificationTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentificationTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.GoodIdentificationTypesCountGetRequest request)
        {

            var url = "GoodIdentificationTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentificationTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentificationTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.GoodIdentificationTypeStateEventGetResponse> Get(Models.GoodIdentificationTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "GoodIdentificationTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.GoodIdentificationTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentificationTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentificationTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.GoodIdentificationTypeHistoryStateGetResponse> Get(Models.GoodIdentificationTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "GoodIdentificationTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.GoodIdentificationTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOut
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOut(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutGetResponse> Get(Models.InOutGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InOutPutRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InOutPatchRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInOutDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InOutDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InOutDeleteRequest request)
        {

            var url = "InOuts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOuts
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOuts(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutsGetResponse> Get(Models.InOutsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InOutsCountGetRequest request)
        {

            var url = "InOuts/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutStateEventGetResponse> Get(Models.InOutStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutHistoryStateGetResponse> Get(Models.InOutHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutImage
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutImage(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutImageGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutImageGetResponse> Get(Models.InOutImageGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{inOutDocumentNumber}/InOutImages/{sequenceId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InOutDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutDocumentNumber cannot be null");

            url = url.Replace("{inOutDocumentNumber}", request.UriParameters.InOutDocumentNumber.ToString());

			if(request.UriParameters.SequenceId == null)
				throw new InvalidOperationException("Uri Parameter SequenceId cannot be null");

            url = url.Replace("{sequenceId}", request.UriParameters.SequenceId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutImageGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineGetResponse> Get(Models.InOutLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InOutDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutDocumentNumber cannot be null");

            url = url.Replace("{inOutDocumentNumber}", request.UriParameters.InOutDocumentNumber.ToString());

			if(request.UriParameters.LineNumber == null)
				throw new InvalidOperationException("Uri Parameter LineNumber cannot be null");

            url = url.Replace("{lineNumber}", request.UriParameters.LineNumber.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InOutLineImage
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InOutLineImage(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InOutLineImageGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InOutLineImageGetResponse> Get(Models.InOutLineImageGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InOuts/{inOutDocumentNumber}/InOutLines/{inOutLineLineNumber}/InOutLineImages/{sequenceId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InOutDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutDocumentNumber cannot be null");

            url = url.Replace("{inOutDocumentNumber}", request.UriParameters.InOutDocumentNumber.ToString());

			if(request.UriParameters.InOutLineLineNumber == null)
				throw new InvalidOperationException("Uri Parameter InOutLineLineNumber cannot be null");

            url = url.Replace("{inOutLineLineNumber}", request.UriParameters.InOutLineLineNumber.ToString());

			if(request.UriParameters.SequenceId == null)
				throw new InvalidOperationException("Uri Parameter SequenceId cannot be null");

            url = url.Replace("{sequenceId}", request.UriParameters.SequenceId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InOutLineImageGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemGetResponse> Get(Models.InventoryItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryItemPutRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryItemPatchRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryItemDeleteRequest request)
        {

            var url = "InventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemsGetResponse> Get(Models.InventoryItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryItemsCountGetRequest request)
        {

            var url = "InventoryItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemStateEventGetResponse> Get(Models.InventoryItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemHistoryStateGetResponse> Get(Models.InventoryItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemEntry
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemEntry(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemEntryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemEntryGetResponse> Get(Models.InventoryItemEntryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItems/{inventoryItemId}/InventoryItemEntries/{entrySeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InventoryItemId == null)
				throw new InvalidOperationException("Uri Parameter InventoryItemId cannot be null");

            url = url.Replace("{inventoryItemId}", request.UriParameters.InventoryItemId.ToString());

			if(request.UriParameters.EntrySeqId == null)
				throw new InvalidOperationException("Uri Parameter EntrySeqId cannot be null");

            url = url.Replace("{entrySeqId}", request.UriParameters.EntrySeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemEntryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirement
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirement(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemRequirementGetResponse> Get(Models.InventoryItemRequirementGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemRequirements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemRequirementGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemRequirementPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryItemRequirementPutRequest request)
        {

            var url = "InventoryItemRequirements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryItemRequirementDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemRequirementPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryItemRequirementPatchRequest request)
        {

            var url = "InventoryItemRequirements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryItemRequirementDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryItemRequirementDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryItemRequirementDeleteRequest request)
        {

            var url = "InventoryItemRequirements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirements
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirements(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemRequirementsGetResponse> Get(Models.InventoryItemRequirementsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemRequirements";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemRequirementsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirementsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirementsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryItemRequirementsCountGetRequest request)
        {

            var url = "InventoryItemRequirements/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirementStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirementStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemRequirementStateEventGetResponse> Get(Models.InventoryItemRequirementStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemRequirements/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemRequirementStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirementHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirementHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemRequirementHistoryStateGetResponse> Get(Models.InventoryItemRequirementHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemRequirements/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemRequirementHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryItemRequirementEntry
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryItemRequirementEntry(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryItemRequirementEntryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryItemRequirementEntryGetResponse> Get(Models.InventoryItemRequirementEntryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryItemRequirements/{inventoryItemRequirementId}/InventoryItemRequirementEntries/{entrySeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.InventoryItemRequirementId == null)
				throw new InvalidOperationException("Uri Parameter InventoryItemRequirementId cannot be null");

            url = url.Replace("{inventoryItemRequirementId}", request.UriParameters.InventoryItemRequirementId.ToString());

			if(request.UriParameters.EntrySeqId == null)
				throw new InvalidOperationException("Uri Parameter EntrySeqId cannot be null");

            url = url.Replace("{entrySeqId}", request.UriParameters.EntrySeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryItemRequirementEntryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRule
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRule(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleGetResponse> Get(Models.InventoryPostingRuleGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRulePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryPostingRulePutRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryPostingRuleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRulePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryPostingRulePatchRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryPostingRuleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPostingRuleDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryPostingRuleDeleteRequest request)
        {

            var url = "InventoryPostingRules/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRules
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRules(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRulesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRulesGetResponse> Get(Models.InventoryPostingRulesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRulesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRulesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRulesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRulesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryPostingRulesCountGetRequest request)
        {

            var url = "InventoryPostingRules/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRuleStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRuleStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleStateEventGetResponse> Get(Models.InventoryPostingRuleStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPostingRuleHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPostingRuleHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPostingRuleHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPostingRuleHistoryStateGetResponse> Get(Models.InventoryPostingRuleHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPostingRules/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPostingRuleHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggered
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggered(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredGetResponse> Get(Models.InventoryPRTriggeredGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.InventoryPRTriggeredPutRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateInventoryPRTriggeredDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.InventoryPRTriggeredPatchRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchInventoryPRTriggeredDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.InventoryPRTriggeredDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.InventoryPRTriggeredDeleteRequest request)
        {

            var url = "InventoryPRTriggereds/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggereds
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggereds(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredsGetResponse> Get(Models.InventoryPRTriggeredsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.InventoryPRTriggeredsCountGetRequest request)
        {

            var url = "InventoryPRTriggereds/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredStateEventGetResponse> Get(Models.InventoryPRTriggeredStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class InventoryPRTriggeredHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal InventoryPRTriggeredHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.InventoryPRTriggeredHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.InventoryPRTriggeredHistoryStateGetResponse> Get(Models.InventoryPRTriggeredHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "InventoryPRTriggereds/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.InventoryPRTriggeredHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locator
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locator(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorGetResponse> Get(Models.LocatorGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.LocatorPutRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.LocatorPatchRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchLocatorDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.LocatorDeleteRequest request)
        {

            var url = "Locators/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Locators
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Locators(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorsGetResponse> Get(Models.LocatorsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.LocatorsCountGetRequest request)
        {

            var url = "Locators/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorStateEventGetResponse> Get(Models.LocatorStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorHistoryStateGetResponse> Get(Models.LocatorHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Locators/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTypeGetResponse> Get(Models.LocatorTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.LocatorTypePutRequest request)
        {

            var url = "LocatorTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateLocatorTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.LocatorTypePatchRequest request)
        {

            var url = "LocatorTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchLocatorTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LocatorTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.LocatorTypeDeleteRequest request)
        {

            var url = "LocatorTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTypesGetResponse> Get(Models.LocatorTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.LocatorTypesCountGetRequest request)
        {

            var url = "LocatorTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTypeStateEventGetResponse> Get(Models.LocatorTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTypeHistoryStateGetResponse> Get(Models.LocatorTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Lot
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Lot(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LotGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LotGetResponse> Get(Models.LotGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Lots/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LotGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LotPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.LotPutRequest request)
        {

            var url = "Lots/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateLotDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LotPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.LotPatchRequest request)
        {

            var url = "Lots/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchLotDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.LotDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.LotDeleteRequest request)
        {

            var url = "Lots/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Lots
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Lots(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LotsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LotsGetResponse> Get(Models.LotsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Lots";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LotsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LotsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LotsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LotsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.LotsCountGetRequest request)
        {

            var url = "Lots/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LotStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LotStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LotStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LotStateEventGetResponse> Get(Models.LotStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Lots/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LotStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LotHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LotHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LotHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LotHistoryStateGetResponse> Get(Models.LotHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Lots/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LotHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Movement
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Movement(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementGetResponse> Get(Models.MovementGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Movements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.MovementPutRequest request)
        {

            var url = "Movements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateMovementDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.MovementPatchRequest request)
        {

            var url = "Movements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchMovementDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.MovementDeleteRequest request)
        {

            var url = "Movements/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Movements
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Movements(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementsGetResponse> Get(Models.MovementsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Movements";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.MovementsCountGetRequest request)
        {

            var url = "Movements/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementStateEventGetResponse> Get(Models.MovementStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Movements/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementHistoryStateGetResponse> Get(Models.MovementHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Movements/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementLineGetResponse> Get(Models.MovementLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Movements/{movementDocumentNumber}/MovementLines/{lineNumber}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.MovementDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter MovementDocumentNumber cannot be null");

            url = url.Replace("{movementDocumentNumber}", request.UriParameters.MovementDocumentNumber.ToString());

			if(request.UriParameters.LineNumber == null)
				throw new InvalidOperationException("Uri Parameter LineNumber cannot be null");

            url = url.Replace("{lineNumber}", request.UriParameters.LineNumber.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmation
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmation(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementConfirmationGetResponse> Get(Models.MovementConfirmationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementConfirmations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementConfirmationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementConfirmationPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.MovementConfirmationPutRequest request)
        {

            var url = "MovementConfirmations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateMovementConfirmationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementConfirmationPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.MovementConfirmationPatchRequest request)
        {

            var url = "MovementConfirmations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchMovementConfirmationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementConfirmationDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.MovementConfirmationDeleteRequest request)
        {

            var url = "MovementConfirmations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmations
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmations(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementConfirmationsGetResponse> Get(Models.MovementConfirmationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementConfirmations";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementConfirmationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmationsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmationsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.MovementConfirmationsCountGetRequest request)
        {

            var url = "MovementConfirmations/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmationStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmationStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementConfirmationStateEventGetResponse> Get(Models.MovementConfirmationStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementConfirmations/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementConfirmationStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmationHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmationHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementConfirmationHistoryStateGetResponse> Get(Models.MovementConfirmationHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementConfirmations/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementConfirmationHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementConfirmationLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementConfirmationLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementConfirmationLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementConfirmationLineGetResponse> Get(Models.MovementConfirmationLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementConfirmations/{movementConfirmationDocumentNumber}/MovementConfirmationLines/{lineNumber}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.MovementConfirmationDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter MovementConfirmationDocumentNumber cannot be null");

            url = url.Replace("{movementConfirmationDocumentNumber}", request.UriParameters.MovementConfirmationDocumentNumber.ToString());

			if(request.UriParameters.LineNumber == null)
				throw new InvalidOperationException("Uri Parameter LineNumber cannot be null");

            url = url.Replace("{lineNumber}", request.UriParameters.LineNumber.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementConfirmationLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeGetResponse> Get(Models.MovementTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.MovementTypePutRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateMovementTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.MovementTypePatchRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchMovementTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.MovementTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.MovementTypeDeleteRequest request)
        {

            var url = "MovementTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypesGetResponse> Get(Models.MovementTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.MovementTypesCountGetRequest request)
        {

            var url = "MovementTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeStateEventGetResponse> Get(Models.MovementTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class MovementTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal MovementTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.MovementTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.MovementTypeHistoryStateGetResponse> Get(Models.MovementTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "MovementTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.MovementTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Order
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Order(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderGetResponse> Get(Models.OrderGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderPutRequest request)
        {

            var url = "Orders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderPatchRequest request)
        {

            var url = "Orders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderDeleteRequest request)
        {

            var url = "Orders/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Orders
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Orders(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrdersGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrdersGetResponse> Get(Models.OrdersGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrdersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrdersCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrdersCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrdersCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrdersCountGetRequest request)
        {

            var url = "Orders/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderStateEventGetResponse> Get(Models.OrderStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderHistoryStateGetResponse> Get(Models.OrderHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderRole
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderRole(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderRoleGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderRoleGetResponse> Get(Models.OrderRoleGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{orderId}/OrderRoles/{partyRoleId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.OrderId == null)
				throw new InvalidOperationException("Uri Parameter OrderId cannot be null");

            url = url.Replace("{orderId}", request.UriParameters.OrderId.ToString());

			if(request.UriParameters.PartyRoleId == null)
				throw new InvalidOperationException("Uri Parameter PartyRoleId cannot be null");

            url = url.Replace("{partyRoleId}", request.UriParameters.PartyRoleId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderRoleGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemGetResponse> Get(Models.OrderItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{orderId}/OrderItems/{orderItemSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.OrderId == null)
				throw new InvalidOperationException("Uri Parameter OrderId cannot be null");

            url = url.Replace("{orderId}", request.UriParameters.OrderId.ToString());

			if(request.UriParameters.OrderItemSeqId == null)
				throw new InvalidOperationException("Uri Parameter OrderItemSeqId cannot be null");

            url = url.Replace("{orderItemSeqId}", request.UriParameters.OrderItemSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipGroup
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipGroup(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipGroupGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipGroupGetResponse> Get(Models.OrderShipGroupGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{orderId}/OrderShipGroups/{shipGroupSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.OrderId == null)
				throw new InvalidOperationException("Uri Parameter OrderId cannot be null");

            url = url.Replace("{orderId}", request.UriParameters.OrderId.ToString());

			if(request.UriParameters.ShipGroupSeqId == null)
				throw new InvalidOperationException("Uri Parameter ShipGroupSeqId cannot be null");

            url = url.Replace("{shipGroupSeqId}", request.UriParameters.ShipGroupSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipGroupGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGroupAssociation
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGroupAssociation(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGroupAssociationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemShipGroupAssociationGetResponse> Get(Models.OrderItemShipGroupAssociationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Orders/{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.OrderId == null)
				throw new InvalidOperationException("Uri Parameter OrderId cannot be null");

            url = url.Replace("{orderId}", request.UriParameters.OrderId.ToString());

			if(request.UriParameters.OrderShipGroupShipGroupSeqId == null)
				throw new InvalidOperationException("Uri Parameter OrderShipGroupShipGroupSeqId cannot be null");

            url = url.Replace("{orderShipGroupShipGroupSeqId}", request.UriParameters.OrderShipGroupShipGroupSeqId.ToString());

			if(request.UriParameters.OrderItemSeqId == null)
				throw new InvalidOperationException("Uri Parameter OrderItemSeqId cannot be null");

            url = url.Replace("{orderItemSeqId}", request.UriParameters.OrderItemSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemShipGroupAssociationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGrpInvReservation
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGrpInvReservation(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGrpInvReservationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemShipGrpInvReservationGetResponse> Get(Models.OrderItemShipGrpInvReservationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItemShipGrpInvReservations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemShipGrpInvReservationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemShipGrpInvReservationPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderItemShipGrpInvReservationPutRequest request)
        {

            var url = "OrderItemShipGrpInvReservations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderItemShipGrpInvReservationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemShipGrpInvReservationPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderItemShipGrpInvReservationPatchRequest request)
        {

            var url = "OrderItemShipGrpInvReservations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderItemShipGrpInvReservationDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderItemShipGrpInvReservationDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderItemShipGrpInvReservationDeleteRequest request)
        {

            var url = "OrderItemShipGrpInvReservations/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGrpInvReservations
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGrpInvReservations(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGrpInvReservationsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemShipGrpInvReservationsGetResponse> Get(Models.OrderItemShipGrpInvReservationsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItemShipGrpInvReservations";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemShipGrpInvReservationsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGrpInvReservationsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGrpInvReservationsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGrpInvReservationsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrderItemShipGrpInvReservationsCountGetRequest request)
        {

            var url = "OrderItemShipGrpInvReservations/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGrpInvReservationStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGrpInvReservationStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGrpInvReservationStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemShipGrpInvReservationStateEventGetResponse> Get(Models.OrderItemShipGrpInvReservationStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItemShipGrpInvReservations/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemShipGrpInvReservationStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderItemShipGrpInvReservationHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderItemShipGrpInvReservationHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderItemShipGrpInvReservationHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderItemShipGrpInvReservationHistoryStateGetResponse> Get(Models.OrderItemShipGrpInvReservationHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderItemShipGrpInvReservations/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderItemShipGrpInvReservationHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipment
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipment(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentGetResponse> Get(Models.OrderShipmentGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrderShipmentPutRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrderShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrderShipmentPatchRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrderShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrderShipmentDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrderShipmentDeleteRequest request)
        {

            var url = "OrderShipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipments
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipments(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentsGetResponse> Get(Models.OrderShipmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrderShipmentsCountGetRequest request)
        {

            var url = "OrderShipments/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentStateEventGetResponse> Get(Models.OrderShipmentStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrderShipmentHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrderShipmentHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrderShipmentHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrderShipmentHistoryStateGetResponse> Get(Models.OrderShipmentHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrderShipments/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrderShipmentHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructure
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructure(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureGetResponse> Get(Models.OrganizationStructureGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructurePutRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructurePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructurePatchRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureDeleteRequest request)
        {

            var url = "OrganizationStructures/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructures
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructures(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructuresGetResponse> Get(Models.OrganizationStructuresGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructuresGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructuresCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructuresCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructuresCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructuresCountGetRequest request)
        {

            var url = "OrganizationStructures/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureStateEventGetResponse> Get(Models.OrganizationStructureStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureHistoryStateGetResponse> Get(Models.OrganizationStructureHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructures/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeGetResponse> Get(Models.OrganizationStructureTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.OrganizationStructureTypePutRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.OrganizationStructureTypePatchRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchOrganizationStructureTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.OrganizationStructureTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.OrganizationStructureTypeDeleteRequest request)
        {

            var url = "OrganizationStructureTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypesGetResponse> Get(Models.OrganizationStructureTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.OrganizationStructureTypesCountGetRequest request)
        {

            var url = "OrganizationStructureTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeStateEventGetResponse> Get(Models.OrganizationStructureTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationStructureTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationStructureTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationStructureTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationStructureTypeHistoryStateGetResponse> Get(Models.OrganizationStructureTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationStructureTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationStructureTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Party
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Party(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyGetResponse> Get(Models.PartyGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Parties/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PartyPutRequest request)
        {

            var url = "Parties/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePartyDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PartyPatchRequest request)
        {

            var url = "Parties/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPartyDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PartyDeleteRequest request)
        {

            var url = "Parties/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Parties
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Parties(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartiesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartiesGetResponse> Get(Models.PartiesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Parties";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartiesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartiesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartiesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartiesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PartiesCountGetRequest request)
        {

            var url = "Parties/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyStateEventGetResponse> Get(Models.PartyStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Parties/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyHistoryStateGetResponse> Get(Models.PartyHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Parties/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyRole
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyRole(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyRoleGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyRoleGetResponse> Get(Models.PartyRoleGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PartyRoles/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyRoleGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyRolePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PartyRolePutRequest request)
        {

            var url = "PartyRoles/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePartyRoleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyRolePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PartyRolePatchRequest request)
        {

            var url = "PartyRoles/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPartyRoleDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PartyRoleDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PartyRoleDeleteRequest request)
        {

            var url = "PartyRoles/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyRoles
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyRoles(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyRolesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyRolesGetResponse> Get(Models.PartyRolesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PartyRoles";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyRolesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyRolesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyRolesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyRolesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PartyRolesCountGetRequest request)
        {

            var url = "PartyRoles/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyRoleStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyRoleStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyRoleStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyRoleStateEventGetResponse> Get(Models.PartyRoleStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PartyRoles/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyRoleStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PartyRoleHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PartyRoleHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PartyRoleHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PartyRoleHistoryStateGetResponse> Get(Models.PartyRoleHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PartyRoles/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PartyRoleHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventory
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventory(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PhysicalInventoryGetResponse> Get(Models.PhysicalInventoryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PhysicalInventories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PhysicalInventoryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PhysicalInventoryPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PhysicalInventoryPutRequest request)
        {

            var url = "PhysicalInventories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePhysicalInventoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PhysicalInventoryPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PhysicalInventoryPatchRequest request)
        {

            var url = "PhysicalInventories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPhysicalInventoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PhysicalInventoryDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PhysicalInventoryDeleteRequest request)
        {

            var url = "PhysicalInventories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventories
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventories(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoriesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PhysicalInventoriesGetResponse> Get(Models.PhysicalInventoriesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PhysicalInventories";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PhysicalInventoriesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventoriesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventoriesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoriesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PhysicalInventoriesCountGetRequest request)
        {

            var url = "PhysicalInventories/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventoryStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventoryStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoryStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PhysicalInventoryStateEventGetResponse> Get(Models.PhysicalInventoryStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PhysicalInventories/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PhysicalInventoryStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventoryHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventoryHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoryHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PhysicalInventoryHistoryStateGetResponse> Get(Models.PhysicalInventoryHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PhysicalInventories/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PhysicalInventoryHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PhysicalInventoryLine
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PhysicalInventoryLine(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PhysicalInventoryLineGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PhysicalInventoryLineGetResponse> Get(Models.PhysicalInventoryLineGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PhysicalInventories/{physicalInventoryDocumentNumber}/PhysicalInventoryLines/{inventoryItemId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.PhysicalInventoryDocumentNumber == null)
				throw new InvalidOperationException("Uri Parameter PhysicalInventoryDocumentNumber cannot be null");

            url = url.Replace("{physicalInventoryDocumentNumber}", request.UriParameters.PhysicalInventoryDocumentNumber.ToString());

			if(request.UriParameters.InventoryItemId == null)
				throw new InvalidOperationException("Uri Parameter InventoryItemId cannot be null");

            url = url.Replace("{inventoryItemId}", request.UriParameters.InventoryItemId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PhysicalInventoryLineGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Picklist
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Picklist(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistGetResponse> Get(Models.PicklistGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Picklists/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PicklistPutRequest request)
        {

            var url = "Picklists/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePicklistDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PicklistPatchRequest request)
        {

            var url = "Picklists/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPicklistDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PicklistDeleteRequest request)
        {

            var url = "Picklists/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Picklists
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Picklists(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistsGetResponse> Get(Models.PicklistsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Picklists";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PicklistsCountGetRequest request)
        {

            var url = "Picklists/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistStateEventGetResponse> Get(Models.PicklistStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Picklists/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistHistoryStateGetResponse> Get(Models.PicklistHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Picklists/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistRole
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistRole(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistRoleGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistRoleGetResponse> Get(Models.PicklistRoleGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Picklists/{picklistId}/PicklistRoles/{partyRoleId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.PicklistId == null)
				throw new InvalidOperationException("Uri Parameter PicklistId cannot be null");

            url = url.Replace("{picklistId}", request.UriParameters.PicklistId.ToString());

			if(request.UriParameters.PartyRoleId == null)
				throw new InvalidOperationException("Uri Parameter PartyRoleId cannot be null");

            url = url.Replace("{partyRoleId}", request.UriParameters.PartyRoleId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistRoleGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistBin
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistBin(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistBinGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistBinGetResponse> Get(Models.PicklistBinGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PicklistBins/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistBinGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistBinPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PicklistBinPutRequest request)
        {

            var url = "PicklistBins/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePicklistBinDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistBinPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PicklistBinPatchRequest request)
        {

            var url = "PicklistBins/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPicklistBinDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PicklistBinDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PicklistBinDeleteRequest request)
        {

            var url = "PicklistBins/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistBins
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistBins(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistBinsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistBinsGetResponse> Get(Models.PicklistBinsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PicklistBins";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistBinsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistBinsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistBinsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistBinsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PicklistBinsCountGetRequest request)
        {

            var url = "PicklistBins/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistBinStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistBinStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistBinStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistBinStateEventGetResponse> Get(Models.PicklistBinStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PicklistBins/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistBinStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistBinHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistBinHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistBinHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistBinHistoryStateGetResponse> Get(Models.PicklistBinHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PicklistBins/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistBinHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PicklistItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PicklistItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PicklistItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PicklistItemGetResponse> Get(Models.PicklistItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "PicklistBins/{picklistBinId}/PicklistItems/{picklistItemOrderShipGrpInvId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.PicklistBinId == null)
				throw new InvalidOperationException("Uri Parameter PicklistBinId cannot be null");

            url = url.Replace("{picklistBinId}", request.UriParameters.PicklistBinId.ToString());

			if(request.UriParameters.PicklistItemOrderShipGrpInvId == null)
				throw new InvalidOperationException("Uri Parameter PicklistItemOrderShipGrpInvId cannot be null");

            url = url.Replace("{picklistItemOrderShipGrpInvId}", request.UriParameters.PicklistItemOrderShipGrpInvId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PicklistItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Pickwave
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Pickwave(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PickwaveGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PickwaveGetResponse> Get(Models.PickwaveGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Pickwaves/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PickwaveGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PickwavePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.PickwavePutRequest request)
        {

            var url = "Pickwaves/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreatePickwaveDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PickwavePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.PickwavePatchRequest request)
        {

            var url = "Pickwaves/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchPickwaveDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.PickwaveDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.PickwaveDeleteRequest request)
        {

            var url = "Pickwaves/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Pickwaves
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Pickwaves(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PickwavesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PickwavesGetResponse> Get(Models.PickwavesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Pickwaves";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PickwavesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PickwavesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PickwavesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PickwavesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.PickwavesCountGetRequest request)
        {

            var url = "Pickwaves/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PickwaveStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PickwaveStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PickwaveStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PickwaveStateEventGetResponse> Get(Models.PickwaveStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Pickwaves/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PickwaveStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class PickwaveHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal PickwaveHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.PickwaveHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.PickwaveHistoryStateGetResponse> Get(Models.PickwaveHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Pickwaves/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.PickwaveHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Product
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Product(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductGetResponse> Get(Models.ProductGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ProductPutRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ProductPatchRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ProductDeleteRequest request)
        {

            var url = "Products/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Products
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Products(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductsGetResponse> Get(Models.ProductsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ProductsCountGetRequest request)
        {

            var url = "Products/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductStateEventGetResponse> Get(Models.ProductStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductHistoryStateGetResponse> Get(Models.ProductHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class GoodIdentification
    {
        private readonly DddmlWmsRamlClient proxy;

        internal GoodIdentification(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.GoodIdentificationGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.GoodIdentificationGetResponse> Get(Models.GoodIdentificationGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Products/{productId}/GoodIdentifications/{goodIdentificationTypeId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ProductId == null)
				throw new InvalidOperationException("Uri Parameter ProductId cannot be null");

            url = url.Replace("{productId}", request.UriParameters.ProductId.ToString());

			if(request.UriParameters.GoodIdentificationTypeId == null)
				throw new InvalidOperationException("Uri Parameter GoodIdentificationTypeId cannot be null");

            url = url.Replace("{goodIdentificationTypeId}", request.UriParameters.GoodIdentificationTypeId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.GoodIdentificationGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategory
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategory(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryGetResponse> Get(Models.ProductCategoryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ProductCategoryPutRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateProductCategoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ProductCategoryPatchRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchProductCategoryDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ProductCategoryDeleteRequest request)
        {

            var url = "ProductCategories/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategories
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategories(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoriesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoriesGetResponse> Get(Models.ProductCategoriesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoriesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoriesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoriesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoriesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ProductCategoriesCountGetRequest request)
        {

            var url = "ProductCategories/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryStateEventGetResponse> Get(Models.ProductCategoryStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryHistoryStateGetResponse> Get(Models.ProductCategoryHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategories/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryMember
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryMember(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryMemberGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryMemberGetResponse> Get(Models.ProductCategoryMemberGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategoryMembers/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryMemberGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryMemberPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ProductCategoryMemberPutRequest request)
        {

            var url = "ProductCategoryMembers/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateProductCategoryMemberDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryMemberPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ProductCategoryMemberPatchRequest request)
        {

            var url = "ProductCategoryMembers/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchProductCategoryMemberDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ProductCategoryMemberDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ProductCategoryMemberDeleteRequest request)
        {

            var url = "ProductCategoryMembers/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryMembers
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryMembers(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryMembersGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryMembersGetResponse> Get(Models.ProductCategoryMembersGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategoryMembers";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryMembersGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryMembersCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryMembersCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryMembersCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ProductCategoryMembersCountGetRequest request)
        {

            var url = "ProductCategoryMembers/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryMemberStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryMemberStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryMemberStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryMemberStateEventGetResponse> Get(Models.ProductCategoryMemberStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategoryMembers/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryMemberStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ProductCategoryMemberHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ProductCategoryMemberHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ProductCategoryMemberHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ProductCategoryMemberHistoryStateGetResponse> Get(Models.ProductCategoryMemberHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ProductCategoryMembers/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ProductCategoryMemberHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RejectionReason
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RejectionReason(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RejectionReasonGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RejectionReasonGetResponse> Get(Models.RejectionReasonGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RejectionReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RejectionReasonGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RejectionReasonPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.RejectionReasonPutRequest request)
        {

            var url = "RejectionReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateRejectionReasonDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RejectionReasonPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.RejectionReasonPatchRequest request)
        {

            var url = "RejectionReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchRejectionReasonDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RejectionReasonDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.RejectionReasonDeleteRequest request)
        {

            var url = "RejectionReasons/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RejectionReasons
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RejectionReasons(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RejectionReasonsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RejectionReasonsGetResponse> Get(Models.RejectionReasonsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RejectionReasons";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RejectionReasonsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RejectionReasonsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RejectionReasonsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RejectionReasonsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.RejectionReasonsCountGetRequest request)
        {

            var url = "RejectionReasons/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RejectionReasonStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RejectionReasonStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RejectionReasonStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RejectionReasonStateEventGetResponse> Get(Models.RejectionReasonStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RejectionReasons/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RejectionReasonStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RejectionReasonHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RejectionReasonHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RejectionReasonHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RejectionReasonHistoryStateGetResponse> Get(Models.RejectionReasonHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RejectionReasons/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RejectionReasonHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RoleType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RoleType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RoleTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RoleTypeGetResponse> Get(Models.RoleTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RoleTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RoleTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RoleTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.RoleTypePutRequest request)
        {

            var url = "RoleTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateRoleTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RoleTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.RoleTypePatchRequest request)
        {

            var url = "RoleTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchRoleTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.RoleTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.RoleTypeDeleteRequest request)
        {

            var url = "RoleTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RoleTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RoleTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RoleTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RoleTypesGetResponse> Get(Models.RoleTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RoleTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RoleTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RoleTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RoleTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RoleTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.RoleTypesCountGetRequest request)
        {

            var url = "RoleTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RoleTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RoleTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RoleTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RoleTypeStateEventGetResponse> Get(Models.RoleTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RoleTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RoleTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class RoleTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal RoleTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.RoleTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.RoleTypeHistoryStateGetResponse> Get(Models.RoleTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "RoleTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.RoleTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemGetResponse> Get(Models.SellableInventoryItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.SellableInventoryItemPutRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateSellableInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.SellableInventoryItemPatchRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchSellableInventoryItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SellableInventoryItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.SellableInventoryItemDeleteRequest request)
        {

            var url = "SellableInventoryItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemsGetResponse> Get(Models.SellableInventoryItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.SellableInventoryItemsCountGetRequest request)
        {

            var url = "SellableInventoryItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemStateEventGetResponse> Get(Models.SellableInventoryItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemHistoryStateGetResponse> Get(Models.SellableInventoryItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SellableInventoryItemEntry
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SellableInventoryItemEntry(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SellableInventoryItemEntryGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SellableInventoryItemEntryGetResponse> Get(Models.SellableInventoryItemEntryGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SellableInventoryItems/{sellableInventoryItemId}/SellableInventoryItemEntries/{entrySeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.SellableInventoryItemId == null)
				throw new InvalidOperationException("Uri Parameter SellableInventoryItemId cannot be null");

            url = url.Replace("{sellableInventoryItemId}", request.UriParameters.SellableInventoryItemId.ToString());

			if(request.UriParameters.EntrySeqId == null)
				throw new InvalidOperationException("Uri Parameter EntrySeqId cannot be null");

            url = url.Replace("{entrySeqId}", request.UriParameters.EntrySeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SellableInventoryItemEntryGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Shipment
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Shipment(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentGetResponse> Get(Models.ShipmentGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentPutRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentPatchRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentDeleteRequest request)
        {

            var url = "Shipments/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Shipments
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Shipments(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentsGetResponse> Get(Models.ShipmentsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentsCountGetRequest request)
        {

            var url = "Shipments/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentStateEventGetResponse> Get(Models.ShipmentStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentHistoryStateGetResponse> Get(Models.ShipmentHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentImage
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentImage(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentImageGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentImageGetResponse> Get(Models.ShipmentImageGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{shipmentId}/ShipmentImages/{sequenceId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentId cannot be null");

            url = url.Replace("{shipmentId}", request.UriParameters.ShipmentId.ToString());

			if(request.UriParameters.SequenceId == null)
				throw new InvalidOperationException("Uri Parameter SequenceId cannot be null");

            url = url.Replace("{sequenceId}", request.UriParameters.SequenceId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentImageGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentItemGetResponse> Get(Models.ShipmentItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{shipmentId}/ShipmentItems/{shipmentItemSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentId cannot be null");

            url = url.Replace("{shipmentId}", request.UriParameters.ShipmentId.ToString());

			if(request.UriParameters.ShipmentItemSeqId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentItemSeqId cannot be null");

            url = url.Replace("{shipmentItemSeqId}", request.UriParameters.ShipmentItemSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentReceipt
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentReceipt(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentReceiptGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentReceiptGetResponse> Get(Models.ShipmentReceiptGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{shipmentId}/ShipmentReceipts/{receiptSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentId cannot be null");

            url = url.Replace("{shipmentId}", request.UriParameters.ShipmentId.ToString());

			if(request.UriParameters.ReceiptSeqId == null)
				throw new InvalidOperationException("Uri Parameter ReceiptSeqId cannot be null");

            url = url.Replace("{receiptSeqId}", request.UriParameters.ReceiptSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentReceiptGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentReceiptImage
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentReceiptImage(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentReceiptImageGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentReceiptImageGetResponse> Get(Models.ShipmentReceiptImageGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{shipmentId}/ShipmentReceipts/{shipmentReceiptReceiptSeqId}/ShipmentReceiptImages/{sequenceId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentId cannot be null");

            url = url.Replace("{shipmentId}", request.UriParameters.ShipmentId.ToString());

			if(request.UriParameters.ShipmentReceiptReceiptSeqId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentReceiptReceiptSeqId cannot be null");

            url = url.Replace("{shipmentReceiptReceiptSeqId}", request.UriParameters.ShipmentReceiptReceiptSeqId.ToString());

			if(request.UriParameters.SequenceId == null)
				throw new InvalidOperationException("Uri Parameter SequenceId cannot be null");

            url = url.Replace("{sequenceId}", request.UriParameters.SequenceId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentReceiptImageGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ItemIssuance
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ItemIssuance(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ItemIssuanceGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ItemIssuanceGetResponse> Get(Models.ItemIssuanceGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Shipments/{shipmentId}/ItemIssuances/{itemIssuanceSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentId cannot be null");

            url = url.Replace("{shipmentId}", request.UriParameters.ShipmentId.ToString());

			if(request.UriParameters.ItemIssuanceSeqId == null)
				throw new InvalidOperationException("Uri Parameter ItemIssuanceSeqId cannot be null");

            url = url.Replace("{itemIssuanceSeqId}", request.UriParameters.ItemIssuanceSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ItemIssuanceGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentMethodType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentMethodType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentMethodTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentMethodTypeGetResponse> Get(Models.ShipmentMethodTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentMethodTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentMethodTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentMethodTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentMethodTypePutRequest request)
        {

            var url = "ShipmentMethodTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentMethodTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentMethodTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentMethodTypePatchRequest request)
        {

            var url = "ShipmentMethodTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentMethodTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentMethodTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentMethodTypeDeleteRequest request)
        {

            var url = "ShipmentMethodTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentMethodTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentMethodTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentMethodTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentMethodTypesGetResponse> Get(Models.ShipmentMethodTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentMethodTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentMethodTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentMethodTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentMethodTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentMethodTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentMethodTypesCountGetRequest request)
        {

            var url = "ShipmentMethodTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentMethodTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentMethodTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentMethodTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentMethodTypeStateEventGetResponse> Get(Models.ShipmentMethodTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentMethodTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentMethodTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentMethodTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentMethodTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentMethodTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentMethodTypeHistoryStateGetResponse> Get(Models.ShipmentMethodTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentMethodTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentMethodTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackage
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackage(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackageGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentPackageGetResponse> Get(Models.ShipmentPackageGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentPackages/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentPackageGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPackagePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentPackagePutRequest request)
        {

            var url = "ShipmentPackages/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentPackageDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPackagePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentPackagePatchRequest request)
        {

            var url = "ShipmentPackages/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentPackageDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentPackageDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentPackageDeleteRequest request)
        {

            var url = "ShipmentPackages/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackages
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackages(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackagesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentPackagesGetResponse> Get(Models.ShipmentPackagesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentPackages";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentPackagesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackagesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackagesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackagesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentPackagesCountGetRequest request)
        {

            var url = "ShipmentPackages/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackageStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackageStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackageStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentPackageStateEventGetResponse> Get(Models.ShipmentPackageStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentPackages/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentPackageStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackageHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackageHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackageHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentPackageHistoryStateGetResponse> Get(Models.ShipmentPackageHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentPackages/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentPackageHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentPackageContent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentPackageContent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentPackageContentGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentPackageContentGetResponse> Get(Models.ShipmentPackageContentGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentPackages/{shipmentPackageId}/ShipmentPackageContents/{shipmentItemSeqId}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.ShipmentPackageId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentPackageId cannot be null");

            url = url.Replace("{shipmentPackageId}", request.UriParameters.ShipmentPackageId.ToString());

			if(request.UriParameters.ShipmentItemSeqId == null)
				throw new InvalidOperationException("Uri Parameter ShipmentItemSeqId cannot be null");

            url = url.Replace("{shipmentItemSeqId}", request.UriParameters.ShipmentItemSeqId.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentPackageContentGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeGetResponse> Get(Models.ShipmentTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.ShipmentTypePutRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateShipmentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.ShipmentTypePatchRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchShipmentTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.ShipmentTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.ShipmentTypeDeleteRequest request)
        {

            var url = "ShipmentTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypesGetResponse> Get(Models.ShipmentTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.ShipmentTypesCountGetRequest request)
        {

            var url = "ShipmentTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeStateEventGetResponse> Get(Models.ShipmentTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class ShipmentTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal ShipmentTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.ShipmentTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.ShipmentTypeHistoryStateGetResponse> Get(Models.ShipmentTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "ShipmentTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.ShipmentTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItem
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItem(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemGetResponse> Get(Models.StatusItemGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.StatusItemPutRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateStatusItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.StatusItemPatchRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchStatusItemDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.StatusItemDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.StatusItemDeleteRequest request)
        {

            var url = "StatusItems/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItems
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItems(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemsGetResponse> Get(Models.StatusItemsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.StatusItemsCountGetRequest request)
        {

            var url = "StatusItems/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemStateEventGetResponse> Get(Models.StatusItemStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class StatusItemHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal StatusItemHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.StatusItemHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.StatusItemHistoryStateGetResponse> Get(Models.StatusItemHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "StatusItems/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.StatusItemHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProduct
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProduct(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductGetResponse> Get(Models.SupplierProductGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.SupplierProductPutRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateSupplierProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.SupplierProductPatchRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchSupplierProductDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.SupplierProductDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.SupplierProductDeleteRequest request)
        {

            var url = "SupplierProducts/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProducts
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProducts(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductsGetResponse> Get(Models.SupplierProductsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.SupplierProductsCountGetRequest request)
        {

            var url = "SupplierProducts/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductStateEventGetResponse> Get(Models.SupplierProductStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class SupplierProductHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal SupplierProductHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.SupplierProductHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.SupplierProductHistoryStateGetResponse> Get(Models.SupplierProductHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "SupplierProducts/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.SupplierProductHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Uom
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Uom(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomGetResponse> Get(Models.UomGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Uoms/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.UomPutRequest request)
        {

            var url = "Uoms/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateUomDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.UomPatchRequest request)
        {

            var url = "Uoms/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchUomDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.UomDeleteRequest request)
        {

            var url = "Uoms/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Uoms
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Uoms(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomsGetResponse> Get(Models.UomsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Uoms";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.UomsCountGetRequest request)
        {

            var url = "Uoms/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomStateEventGetResponse> Get(Models.UomStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Uoms/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomHistoryStateGetResponse> Get(Models.UomHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Uoms/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomConversion
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomConversion(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomConversionGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomConversionGetResponse> Get(Models.UomConversionGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomConversions/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomConversionGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomConversionPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.UomConversionPutRequest request)
        {

            var url = "UomConversions/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateUomConversionDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomConversionPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.UomConversionPatchRequest request)
        {

            var url = "UomConversions/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchUomConversionDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomConversionDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.UomConversionDeleteRequest request)
        {

            var url = "UomConversions/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomConversions
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomConversions(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomConversionsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomConversionsGetResponse> Get(Models.UomConversionsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomConversions";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomConversionsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomConversionsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomConversionsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomConversionsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.UomConversionsCountGetRequest request)
        {

            var url = "UomConversions/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomConversionStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomConversionStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomConversionStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomConversionStateEventGetResponse> Get(Models.UomConversionStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomConversions/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomConversionStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomConversionHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomConversionHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomConversionHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomConversionHistoryStateGetResponse> Get(Models.UomConversionHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomConversions/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomConversionHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomType
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomType(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomTypeGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomTypeGetResponse> Get(Models.UomTypeGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomTypeGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomTypePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.UomTypePutRequest request)
        {

            var url = "UomTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateUomTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomTypePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.UomTypePatchRequest request)
        {

            var url = "UomTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchUomTypeDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.UomTypeDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.UomTypeDeleteRequest request)
        {

            var url = "UomTypes/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomTypes
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomTypes(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomTypesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomTypesGetResponse> Get(Models.UomTypesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomTypes";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomTypesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomTypesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomTypesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomTypesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.UomTypesCountGetRequest request)
        {

            var url = "UomTypes/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomTypeStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomTypeStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomTypeStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomTypeStateEventGetResponse> Get(Models.UomTypeStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomTypes/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomTypeStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class UomTypeHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal UomTypeHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.UomTypeHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.UomTypeHistoryStateGetResponse> Get(Models.UomTypeHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "UomTypes/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.UomTypeHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouse
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouse(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseGetResponse> Get(Models.WarehouseGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.WarehousePutRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehousePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.WarehousePatchRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchWarehouseDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.WarehouseDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.WarehouseDeleteRequest request)
        {

            var url = "Warehouses/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class Warehouses
    {
        private readonly DddmlWmsRamlClient proxy;

        internal Warehouses(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehousesGetResponse> Get(Models.WarehousesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehousesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehousesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehousesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehousesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.WarehousesCountGetRequest request)
        {

            var url = "Warehouses/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseStateEventGetResponse> Get(Models.WarehouseStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class WarehouseHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal WarehouseHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.WarehouseHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.WarehouseHistoryStateGetResponse> Get(Models.WarehouseHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "Warehouses/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.WarehouseHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstance
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstance(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceGetResponse> Get(Models.AttributeSetInstanceGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstancePutRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancePatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstancePatchRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceDeleteRequest request)
        {

            var url = "AttributeSetInstances/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstances
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstances(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstancesGetResponse> Get(Models.AttributeSetInstancesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstancesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstancesPostRequest</param>
        public virtual async Task<ApiResponse> Post(Models.AttributeSetInstancesPostRequest request)
        {

            var url = "AttributeSetInstances";

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Post, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstancesCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstancesCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstancesCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstancesCountGetRequest request)
        {

            var url = "AttributeSetInstances/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceStateEventGetResponse> Get(Models.AttributeSetInstanceStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceHistoryStateGetResponse> Get(Models.AttributeSetInstanceHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstances/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionField
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionField(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFields
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFields(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldsGetResponse> Get(Models.AttributeSetInstanceExtensionFieldsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFields";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldsCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFields/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFields/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroup
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroup(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPutRequest</param>
        public virtual async Task<ApiResponse> Put(Models.AttributeSetInstanceExtensionFieldGroupPutRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Put, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(CreateAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupPatchRequest</param>
        public virtual async Task<ApiResponse> Patch(Models.AttributeSetInstanceExtensionFieldGroupPatchRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(new HttpMethod("PATCH"), url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
            if(request.Formatter == null)
                request.Formatter = proxy.GetJsonMediaTypeFormatter();
            req.Content = new ObjectContent(typeof(MergePatchAttributeSetInstanceExtensionFieldGroupDto), request.Content , request.Formatter);                           
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }


        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest</param>
        public virtual async Task<ApiResponse> Delete(Models.AttributeSetInstanceExtensionFieldGroupDeleteRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.CommandId != null)
                    url += "&commandId=" + request.Query.CommandId;
                if(request.Query.Version != null)
                    url += "&version=" + request.Query.Version;
                if(request.Query.RequesterId != null)
                    url += "&requesterId=" + request.Query.RequesterId;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Delete, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroups
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroups(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupsGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupsGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupsCount
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupsCount(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest</param>
        public virtual async Task<ApiResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupsCountGetRequest request)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/_count";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
            return new ApiResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupStateEvent
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupStateEvent(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupStateEventGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupStateEventGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryState
    {
        private readonly DddmlWmsRamlClient proxy;

        internal AttributeSetInstanceExtensionFieldGroupHistoryState(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse> Get(Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}";
			if(request.UriParameters == null)
				throw new InvalidOperationException("Uri Parameters cannot be null");               

			if(request.UriParameters.Id == null)
				throw new InvalidOperationException("Uri Parameter Id cannot be null");

            url = url.Replace("{id}", request.UriParameters.Id.ToString());

			if(request.UriParameters.Version == null)
				throw new InvalidOperationException("Uri Parameter Version cannot be null");

            url = url.Replace("{version}", request.UriParameters.Version.ToString());

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class LocatorTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal LocatorTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.LocatorTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.LocatorTreesGetResponse> Get(Models.LocatorTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "LocatorTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.LocatorTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    public partial class OrganizationTrees
    {
        private readonly DddmlWmsRamlClient proxy;

        internal OrganizationTrees(DddmlWmsRamlClient proxy)
        {
            this.proxy = proxy;
        }

        		/// <param name="request">Models.OrganizationTreesGetRequest</param>
		/// <param name="responseFormatters">response formatters</param>
        public virtual async Task<Models.OrganizationTreesGetResponse> Get(Models.OrganizationTreesGetRequest request, IEnumerable<MediaTypeFormatter> responseFormatters = null)
        {

            var url = "OrganizationTrees";
            if(request.Query != null)
            {
                url += "?";
                if(request.Query.ParentId != null)
                    url += "&parentId=" + request.Query.ParentId;
                if(request.Query.FirstResult != null)
                    url += "&firstResult=" + request.Query.FirstResult;
                if(request.Query.MaxResults != null)
                    url += "&maxResults=" + request.Query.MaxResults;
                if(request.Query.Sort != null)
                    url += "&sort=" + request.Query.Sort;
                if(request.Query.Fields != null)
                    url += "&fields=" + request.Query.Fields;
                if(request.Query.Filter != null)
                    url += "&filter=" + request.Query.Filter;
                if(request.Query.FilterTag != null)
                    url += "&filterTag=" + request.Query.FilterTag;
            }

            url = url.Replace("?&", "?");

            var req = new HttpRequestMessage(HttpMethod.Get, url);
            proxy.SetAuthenticationHeader(req);

            if(request.RawHeaders != null)
            {
                foreach(var header in request.RawHeaders)
                {
                    req.Headers.TryAddWithoutValidation(header.Key, string.Join(",", header.Value));
                }
            }
	        var response = await proxy.Client.SendAsync(req);
			if (proxy.SchemaValidation.Enabled && proxy.SchemaValidation.RaiseExceptions)
            {
				if(proxy.SchemaValidation.RaiseExceptions)
				{
					;
				}
				
            }
            return new Models.OrganizationTreesGetResponse  
                                            {
                                                RawContent = response.Content,
                                                RawHeaders = response.Headers,
	                                            Formatters = responseFormatters,
                                                StatusCode = response.StatusCode,
                                                ReasonPhrase = response.ReasonPhrase,
												SchemaValidation = new Lazy<SchemaValidationResults>(() => new SchemaValidationResults(true), true)
                                            };
        }

    }

    /// <summary>
    /// Main class for grouping root resources. Nested resources are defined as properties. The constructor can optionally receive an URL and HttpClient instance to override the default ones.
    /// </summary>
    public partial class DddmlWmsRamlClient
    {

        //public const string BaseUri = "/api/";

		public SchemaValidationSettings SchemaValidation { get; private set; } 

        protected readonly HttpClient client;

        internal HttpClient Client { get { return client; } }

        public Func<Tuple<string, string>> GetAuthenticationHeaderValue { get; set; }


        public DddmlWmsRamlClient(string endpointUrl)
        {
			if(string.IsNullOrWhiteSpace(endpointUrl))
                throw new ArgumentException("You must specify the endpoint URL", "endpointUrl");

			if (endpointUrl.Contains("{"))
			{
				var regex = new Regex(@"\{([^\}]+)\}");
				var matches = regex.Matches(endpointUrl);
				var parameters = new List<string>();
				foreach (Match match in matches)
				{
					parameters.Add(match.Groups[1].Value);
				}
				throw new InvalidOperationException("Please replace parameter/s " + string.Join(", ", parameters) + " in the URL before passing it to the constructor ");
			}

            client = new HttpClient {BaseAddress = new Uri(endpointUrl)};

            InitSchemaValidation();
        }

        public DddmlWmsRamlClient(HttpClient httpClient)
        {
            if(httpClient.BaseAddress == null)
                throw new InvalidOperationException("You must set the BaseAddress property of the HttpClient instance");

            client = httpClient;

            InitSchemaValidation();
        }

        private void InitSchemaValidation()
        {
            SchemaValidation = new SchemaValidationSettings
            {
                Enabled = true,
                RaiseExceptions = true
            };
        }

        public void SetAuthenticationHeader(HttpRequestMessage req)
        {
            if (this.GetAuthenticationHeaderValue != null)
            {
                var authHeader = this.GetAuthenticationHeaderValue();
                if (authHeader != null)
                {
                    req.Headers.Authorization = new AuthenticationHeaderValue(authHeader.Item1, authHeader.Item2);
                }
            }
        }

        public JsonMediaTypeFormatter GetJsonMediaTypeFormatter()
        {
            var formatter = new JsonMediaTypeFormatter();
            formatter.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;
            formatter.SerializerSettings.Formatting = Formatting.None;
            formatter.SerializerSettings.DateFormatHandling = DateFormatHandling.IsoDateFormat;
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.LongConverter());
            formatter.SerializerSettings.Converters.Add(new Dddml.Wms.HttpServices.JsonConverters.DecimalConverter());
            formatter.SerializerSettings.ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver();
            return formatter;
        }


        public virtual Attribute Attribute
        {
            get { return new Attribute(this); }
        }
                

        public virtual AttributeSet AttributeSet
        {
            get { return new AttributeSet(this); }
        }
                

        public virtual ContactMech ContactMech
        {
            get { return new ContactMech(this); }
        }
                

        public virtual DamageHandlingMethod DamageHandlingMethod
        {
            get { return new DamageHandlingMethod(this); }
        }
                

        public virtual DamageReason DamageReason
        {
            get { return new DamageReason(this); }
        }
                

        public virtual DamageType DamageType
        {
            get { return new DamageType(this); }
        }
                

        public virtual DocumentType DocumentType
        {
            get { return new DocumentType(this); }
        }
                

        public virtual Facility Facility
        {
            get { return new Facility(this); }
        }
                

        public virtual GoodIdentificationType GoodIdentificationType
        {
            get { return new GoodIdentificationType(this); }
        }
                

        public virtual InOut InOut
        {
            get { return new InOut(this); }
        }
                

        public virtual InventoryItem InventoryItem
        {
            get { return new InventoryItem(this); }
        }
                

        public virtual InventoryItemRequirement InventoryItemRequirement
        {
            get { return new InventoryItemRequirement(this); }
        }
                

        public virtual InventoryPostingRule InventoryPostingRule
        {
            get { return new InventoryPostingRule(this); }
        }
                

        public virtual InventoryPRTriggered InventoryPRTriggered
        {
            get { return new InventoryPRTriggered(this); }
        }
                

        public virtual Locator Locator
        {
            get { return new Locator(this); }
        }
                

        public virtual LocatorType LocatorType
        {
            get { return new LocatorType(this); }
        }
                

        public virtual Lot Lot
        {
            get { return new Lot(this); }
        }
                

        public virtual Movement Movement
        {
            get { return new Movement(this); }
        }
                

        public virtual MovementConfirmation MovementConfirmation
        {
            get { return new MovementConfirmation(this); }
        }
                

        public virtual MovementType MovementType
        {
            get { return new MovementType(this); }
        }
                

        public virtual Order Order
        {
            get { return new Order(this); }
        }
                

        public virtual OrderItemShipGrpInvReservation OrderItemShipGrpInvReservation
        {
            get { return new OrderItemShipGrpInvReservation(this); }
        }
                

        public virtual OrderShipment OrderShipment
        {
            get { return new OrderShipment(this); }
        }
                

        public virtual OrganizationStructure OrganizationStructure
        {
            get { return new OrganizationStructure(this); }
        }
                

        public virtual OrganizationStructureType OrganizationStructureType
        {
            get { return new OrganizationStructureType(this); }
        }
                

        public virtual Party Party
        {
            get { return new Party(this); }
        }
                

        public virtual PartyRole PartyRole
        {
            get { return new PartyRole(this); }
        }
                

        public virtual PhysicalInventory PhysicalInventory
        {
            get { return new PhysicalInventory(this); }
        }
                

        public virtual Picklist Picklist
        {
            get { return new Picklist(this); }
        }
                

        public virtual PicklistBin PicklistBin
        {
            get { return new PicklistBin(this); }
        }
                

        public virtual Pickwave Pickwave
        {
            get { return new Pickwave(this); }
        }
                

        public virtual Product Product
        {
            get { return new Product(this); }
        }
                

        public virtual ProductCategory ProductCategory
        {
            get { return new ProductCategory(this); }
        }
                

        public virtual ProductCategoryMember ProductCategoryMember
        {
            get { return new ProductCategoryMember(this); }
        }
                

        public virtual RejectionReason RejectionReason
        {
            get { return new RejectionReason(this); }
        }
                

        public virtual RoleType RoleType
        {
            get { return new RoleType(this); }
        }
                

        public virtual SellableInventoryItem SellableInventoryItem
        {
            get { return new SellableInventoryItem(this); }
        }
                

        public virtual Shipment Shipment
        {
            get { return new Shipment(this); }
        }
                

        public virtual ShipmentMethodType ShipmentMethodType
        {
            get { return new ShipmentMethodType(this); }
        }
                

        public virtual ShipmentPackage ShipmentPackage
        {
            get { return new ShipmentPackage(this); }
        }
                

        public virtual ShipmentType ShipmentType
        {
            get { return new ShipmentType(this); }
        }
                

        public virtual StatusItem StatusItem
        {
            get { return new StatusItem(this); }
        }
                

        public virtual SupplierProduct SupplierProduct
        {
            get { return new SupplierProduct(this); }
        }
                

        public virtual Uom Uom
        {
            get { return new Uom(this); }
        }
                

        public virtual UomConversion UomConversion
        {
            get { return new UomConversion(this); }
        }
                

        public virtual UomType UomType
        {
            get { return new UomType(this); }
        }
                

        public virtual Warehouse Warehouse
        {
            get { return new Warehouse(this); }
        }
                

        public virtual AttributeSetInstance AttributeSetInstance
        {
            get { return new AttributeSetInstance(this); }
        }
                

        public virtual AttributeSetInstanceExtensionField AttributeSetInstanceExtensionField
        {
            get { return new AttributeSetInstanceExtensionField(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroup AttributeSetInstanceExtensionFieldGroup
        {
            get { return new AttributeSetInstanceExtensionFieldGroup(this); }
        }
                

        public virtual Attributes Attributes
        {
            get { return new Attributes(this); }
        }
                

        public virtual AttributeSets AttributeSets
        {
            get { return new AttributeSets(this); }
        }
                

        public virtual ContactMeches ContactMeches
        {
            get { return new ContactMeches(this); }
        }
                

        public virtual DamageHandlingMethods DamageHandlingMethods
        {
            get { return new DamageHandlingMethods(this); }
        }
                

        public virtual DamageReasons DamageReasons
        {
            get { return new DamageReasons(this); }
        }
                

        public virtual DamageTypes DamageTypes
        {
            get { return new DamageTypes(this); }
        }
                

        public virtual DocumentTypes DocumentTypes
        {
            get { return new DocumentTypes(this); }
        }
                

        public virtual Facilities Facilities
        {
            get { return new Facilities(this); }
        }
                

        public virtual GoodIdentificationTypes GoodIdentificationTypes
        {
            get { return new GoodIdentificationTypes(this); }
        }
                

        public virtual InOuts InOuts
        {
            get { return new InOuts(this); }
        }
                

        public virtual InventoryItems InventoryItems
        {
            get { return new InventoryItems(this); }
        }
                

        public virtual InventoryItemRequirements InventoryItemRequirements
        {
            get { return new InventoryItemRequirements(this); }
        }
                

        public virtual InventoryPostingRules InventoryPostingRules
        {
            get { return new InventoryPostingRules(this); }
        }
                

        public virtual InventoryPRTriggereds InventoryPRTriggereds
        {
            get { return new InventoryPRTriggereds(this); }
        }
                

        public virtual Locators Locators
        {
            get { return new Locators(this); }
        }
                

        public virtual LocatorTypes LocatorTypes
        {
            get { return new LocatorTypes(this); }
        }
                

        public virtual Lots Lots
        {
            get { return new Lots(this); }
        }
                

        public virtual Movements Movements
        {
            get { return new Movements(this); }
        }
                

        public virtual MovementConfirmations MovementConfirmations
        {
            get { return new MovementConfirmations(this); }
        }
                

        public virtual MovementTypes MovementTypes
        {
            get { return new MovementTypes(this); }
        }
                

        public virtual Orders Orders
        {
            get { return new Orders(this); }
        }
                

        public virtual OrderItemShipGrpInvReservations OrderItemShipGrpInvReservations
        {
            get { return new OrderItemShipGrpInvReservations(this); }
        }
                

        public virtual OrderShipments OrderShipments
        {
            get { return new OrderShipments(this); }
        }
                

        public virtual OrganizationStructures OrganizationStructures
        {
            get { return new OrganizationStructures(this); }
        }
                

        public virtual OrganizationStructureTypes OrganizationStructureTypes
        {
            get { return new OrganizationStructureTypes(this); }
        }
                

        public virtual Parties Parties
        {
            get { return new Parties(this); }
        }
                

        public virtual PartyRoles PartyRoles
        {
            get { return new PartyRoles(this); }
        }
                

        public virtual PhysicalInventories PhysicalInventories
        {
            get { return new PhysicalInventories(this); }
        }
                

        public virtual Picklists Picklists
        {
            get { return new Picklists(this); }
        }
                

        public virtual PicklistBins PicklistBins
        {
            get { return new PicklistBins(this); }
        }
                

        public virtual Pickwaves Pickwaves
        {
            get { return new Pickwaves(this); }
        }
                

        public virtual Products Products
        {
            get { return new Products(this); }
        }
                

        public virtual ProductCategories ProductCategories
        {
            get { return new ProductCategories(this); }
        }
                

        public virtual ProductCategoryMembers ProductCategoryMembers
        {
            get { return new ProductCategoryMembers(this); }
        }
                

        public virtual RejectionReasons RejectionReasons
        {
            get { return new RejectionReasons(this); }
        }
                

        public virtual RoleTypes RoleTypes
        {
            get { return new RoleTypes(this); }
        }
                

        public virtual SellableInventoryItems SellableInventoryItems
        {
            get { return new SellableInventoryItems(this); }
        }
                

        public virtual Shipments Shipments
        {
            get { return new Shipments(this); }
        }
                

        public virtual ShipmentMethodTypes ShipmentMethodTypes
        {
            get { return new ShipmentMethodTypes(this); }
        }
                

        public virtual ShipmentPackages ShipmentPackages
        {
            get { return new ShipmentPackages(this); }
        }
                

        public virtual ShipmentTypes ShipmentTypes
        {
            get { return new ShipmentTypes(this); }
        }
                

        public virtual StatusItems StatusItems
        {
            get { return new StatusItems(this); }
        }
                

        public virtual SupplierProducts SupplierProducts
        {
            get { return new SupplierProducts(this); }
        }
                

        public virtual Uoms Uoms
        {
            get { return new Uoms(this); }
        }
                

        public virtual UomConversions UomConversions
        {
            get { return new UomConversions(this); }
        }
                

        public virtual UomTypes UomTypes
        {
            get { return new UomTypes(this); }
        }
                

        public virtual Warehouses Warehouses
        {
            get { return new Warehouses(this); }
        }
                

        public virtual AttributeSetInstances AttributeSetInstances
        {
            get { return new AttributeSetInstances(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFields AttributeSetInstanceExtensionFields
        {
            get { return new AttributeSetInstanceExtensionFields(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroups AttributeSetInstanceExtensionFieldGroups
        {
            get { return new AttributeSetInstanceExtensionFieldGroups(this); }
        }
                

        public virtual AttributesCount AttributesCount
        {
            get { return new AttributesCount(this); }
        }
                

        public virtual AttributeSetsCount AttributeSetsCount
        {
            get { return new AttributeSetsCount(this); }
        }
                

        public virtual ContactMechesCount ContactMechesCount
        {
            get { return new ContactMechesCount(this); }
        }
                

        public virtual DamageHandlingMethodsCount DamageHandlingMethodsCount
        {
            get { return new DamageHandlingMethodsCount(this); }
        }
                

        public virtual DamageReasonsCount DamageReasonsCount
        {
            get { return new DamageReasonsCount(this); }
        }
                

        public virtual DamageTypesCount DamageTypesCount
        {
            get { return new DamageTypesCount(this); }
        }
                

        public virtual DocumentTypesCount DocumentTypesCount
        {
            get { return new DocumentTypesCount(this); }
        }
                

        public virtual FacilitiesCount FacilitiesCount
        {
            get { return new FacilitiesCount(this); }
        }
                

        public virtual GoodIdentificationTypesCount GoodIdentificationTypesCount
        {
            get { return new GoodIdentificationTypesCount(this); }
        }
                

        public virtual InOutsCount InOutsCount
        {
            get { return new InOutsCount(this); }
        }
                

        public virtual InventoryItemsCount InventoryItemsCount
        {
            get { return new InventoryItemsCount(this); }
        }
                

        public virtual InventoryItemRequirementsCount InventoryItemRequirementsCount
        {
            get { return new InventoryItemRequirementsCount(this); }
        }
                

        public virtual InventoryPostingRulesCount InventoryPostingRulesCount
        {
            get { return new InventoryPostingRulesCount(this); }
        }
                

        public virtual InventoryPRTriggeredsCount InventoryPRTriggeredsCount
        {
            get { return new InventoryPRTriggeredsCount(this); }
        }
                

        public virtual LocatorsCount LocatorsCount
        {
            get { return new LocatorsCount(this); }
        }
                

        public virtual LocatorTypesCount LocatorTypesCount
        {
            get { return new LocatorTypesCount(this); }
        }
                

        public virtual LotsCount LotsCount
        {
            get { return new LotsCount(this); }
        }
                

        public virtual MovementsCount MovementsCount
        {
            get { return new MovementsCount(this); }
        }
                

        public virtual MovementConfirmationsCount MovementConfirmationsCount
        {
            get { return new MovementConfirmationsCount(this); }
        }
                

        public virtual MovementTypesCount MovementTypesCount
        {
            get { return new MovementTypesCount(this); }
        }
                

        public virtual OrdersCount OrdersCount
        {
            get { return new OrdersCount(this); }
        }
                

        public virtual OrderItemShipGrpInvReservationsCount OrderItemShipGrpInvReservationsCount
        {
            get { return new OrderItemShipGrpInvReservationsCount(this); }
        }
                

        public virtual OrderShipmentsCount OrderShipmentsCount
        {
            get { return new OrderShipmentsCount(this); }
        }
                

        public virtual OrganizationStructuresCount OrganizationStructuresCount
        {
            get { return new OrganizationStructuresCount(this); }
        }
                

        public virtual OrganizationStructureTypesCount OrganizationStructureTypesCount
        {
            get { return new OrganizationStructureTypesCount(this); }
        }
                

        public virtual PartiesCount PartiesCount
        {
            get { return new PartiesCount(this); }
        }
                

        public virtual PartyRolesCount PartyRolesCount
        {
            get { return new PartyRolesCount(this); }
        }
                

        public virtual PhysicalInventoriesCount PhysicalInventoriesCount
        {
            get { return new PhysicalInventoriesCount(this); }
        }
                

        public virtual PicklistsCount PicklistsCount
        {
            get { return new PicklistsCount(this); }
        }
                

        public virtual PicklistBinsCount PicklistBinsCount
        {
            get { return new PicklistBinsCount(this); }
        }
                

        public virtual PickwavesCount PickwavesCount
        {
            get { return new PickwavesCount(this); }
        }
                

        public virtual ProductsCount ProductsCount
        {
            get { return new ProductsCount(this); }
        }
                

        public virtual ProductCategoriesCount ProductCategoriesCount
        {
            get { return new ProductCategoriesCount(this); }
        }
                

        public virtual ProductCategoryMembersCount ProductCategoryMembersCount
        {
            get { return new ProductCategoryMembersCount(this); }
        }
                

        public virtual RejectionReasonsCount RejectionReasonsCount
        {
            get { return new RejectionReasonsCount(this); }
        }
                

        public virtual RoleTypesCount RoleTypesCount
        {
            get { return new RoleTypesCount(this); }
        }
                

        public virtual SellableInventoryItemsCount SellableInventoryItemsCount
        {
            get { return new SellableInventoryItemsCount(this); }
        }
                

        public virtual ShipmentsCount ShipmentsCount
        {
            get { return new ShipmentsCount(this); }
        }
                

        public virtual ShipmentMethodTypesCount ShipmentMethodTypesCount
        {
            get { return new ShipmentMethodTypesCount(this); }
        }
                

        public virtual ShipmentPackagesCount ShipmentPackagesCount
        {
            get { return new ShipmentPackagesCount(this); }
        }
                

        public virtual ShipmentTypesCount ShipmentTypesCount
        {
            get { return new ShipmentTypesCount(this); }
        }
                

        public virtual StatusItemsCount StatusItemsCount
        {
            get { return new StatusItemsCount(this); }
        }
                

        public virtual SupplierProductsCount SupplierProductsCount
        {
            get { return new SupplierProductsCount(this); }
        }
                

        public virtual UomsCount UomsCount
        {
            get { return new UomsCount(this); }
        }
                

        public virtual UomConversionsCount UomConversionsCount
        {
            get { return new UomConversionsCount(this); }
        }
                

        public virtual UomTypesCount UomTypesCount
        {
            get { return new UomTypesCount(this); }
        }
                

        public virtual WarehousesCount WarehousesCount
        {
            get { return new WarehousesCount(this); }
        }
                

        public virtual AttributeSetInstancesCount AttributeSetInstancesCount
        {
            get { return new AttributeSetInstancesCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldsCount AttributeSetInstanceExtensionFieldsCount
        {
            get { return new AttributeSetInstanceExtensionFieldsCount(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupsCount AttributeSetInstanceExtensionFieldGroupsCount
        {
            get { return new AttributeSetInstanceExtensionFieldGroupsCount(this); }
        }
                

        public virtual AttributeStateEvent AttributeStateEvent
        {
            get { return new AttributeStateEvent(this); }
        }
                

        public virtual AttributeSetStateEvent AttributeSetStateEvent
        {
            get { return new AttributeSetStateEvent(this); }
        }
                

        public virtual ContactMechStateEvent ContactMechStateEvent
        {
            get { return new ContactMechStateEvent(this); }
        }
                

        public virtual DamageHandlingMethodStateEvent DamageHandlingMethodStateEvent
        {
            get { return new DamageHandlingMethodStateEvent(this); }
        }
                

        public virtual DamageReasonStateEvent DamageReasonStateEvent
        {
            get { return new DamageReasonStateEvent(this); }
        }
                

        public virtual DamageTypeStateEvent DamageTypeStateEvent
        {
            get { return new DamageTypeStateEvent(this); }
        }
                

        public virtual DocumentTypeStateEvent DocumentTypeStateEvent
        {
            get { return new DocumentTypeStateEvent(this); }
        }
                

        public virtual FacilityStateEvent FacilityStateEvent
        {
            get { return new FacilityStateEvent(this); }
        }
                

        public virtual GoodIdentificationTypeStateEvent GoodIdentificationTypeStateEvent
        {
            get { return new GoodIdentificationTypeStateEvent(this); }
        }
                

        public virtual InOutStateEvent InOutStateEvent
        {
            get { return new InOutStateEvent(this); }
        }
                

        public virtual InventoryItemStateEvent InventoryItemStateEvent
        {
            get { return new InventoryItemStateEvent(this); }
        }
                

        public virtual InventoryItemRequirementStateEvent InventoryItemRequirementStateEvent
        {
            get { return new InventoryItemRequirementStateEvent(this); }
        }
                

        public virtual InventoryPostingRuleStateEvent InventoryPostingRuleStateEvent
        {
            get { return new InventoryPostingRuleStateEvent(this); }
        }
                

        public virtual InventoryPRTriggeredStateEvent InventoryPRTriggeredStateEvent
        {
            get { return new InventoryPRTriggeredStateEvent(this); }
        }
                

        public virtual LocatorStateEvent LocatorStateEvent
        {
            get { return new LocatorStateEvent(this); }
        }
                

        public virtual LocatorTypeStateEvent LocatorTypeStateEvent
        {
            get { return new LocatorTypeStateEvent(this); }
        }
                

        public virtual LotStateEvent LotStateEvent
        {
            get { return new LotStateEvent(this); }
        }
                

        public virtual MovementStateEvent MovementStateEvent
        {
            get { return new MovementStateEvent(this); }
        }
                

        public virtual MovementConfirmationStateEvent MovementConfirmationStateEvent
        {
            get { return new MovementConfirmationStateEvent(this); }
        }
                

        public virtual MovementTypeStateEvent MovementTypeStateEvent
        {
            get { return new MovementTypeStateEvent(this); }
        }
                

        public virtual OrderStateEvent OrderStateEvent
        {
            get { return new OrderStateEvent(this); }
        }
                

        public virtual OrderItemShipGrpInvReservationStateEvent OrderItemShipGrpInvReservationStateEvent
        {
            get { return new OrderItemShipGrpInvReservationStateEvent(this); }
        }
                

        public virtual OrderShipmentStateEvent OrderShipmentStateEvent
        {
            get { return new OrderShipmentStateEvent(this); }
        }
                

        public virtual OrganizationStructureStateEvent OrganizationStructureStateEvent
        {
            get { return new OrganizationStructureStateEvent(this); }
        }
                

        public virtual OrganizationStructureTypeStateEvent OrganizationStructureTypeStateEvent
        {
            get { return new OrganizationStructureTypeStateEvent(this); }
        }
                

        public virtual PartyStateEvent PartyStateEvent
        {
            get { return new PartyStateEvent(this); }
        }
                

        public virtual PartyRoleStateEvent PartyRoleStateEvent
        {
            get { return new PartyRoleStateEvent(this); }
        }
                

        public virtual PhysicalInventoryStateEvent PhysicalInventoryStateEvent
        {
            get { return new PhysicalInventoryStateEvent(this); }
        }
                

        public virtual PicklistStateEvent PicklistStateEvent
        {
            get { return new PicklistStateEvent(this); }
        }
                

        public virtual PicklistBinStateEvent PicklistBinStateEvent
        {
            get { return new PicklistBinStateEvent(this); }
        }
                

        public virtual PickwaveStateEvent PickwaveStateEvent
        {
            get { return new PickwaveStateEvent(this); }
        }
                

        public virtual ProductStateEvent ProductStateEvent
        {
            get { return new ProductStateEvent(this); }
        }
                

        public virtual ProductCategoryStateEvent ProductCategoryStateEvent
        {
            get { return new ProductCategoryStateEvent(this); }
        }
                

        public virtual ProductCategoryMemberStateEvent ProductCategoryMemberStateEvent
        {
            get { return new ProductCategoryMemberStateEvent(this); }
        }
                

        public virtual RejectionReasonStateEvent RejectionReasonStateEvent
        {
            get { return new RejectionReasonStateEvent(this); }
        }
                

        public virtual RoleTypeStateEvent RoleTypeStateEvent
        {
            get { return new RoleTypeStateEvent(this); }
        }
                

        public virtual SellableInventoryItemStateEvent SellableInventoryItemStateEvent
        {
            get { return new SellableInventoryItemStateEvent(this); }
        }
                

        public virtual ShipmentStateEvent ShipmentStateEvent
        {
            get { return new ShipmentStateEvent(this); }
        }
                

        public virtual ShipmentMethodTypeStateEvent ShipmentMethodTypeStateEvent
        {
            get { return new ShipmentMethodTypeStateEvent(this); }
        }
                

        public virtual ShipmentPackageStateEvent ShipmentPackageStateEvent
        {
            get { return new ShipmentPackageStateEvent(this); }
        }
                

        public virtual ShipmentTypeStateEvent ShipmentTypeStateEvent
        {
            get { return new ShipmentTypeStateEvent(this); }
        }
                

        public virtual StatusItemStateEvent StatusItemStateEvent
        {
            get { return new StatusItemStateEvent(this); }
        }
                

        public virtual SupplierProductStateEvent SupplierProductStateEvent
        {
            get { return new SupplierProductStateEvent(this); }
        }
                

        public virtual UomStateEvent UomStateEvent
        {
            get { return new UomStateEvent(this); }
        }
                

        public virtual UomConversionStateEvent UomConversionStateEvent
        {
            get { return new UomConversionStateEvent(this); }
        }
                

        public virtual UomTypeStateEvent UomTypeStateEvent
        {
            get { return new UomTypeStateEvent(this); }
        }
                

        public virtual WarehouseStateEvent WarehouseStateEvent
        {
            get { return new WarehouseStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceStateEvent AttributeSetInstanceStateEvent
        {
            get { return new AttributeSetInstanceStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldStateEvent AttributeSetInstanceExtensionFieldStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldStateEvent(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupStateEvent AttributeSetInstanceExtensionFieldGroupStateEvent
        {
            get { return new AttributeSetInstanceExtensionFieldGroupStateEvent(this); }
        }
                

        public virtual AttributeHistoryState AttributeHistoryState
        {
            get { return new AttributeHistoryState(this); }
        }
                

        public virtual AttributeSetHistoryState AttributeSetHistoryState
        {
            get { return new AttributeSetHistoryState(this); }
        }
                

        public virtual ContactMechHistoryState ContactMechHistoryState
        {
            get { return new ContactMechHistoryState(this); }
        }
                

        public virtual DamageHandlingMethodHistoryState DamageHandlingMethodHistoryState
        {
            get { return new DamageHandlingMethodHistoryState(this); }
        }
                

        public virtual DamageReasonHistoryState DamageReasonHistoryState
        {
            get { return new DamageReasonHistoryState(this); }
        }
                

        public virtual DamageTypeHistoryState DamageTypeHistoryState
        {
            get { return new DamageTypeHistoryState(this); }
        }
                

        public virtual DocumentTypeHistoryState DocumentTypeHistoryState
        {
            get { return new DocumentTypeHistoryState(this); }
        }
                

        public virtual FacilityHistoryState FacilityHistoryState
        {
            get { return new FacilityHistoryState(this); }
        }
                

        public virtual GoodIdentificationTypeHistoryState GoodIdentificationTypeHistoryState
        {
            get { return new GoodIdentificationTypeHistoryState(this); }
        }
                

        public virtual InOutHistoryState InOutHistoryState
        {
            get { return new InOutHistoryState(this); }
        }
                

        public virtual InventoryItemHistoryState InventoryItemHistoryState
        {
            get { return new InventoryItemHistoryState(this); }
        }
                

        public virtual InventoryItemRequirementHistoryState InventoryItemRequirementHistoryState
        {
            get { return new InventoryItemRequirementHistoryState(this); }
        }
                

        public virtual InventoryPostingRuleHistoryState InventoryPostingRuleHistoryState
        {
            get { return new InventoryPostingRuleHistoryState(this); }
        }
                

        public virtual InventoryPRTriggeredHistoryState InventoryPRTriggeredHistoryState
        {
            get { return new InventoryPRTriggeredHistoryState(this); }
        }
                

        public virtual LocatorHistoryState LocatorHistoryState
        {
            get { return new LocatorHistoryState(this); }
        }
                

        public virtual LocatorTypeHistoryState LocatorTypeHistoryState
        {
            get { return new LocatorTypeHistoryState(this); }
        }
                

        public virtual LotHistoryState LotHistoryState
        {
            get { return new LotHistoryState(this); }
        }
                

        public virtual MovementHistoryState MovementHistoryState
        {
            get { return new MovementHistoryState(this); }
        }
                

        public virtual MovementConfirmationHistoryState MovementConfirmationHistoryState
        {
            get { return new MovementConfirmationHistoryState(this); }
        }
                

        public virtual MovementTypeHistoryState MovementTypeHistoryState
        {
            get { return new MovementTypeHistoryState(this); }
        }
                

        public virtual OrderHistoryState OrderHistoryState
        {
            get { return new OrderHistoryState(this); }
        }
                

        public virtual OrderItemShipGrpInvReservationHistoryState OrderItemShipGrpInvReservationHistoryState
        {
            get { return new OrderItemShipGrpInvReservationHistoryState(this); }
        }
                

        public virtual OrderShipmentHistoryState OrderShipmentHistoryState
        {
            get { return new OrderShipmentHistoryState(this); }
        }
                

        public virtual OrganizationStructureHistoryState OrganizationStructureHistoryState
        {
            get { return new OrganizationStructureHistoryState(this); }
        }
                

        public virtual OrganizationStructureTypeHistoryState OrganizationStructureTypeHistoryState
        {
            get { return new OrganizationStructureTypeHistoryState(this); }
        }
                

        public virtual PartyHistoryState PartyHistoryState
        {
            get { return new PartyHistoryState(this); }
        }
                

        public virtual PartyRoleHistoryState PartyRoleHistoryState
        {
            get { return new PartyRoleHistoryState(this); }
        }
                

        public virtual PhysicalInventoryHistoryState PhysicalInventoryHistoryState
        {
            get { return new PhysicalInventoryHistoryState(this); }
        }
                

        public virtual PicklistHistoryState PicklistHistoryState
        {
            get { return new PicklistHistoryState(this); }
        }
                

        public virtual PicklistBinHistoryState PicklistBinHistoryState
        {
            get { return new PicklistBinHistoryState(this); }
        }
                

        public virtual PickwaveHistoryState PickwaveHistoryState
        {
            get { return new PickwaveHistoryState(this); }
        }
                

        public virtual ProductHistoryState ProductHistoryState
        {
            get { return new ProductHistoryState(this); }
        }
                

        public virtual ProductCategoryHistoryState ProductCategoryHistoryState
        {
            get { return new ProductCategoryHistoryState(this); }
        }
                

        public virtual ProductCategoryMemberHistoryState ProductCategoryMemberHistoryState
        {
            get { return new ProductCategoryMemberHistoryState(this); }
        }
                

        public virtual RejectionReasonHistoryState RejectionReasonHistoryState
        {
            get { return new RejectionReasonHistoryState(this); }
        }
                

        public virtual RoleTypeHistoryState RoleTypeHistoryState
        {
            get { return new RoleTypeHistoryState(this); }
        }
                

        public virtual SellableInventoryItemHistoryState SellableInventoryItemHistoryState
        {
            get { return new SellableInventoryItemHistoryState(this); }
        }
                

        public virtual ShipmentHistoryState ShipmentHistoryState
        {
            get { return new ShipmentHistoryState(this); }
        }
                

        public virtual ShipmentMethodTypeHistoryState ShipmentMethodTypeHistoryState
        {
            get { return new ShipmentMethodTypeHistoryState(this); }
        }
                

        public virtual ShipmentPackageHistoryState ShipmentPackageHistoryState
        {
            get { return new ShipmentPackageHistoryState(this); }
        }
                

        public virtual ShipmentTypeHistoryState ShipmentTypeHistoryState
        {
            get { return new ShipmentTypeHistoryState(this); }
        }
                

        public virtual StatusItemHistoryState StatusItemHistoryState
        {
            get { return new StatusItemHistoryState(this); }
        }
                

        public virtual SupplierProductHistoryState SupplierProductHistoryState
        {
            get { return new SupplierProductHistoryState(this); }
        }
                

        public virtual UomHistoryState UomHistoryState
        {
            get { return new UomHistoryState(this); }
        }
                

        public virtual UomConversionHistoryState UomConversionHistoryState
        {
            get { return new UomConversionHistoryState(this); }
        }
                

        public virtual UomTypeHistoryState UomTypeHistoryState
        {
            get { return new UomTypeHistoryState(this); }
        }
                

        public virtual WarehouseHistoryState WarehouseHistoryState
        {
            get { return new WarehouseHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceHistoryState AttributeSetInstanceHistoryState
        {
            get { return new AttributeSetInstanceHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldHistoryState AttributeSetInstanceExtensionFieldHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldHistoryState(this); }
        }
                

        public virtual AttributeSetInstanceExtensionFieldGroupHistoryState AttributeSetInstanceExtensionFieldGroupHistoryState
        {
            get { return new AttributeSetInstanceExtensionFieldGroupHistoryState(this); }
        }
                

        public virtual AttributeValue AttributeValue
        {
            get { return new AttributeValue(this); }
        }
                

        public virtual AttributeAlias AttributeAlias
        {
            get { return new AttributeAlias(this); }
        }
                

        public virtual AttributeUse AttributeUse
        {
            get { return new AttributeUse(this); }
        }
                

        public virtual InOutImage InOutImage
        {
            get { return new InOutImage(this); }
        }
                

        public virtual InOutLine InOutLine
        {
            get { return new InOutLine(this); }
        }
                

        public virtual InOutLineImage InOutLineImage
        {
            get { return new InOutLineImage(this); }
        }
                

        public virtual InventoryItemEntry InventoryItemEntry
        {
            get { return new InventoryItemEntry(this); }
        }
                

        public virtual InventoryItemRequirementEntry InventoryItemRequirementEntry
        {
            get { return new InventoryItemRequirementEntry(this); }
        }
                

        public virtual MovementLine MovementLine
        {
            get { return new MovementLine(this); }
        }
                

        public virtual MovementConfirmationLine MovementConfirmationLine
        {
            get { return new MovementConfirmationLine(this); }
        }
                

        public virtual OrderRole OrderRole
        {
            get { return new OrderRole(this); }
        }
                

        public virtual OrderItem OrderItem
        {
            get { return new OrderItem(this); }
        }
                

        public virtual OrderShipGroup OrderShipGroup
        {
            get { return new OrderShipGroup(this); }
        }
                

        public virtual OrderItemShipGroupAssociation OrderItemShipGroupAssociation
        {
            get { return new OrderItemShipGroupAssociation(this); }
        }
                

        public virtual PhysicalInventoryLine PhysicalInventoryLine
        {
            get { return new PhysicalInventoryLine(this); }
        }
                

        public virtual PicklistRole PicklistRole
        {
            get { return new PicklistRole(this); }
        }
                

        public virtual PicklistItem PicklistItem
        {
            get { return new PicklistItem(this); }
        }
                

        public virtual GoodIdentification GoodIdentification
        {
            get { return new GoodIdentification(this); }
        }
                

        public virtual SellableInventoryItemEntry SellableInventoryItemEntry
        {
            get { return new SellableInventoryItemEntry(this); }
        }
                

        public virtual ShipmentImage ShipmentImage
        {
            get { return new ShipmentImage(this); }
        }
                

        public virtual ShipmentItem ShipmentItem
        {
            get { return new ShipmentItem(this); }
        }
                

        public virtual ShipmentReceipt ShipmentReceipt
        {
            get { return new ShipmentReceipt(this); }
        }
                

        public virtual ShipmentReceiptImage ShipmentReceiptImage
        {
            get { return new ShipmentReceiptImage(this); }
        }
                

        public virtual ItemIssuance ItemIssuance
        {
            get { return new ItemIssuance(this); }
        }
                

        public virtual ShipmentPackageContent ShipmentPackageContent
        {
            get { return new ShipmentPackageContent(this); }
        }
                

        public virtual LocatorTrees LocatorTrees
        {
            get { return new LocatorTrees(this); }
        }
                

        public virtual OrganizationTrees OrganizationTrees
        {
            get { return new OrganizationTrees(this); }
        }
                


		public void AddDefaultRequestHeader(string name, string value)
		{
			client.DefaultRequestHeaders.Add(name, value);
		}

		public void AddDefaultRequestHeader(string name, IEnumerable<string> values)
		{
			client.DefaultRequestHeaders.Add(name, values);
		}


    }

} // end namespace









namespace Dddml.Wms.HttpServices.ClientProxies.Raml.Models
{
    public partial class  AttributeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ContactMechGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ContactMechDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ContactMechesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ContactMechesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageHandlingMethodGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  DamageHandlingMethodDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  DamageHandlingMethodsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageHandlingMethodsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageReasonGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  DamageReasonDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  DamageReasonsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageReasonsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  DamageTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  DamageTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DamageTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DocumentTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  DocumentTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  DocumentTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  DocumentTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  FacilityGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  FacilityDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  FacilitiesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  FacilitiesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  GoodIdentificationTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  GoodIdentificationTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  GoodIdentificationTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  GoodIdentificationTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InOutDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InOutsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InOutsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemRequirementGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryItemRequirementDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryItemRequirementsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryItemRequirementsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPostingRuleGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryPostingRuleDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryPostingRulesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPostingRulesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  InventoryPRTriggeredsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  LocatorDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  LocatorsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  LocatorTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  LocatorTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LotGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  LotDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  LotsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LotsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  MovementDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  MovementsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementConfirmationGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  MovementConfirmationDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  MovementConfirmationsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementConfirmationsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  MovementTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  MovementTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  MovementTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrdersGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrdersCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderItemShipGrpInvReservationGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderItemShipGrpInvReservationDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrderItemShipGrpInvReservationsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderItemShipGrpInvReservationsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderShipmentGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrderShipmentDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrderShipmentsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrderShipmentsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructuresGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructuresCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  OrganizationStructureTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationStructureTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PartyGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PartyDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PartiesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PartiesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PartyRoleGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PartyRoleDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PartyRolesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PartyRolesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PhysicalInventoryGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PhysicalInventoryDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PhysicalInventoriesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PhysicalInventoriesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PicklistGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PicklistDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PicklistsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PicklistsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PicklistBinGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PicklistBinDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PicklistBinsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PicklistBinsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PickwaveGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  PickwaveDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  PickwavesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  PickwavesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ProductDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ProductsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoryGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ProductCategoryDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ProductCategoriesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoriesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoryMemberGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ProductCategoryMemberDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ProductCategoryMembersGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ProductCategoryMembersCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  RejectionReasonGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  RejectionReasonDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  RejectionReasonsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  RejectionReasonsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  RoleTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  RoleTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  RoleTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  RoleTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  SellableInventoryItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  SellableInventoryItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SellableInventoryItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentMethodTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentMethodTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentMethodTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentMethodTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentPackageGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentPackageDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentPackagesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentPackagesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  ShipmentTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  ShipmentTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  ShipmentTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  StatusItemGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  StatusItemDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  StatusItemsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  StatusItemsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SupplierProductGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  SupplierProductDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  SupplierProductsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  SupplierProductsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  UomDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  UomsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomConversionGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  UomConversionDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  UomConversionsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomConversionsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomTypeGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  UomTypeDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  UomTypesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  UomTypesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehouseGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  WarehouseDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  WarehousesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  WarehousesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstancesGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstancesCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupGetQuery 
    {
		[JsonProperty("fields")]
        public string Fields { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupDeleteQuery 
    {
		[JsonProperty("commandId")]
        public string CommandId { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }

		[JsonProperty("requesterId")]
        public string RequesterId { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsGetQuery 
    {
		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  AttributeSetInstanceExtensionFieldGroupsCountGetQuery 
    {
		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  LocatorTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    public partial class  OrganizationTreesGetQuery 
    {
		[JsonProperty("parentId")]
        public string ParentId { get; set; }

		[JsonProperty("firstResult")]
        public int? FirstResult { get; set; }

		[JsonProperty("maxResults")]
        public int? MaxResults { get; set; }

		[JsonProperty("sort")]
        public string Sort { get; set; }

		[JsonProperty("fields")]
        public string Fields { get; set; }

		[JsonProperty("filter")]
        public string Filter { get; set; }

		[JsonProperty("filterTag")]
        public string FilterTag { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}
    /// </summary>
    public partial class  AttributeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{attributeId}/AttributeValues/{value}
    /// </summary>
    public partial class  AttributeValueUriParameters 
    {
		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }

		[JsonProperty("value")]
        public string Value { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Attributes/{attributeId}/AttributeAlias/{code}
    /// </summary>
    public partial class  AttributeAliasUriParameters 
    {
		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }

		[JsonProperty("code")]
        public string Code { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}
    /// </summary>
    public partial class  AttributeSetUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSets/{attributeSetId}/AttributeUses/{attributeId}
    /// </summary>
    public partial class  AttributeUseUriParameters 
    {
		[JsonProperty("attributeSetId")]
        public string AttributeSetId { get; set; }

		[JsonProperty("attributeId")]
        public string AttributeId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ContactMeches/{id}
    /// </summary>
    public partial class  ContactMechUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ContactMeches/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ContactMechStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ContactMeches/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ContactMechHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageHandlingMethods/{id}
    /// </summary>
    public partial class  DamageHandlingMethodUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageHandlingMethods/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  DamageHandlingMethodStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageHandlingMethods/{id}/_historyStates/{version}
    /// </summary>
    public partial class  DamageHandlingMethodHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageReasons/{id}
    /// </summary>
    public partial class  DamageReasonUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageReasons/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  DamageReasonStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageReasons/{id}/_historyStates/{version}
    /// </summary>
    public partial class  DamageReasonHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageTypes/{id}
    /// </summary>
    public partial class  DamageTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  DamageTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DamageTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  DamageTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}
    /// </summary>
    public partial class  DocumentTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  DocumentTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /DocumentTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  DocumentTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Facilities/{id}
    /// </summary>
    public partial class  FacilityUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Facilities/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  FacilityStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Facilities/{id}/_historyStates/{version}
    /// </summary>
    public partial class  FacilityHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /GoodIdentificationTypes/{id}
    /// </summary>
    public partial class  GoodIdentificationTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /GoodIdentificationTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  GoodIdentificationTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /GoodIdentificationTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  GoodIdentificationTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}
    /// </summary>
    public partial class  InOutUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InOutStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InOutHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{inOutDocumentNumber}/InOutImages/{sequenceId}
    /// </summary>
    public partial class  InOutImageUriParameters 
    {
		[JsonProperty("inOutDocumentNumber")]
        public string InOutDocumentNumber { get; set; }

		[JsonProperty("sequenceId")]
        public string SequenceId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{inOutDocumentNumber}/InOutLines/{lineNumber}
    /// </summary>
    public partial class  InOutLineUriParameters 
    {
		[JsonProperty("inOutDocumentNumber")]
        public string InOutDocumentNumber { get; set; }

		[JsonProperty("lineNumber")]
        public string LineNumber { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InOuts/{inOutDocumentNumber}/InOutLines/{inOutLineLineNumber}/InOutLineImages/{sequenceId}
    /// </summary>
    public partial class  InOutLineImageUriParameters 
    {
		[JsonProperty("inOutDocumentNumber")]
        public string InOutDocumentNumber { get; set; }

		[JsonProperty("inOutLineLineNumber")]
        public string InOutLineLineNumber { get; set; }

		[JsonProperty("sequenceId")]
        public string SequenceId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}
    /// </summary>
    public partial class  InventoryItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItems/{inventoryItemId}/InventoryItemEntries/{entrySeqId}
    /// </summary>
    public partial class  InventoryItemEntryUriParameters 
    {
		[JsonProperty("inventoryItemId")]
        public string InventoryItemId { get; set; }

		[JsonProperty("entrySeqId")]
        public long? EntrySeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemRequirements/{id}
    /// </summary>
    public partial class  InventoryItemRequirementUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemRequirements/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryItemRequirementStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemRequirements/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryItemRequirementHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryItemRequirements/{inventoryItemRequirementId}/InventoryItemRequirementEntries/{entrySeqId}
    /// </summary>
    public partial class  InventoryItemRequirementEntryUriParameters 
    {
		[JsonProperty("inventoryItemRequirementId")]
        public string InventoryItemRequirementId { get; set; }

		[JsonProperty("entrySeqId")]
        public long? EntrySeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}
    /// </summary>
    public partial class  InventoryPostingRuleUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryPostingRuleStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPostingRules/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryPostingRuleHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}
    /// </summary>
    public partial class  InventoryPRTriggeredUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  InventoryPRTriggeredStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /InventoryPRTriggereds/{id}/_historyStates/{version}
    /// </summary>
    public partial class  InventoryPRTriggeredHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}
    /// </summary>
    public partial class  LocatorUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  LocatorStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Locators/{id}/_historyStates/{version}
    /// </summary>
    public partial class  LocatorHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /LocatorTypes/{id}
    /// </summary>
    public partial class  LocatorTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /LocatorTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  LocatorTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /LocatorTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  LocatorTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Lots/{id}
    /// </summary>
    public partial class  LotUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Lots/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  LotStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Lots/{id}/_historyStates/{version}
    /// </summary>
    public partial class  LotHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Movements/{id}
    /// </summary>
    public partial class  MovementUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Movements/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  MovementStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Movements/{id}/_historyStates/{version}
    /// </summary>
    public partial class  MovementHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Movements/{movementDocumentNumber}/MovementLines/{lineNumber}
    /// </summary>
    public partial class  MovementLineUriParameters 
    {
		[JsonProperty("movementDocumentNumber")]
        public string MovementDocumentNumber { get; set; }

		[JsonProperty("lineNumber")]
        public string LineNumber { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementConfirmations/{id}
    /// </summary>
    public partial class  MovementConfirmationUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementConfirmations/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  MovementConfirmationStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementConfirmations/{id}/_historyStates/{version}
    /// </summary>
    public partial class  MovementConfirmationHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementConfirmations/{movementConfirmationDocumentNumber}/MovementConfirmationLines/{lineNumber}
    /// </summary>
    public partial class  MovementConfirmationLineUriParameters 
    {
		[JsonProperty("movementConfirmationDocumentNumber")]
        public string MovementConfirmationDocumentNumber { get; set; }

		[JsonProperty("lineNumber")]
        public string LineNumber { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}
    /// </summary>
    public partial class  MovementTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  MovementTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /MovementTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  MovementTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{id}
    /// </summary>
    public partial class  OrderUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{orderId}/OrderRoles/{partyRoleId}
    /// </summary>
    public partial class  OrderRoleUriParameters 
    {
		[JsonProperty("orderId")]
        public string OrderId { get; set; }

		[JsonProperty("partyRoleId")]
        public string PartyRoleId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{orderId}/OrderItems/{orderItemSeqId}
    /// </summary>
    public partial class  OrderItemUriParameters 
    {
		[JsonProperty("orderId")]
        public string OrderId { get; set; }

		[JsonProperty("orderItemSeqId")]
        public string OrderItemSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{orderId}/OrderShipGroups/{shipGroupSeqId}
    /// </summary>
    public partial class  OrderShipGroupUriParameters 
    {
		[JsonProperty("orderId")]
        public string OrderId { get; set; }

		[JsonProperty("shipGroupSeqId")]
        public string ShipGroupSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Orders/{orderId}/OrderShipGroups/{orderShipGroupShipGroupSeqId}/OrderItemShipGroupAssociations/{orderItemSeqId}
    /// </summary>
    public partial class  OrderItemShipGroupAssociationUriParameters 
    {
		[JsonProperty("orderId")]
        public string OrderId { get; set; }

		[JsonProperty("orderShipGroupShipGroupSeqId")]
        public string OrderShipGroupShipGroupSeqId { get; set; }

		[JsonProperty("orderItemSeqId")]
        public string OrderItemSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItemShipGrpInvReservations/{id}
    /// </summary>
    public partial class  OrderItemShipGrpInvReservationUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItemShipGrpInvReservations/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderItemShipGrpInvReservationStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderItemShipGrpInvReservations/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderItemShipGrpInvReservationHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}
    /// </summary>
    public partial class  OrderShipmentUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrderShipmentStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrderShipments/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrderShipmentHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}
    /// </summary>
    public partial class  OrganizationStructureUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructures/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}
    /// </summary>
    public partial class  OrganizationStructureTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /OrganizationStructureTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  OrganizationStructureTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Parties/{id}
    /// </summary>
    public partial class  PartyUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Parties/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PartyStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Parties/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PartyHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PartyRoles/{id}
    /// </summary>
    public partial class  PartyRoleUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PartyRoles/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PartyRoleStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PartyRoles/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PartyRoleHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PhysicalInventories/{id}
    /// </summary>
    public partial class  PhysicalInventoryUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PhysicalInventories/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PhysicalInventoryStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PhysicalInventories/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PhysicalInventoryHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PhysicalInventories/{physicalInventoryDocumentNumber}/PhysicalInventoryLines/{inventoryItemId}
    /// </summary>
    public partial class  PhysicalInventoryLineUriParameters 
    {
		[JsonProperty("physicalInventoryDocumentNumber")]
        public string PhysicalInventoryDocumentNumber { get; set; }

		[JsonProperty("inventoryItemId")]
        public string InventoryItemId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Picklists/{id}
    /// </summary>
    public partial class  PicklistUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Picklists/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PicklistStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Picklists/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PicklistHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Picklists/{picklistId}/PicklistRoles/{partyRoleId}
    /// </summary>
    public partial class  PicklistRoleUriParameters 
    {
		[JsonProperty("picklistId")]
        public string PicklistId { get; set; }

		[JsonProperty("partyRoleId")]
        public string PartyRoleId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PicklistBins/{id}
    /// </summary>
    public partial class  PicklistBinUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PicklistBins/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PicklistBinStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PicklistBins/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PicklistBinHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /PicklistBins/{picklistBinId}/PicklistItems/{picklistItemOrderShipGrpInvId}
    /// </summary>
    public partial class  PicklistItemUriParameters 
    {
		[JsonProperty("picklistBinId")]
        public string PicklistBinId { get; set; }

		[JsonProperty("picklistItemOrderShipGrpInvId")]
        public string PicklistItemOrderShipGrpInvId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Pickwaves/{id}
    /// </summary>
    public partial class  PickwaveUriParameters 
    {
		[JsonProperty("id")]
        public long? Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Pickwaves/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  PickwaveStateEventUriParameters 
    {
		[JsonProperty("id")]
        public long? Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Pickwaves/{id}/_historyStates/{version}
    /// </summary>
    public partial class  PickwaveHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public long? Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}
    /// </summary>
    public partial class  ProductUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ProductStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ProductHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Products/{productId}/GoodIdentifications/{goodIdentificationTypeId}
    /// </summary>
    public partial class  GoodIdentificationUriParameters 
    {
		[JsonProperty("productId")]
        public string ProductId { get; set; }

		[JsonProperty("goodIdentificationTypeId")]
        public string GoodIdentificationTypeId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}
    /// </summary>
    public partial class  ProductCategoryUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ProductCategoryStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategories/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ProductCategoryHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategoryMembers/{id}
    /// </summary>
    public partial class  ProductCategoryMemberUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategoryMembers/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ProductCategoryMemberStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ProductCategoryMembers/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ProductCategoryMemberHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RejectionReasons/{id}
    /// </summary>
    public partial class  RejectionReasonUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RejectionReasons/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  RejectionReasonStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RejectionReasons/{id}/_historyStates/{version}
    /// </summary>
    public partial class  RejectionReasonHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RoleTypes/{id}
    /// </summary>
    public partial class  RoleTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RoleTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  RoleTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /RoleTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  RoleTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}
    /// </summary>
    public partial class  SellableInventoryItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  SellableInventoryItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  SellableInventoryItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SellableInventoryItems/{sellableInventoryItemId}/SellableInventoryItemEntries/{entrySeqId}
    /// </summary>
    public partial class  SellableInventoryItemEntryUriParameters 
    {
		[JsonProperty("sellableInventoryItemId")]
        public string SellableInventoryItemId { get; set; }

		[JsonProperty("entrySeqId")]
        public long? EntrySeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}
    /// </summary>
    public partial class  ShipmentUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{shipmentId}/ShipmentImages/{sequenceId}
    /// </summary>
    public partial class  ShipmentImageUriParameters 
    {
		[JsonProperty("shipmentId")]
        public string ShipmentId { get; set; }

		[JsonProperty("sequenceId")]
        public string SequenceId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{shipmentId}/ShipmentItems/{shipmentItemSeqId}
    /// </summary>
    public partial class  ShipmentItemUriParameters 
    {
		[JsonProperty("shipmentId")]
        public string ShipmentId { get; set; }

		[JsonProperty("shipmentItemSeqId")]
        public string ShipmentItemSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{shipmentId}/ShipmentReceipts/{receiptSeqId}
    /// </summary>
    public partial class  ShipmentReceiptUriParameters 
    {
		[JsonProperty("shipmentId")]
        public string ShipmentId { get; set; }

		[JsonProperty("receiptSeqId")]
        public string ReceiptSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{shipmentId}/ShipmentReceipts/{shipmentReceiptReceiptSeqId}/ShipmentReceiptImages/{sequenceId}
    /// </summary>
    public partial class  ShipmentReceiptImageUriParameters 
    {
		[JsonProperty("shipmentId")]
        public string ShipmentId { get; set; }

		[JsonProperty("shipmentReceiptReceiptSeqId")]
        public string ShipmentReceiptReceiptSeqId { get; set; }

		[JsonProperty("sequenceId")]
        public string SequenceId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Shipments/{shipmentId}/ItemIssuances/{itemIssuanceSeqId}
    /// </summary>
    public partial class  ItemIssuanceUriParameters 
    {
		[JsonProperty("shipmentId")]
        public string ShipmentId { get; set; }

		[JsonProperty("itemIssuanceSeqId")]
        public string ItemIssuanceSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentMethodTypes/{id}
    /// </summary>
    public partial class  ShipmentMethodTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentMethodTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentMethodTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentMethodTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentMethodTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentPackages/{id}
    /// </summary>
    public partial class  ShipmentPackageUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentPackages/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentPackageStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentPackages/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentPackageHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentPackages/{shipmentPackageId}/ShipmentPackageContents/{shipmentItemSeqId}
    /// </summary>
    public partial class  ShipmentPackageContentUriParameters 
    {
		[JsonProperty("shipmentPackageId")]
        public string ShipmentPackageId { get; set; }

		[JsonProperty("shipmentItemSeqId")]
        public string ShipmentItemSeqId { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}
    /// </summary>
    public partial class  ShipmentTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  ShipmentTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /ShipmentTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  ShipmentTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}
    /// </summary>
    public partial class  StatusItemUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  StatusItemStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /StatusItems/{id}/_historyStates/{version}
    /// </summary>
    public partial class  StatusItemHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}
    /// </summary>
    public partial class  SupplierProductUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  SupplierProductStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /SupplierProducts/{id}/_historyStates/{version}
    /// </summary>
    public partial class  SupplierProductHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Uoms/{id}
    /// </summary>
    public partial class  UomUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Uoms/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  UomStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Uoms/{id}/_historyStates/{version}
    /// </summary>
    public partial class  UomHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomConversions/{id}
    /// </summary>
    public partial class  UomConversionUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomConversions/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  UomConversionStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomConversions/{id}/_historyStates/{version}
    /// </summary>
    public partial class  UomConversionHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomTypes/{id}
    /// </summary>
    public partial class  UomTypeUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomTypes/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  UomTypeStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /UomTypes/{id}/_historyStates/{version}
    /// </summary>
    public partial class  UomTypeHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}
    /// </summary>
    public partial class  WarehouseUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  WarehouseStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /Warehouses/{id}/_historyStates/{version}
    /// </summary>
    public partial class  WarehouseHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}
    /// </summary>
    public partial class  AttributeSetInstanceUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstances/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFields/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFields/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFields/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_stateEvents/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupStateEventUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Uri Parameters for resource /AttributeSetInstanceExtensionFieldGroups/{id}/_historyStates/{version}
    /// </summary>
    public partial class  AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters 
    {
		[JsonProperty("id")]
        public string Id { get; set; }

		[JsonProperty("version")]
        public string Version { get; set; }


    } // end class

    /// <summary>
    /// Request object for method Get of class Attribute
    /// </summary>
    public partial class AttributeGetRequest : ApiRequest
    {
        public AttributeGetRequest(AttributeUriParameters UriParameters, AttributeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Attribute
    /// </summary>
    public partial class AttributePutRequest : ApiRequest
    {
        public AttributePutRequest(AttributeUriParameters UriParameters, CreateAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Attribute
    /// </summary>
    public partial class AttributePatchRequest : ApiRequest
    {
        public AttributePatchRequest(AttributeUriParameters UriParameters, MergePatchAttributeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Attribute
    /// </summary>
    public partial class AttributeDeleteRequest : ApiRequest
    {
        public AttributeDeleteRequest(AttributeUriParameters UriParameters, AttributeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Attributes
    /// </summary>
    public partial class AttributesGetRequest : ApiRequest
    {
        public AttributesGetRequest(AttributesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributesCount
    /// </summary>
    public partial class AttributesCountGetRequest : ApiRequest
    {
        public AttributesCountGetRequest(AttributesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeStateEvent
    /// </summary>
    public partial class AttributeStateEventGetRequest : ApiRequest
    {
        public AttributeStateEventGetRequest(AttributeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeHistoryState
    /// </summary>
    public partial class AttributeHistoryStateGetRequest : ApiRequest
    {
        public AttributeHistoryStateGetRequest(AttributeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeValue
    /// </summary>
    public partial class AttributeValueGetRequest : ApiRequest
    {
        public AttributeValueGetRequest(AttributeValueUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeValueUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeAlias
    /// </summary>
    public partial class AttributeAliasGetRequest : ApiRequest
    {
        public AttributeAliasGetRequest(AttributeAliasUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeAliasUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSet
    /// </summary>
    public partial class AttributeSetGetRequest : ApiRequest
    {
        public AttributeSetGetRequest(AttributeSetUriParameters UriParameters, AttributeSetGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSet
    /// </summary>
    public partial class AttributeSetPutRequest : ApiRequest
    {
        public AttributeSetPutRequest(AttributeSetUriParameters UriParameters, CreateAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSet
    /// </summary>
    public partial class AttributeSetPatchRequest : ApiRequest
    {
        public AttributeSetPatchRequest(AttributeSetUriParameters UriParameters, MergePatchAttributeSetDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSet
    /// </summary>
    public partial class AttributeSetDeleteRequest : ApiRequest
    {
        public AttributeSetDeleteRequest(AttributeSetUriParameters UriParameters, AttributeSetDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSets
    /// </summary>
    public partial class AttributeSetsGetRequest : ApiRequest
    {
        public AttributeSetsGetRequest(AttributeSetsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetsCount
    /// </summary>
    public partial class AttributeSetsCountGetRequest : ApiRequest
    {
        public AttributeSetsCountGetRequest(AttributeSetsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetStateEvent
    /// </summary>
    public partial class AttributeSetStateEventGetRequest : ApiRequest
    {
        public AttributeSetStateEventGetRequest(AttributeSetStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetHistoryState
    /// </summary>
    public partial class AttributeSetHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetHistoryStateGetRequest(AttributeSetHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeUse
    /// </summary>
    public partial class AttributeUseGetRequest : ApiRequest
    {
        public AttributeUseGetRequest(AttributeUseUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeUseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ContactMech
    /// </summary>
    public partial class ContactMechGetRequest : ApiRequest
    {
        public ContactMechGetRequest(ContactMechUriParameters UriParameters, ContactMechGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ContactMechGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ContactMech
    /// </summary>
    public partial class ContactMechPutRequest : ApiRequest
    {
        public ContactMechPutRequest(ContactMechUriParameters UriParameters, CreateContactMechDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateContactMechDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ContactMech
    /// </summary>
    public partial class ContactMechPatchRequest : ApiRequest
    {
        public ContactMechPatchRequest(ContactMechUriParameters UriParameters, MergePatchContactMechDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchContactMechDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ContactMech
    /// </summary>
    public partial class ContactMechDeleteRequest : ApiRequest
    {
        public ContactMechDeleteRequest(ContactMechUriParameters UriParameters, ContactMechDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ContactMechDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ContactMeches
    /// </summary>
    public partial class ContactMechesGetRequest : ApiRequest
    {
        public ContactMechesGetRequest(ContactMechesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ContactMechesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ContactMechesCount
    /// </summary>
    public partial class ContactMechesCountGetRequest : ApiRequest
    {
        public ContactMechesCountGetRequest(ContactMechesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ContactMechesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ContactMechStateEvent
    /// </summary>
    public partial class ContactMechStateEventGetRequest : ApiRequest
    {
        public ContactMechStateEventGetRequest(ContactMechStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ContactMechHistoryState
    /// </summary>
    public partial class ContactMechHistoryStateGetRequest : ApiRequest
    {
        public ContactMechHistoryStateGetRequest(ContactMechHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ContactMechHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageHandlingMethod
    /// </summary>
    public partial class DamageHandlingMethodGetRequest : ApiRequest
    {
        public DamageHandlingMethodGetRequest(DamageHandlingMethodUriParameters UriParameters, DamageHandlingMethodGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageHandlingMethodGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class DamageHandlingMethod
    /// </summary>
    public partial class DamageHandlingMethodPutRequest : ApiRequest
    {
        public DamageHandlingMethodPutRequest(DamageHandlingMethodUriParameters UriParameters, CreateDamageHandlingMethodDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateDamageHandlingMethodDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class DamageHandlingMethod
    /// </summary>
    public partial class DamageHandlingMethodPatchRequest : ApiRequest
    {
        public DamageHandlingMethodPatchRequest(DamageHandlingMethodUriParameters UriParameters, MergePatchDamageHandlingMethodDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchDamageHandlingMethodDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class DamageHandlingMethod
    /// </summary>
    public partial class DamageHandlingMethodDeleteRequest : ApiRequest
    {
        public DamageHandlingMethodDeleteRequest(DamageHandlingMethodUriParameters UriParameters, DamageHandlingMethodDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageHandlingMethodDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageHandlingMethods
    /// </summary>
    public partial class DamageHandlingMethodsGetRequest : ApiRequest
    {
        public DamageHandlingMethodsGetRequest(DamageHandlingMethodsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageHandlingMethodsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageHandlingMethodsCount
    /// </summary>
    public partial class DamageHandlingMethodsCountGetRequest : ApiRequest
    {
        public DamageHandlingMethodsCountGetRequest(DamageHandlingMethodsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageHandlingMethodsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageHandlingMethodStateEvent
    /// </summary>
    public partial class DamageHandlingMethodStateEventGetRequest : ApiRequest
    {
        public DamageHandlingMethodStateEventGetRequest(DamageHandlingMethodStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageHandlingMethodHistoryState
    /// </summary>
    public partial class DamageHandlingMethodHistoryStateGetRequest : ApiRequest
    {
        public DamageHandlingMethodHistoryStateGetRequest(DamageHandlingMethodHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageHandlingMethodHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageReason
    /// </summary>
    public partial class DamageReasonGetRequest : ApiRequest
    {
        public DamageReasonGetRequest(DamageReasonUriParameters UriParameters, DamageReasonGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageReasonGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class DamageReason
    /// </summary>
    public partial class DamageReasonPutRequest : ApiRequest
    {
        public DamageReasonPutRequest(DamageReasonUriParameters UriParameters, CreateDamageReasonDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateDamageReasonDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class DamageReason
    /// </summary>
    public partial class DamageReasonPatchRequest : ApiRequest
    {
        public DamageReasonPatchRequest(DamageReasonUriParameters UriParameters, MergePatchDamageReasonDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchDamageReasonDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class DamageReason
    /// </summary>
    public partial class DamageReasonDeleteRequest : ApiRequest
    {
        public DamageReasonDeleteRequest(DamageReasonUriParameters UriParameters, DamageReasonDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageReasonDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageReasons
    /// </summary>
    public partial class DamageReasonsGetRequest : ApiRequest
    {
        public DamageReasonsGetRequest(DamageReasonsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageReasonsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageReasonsCount
    /// </summary>
    public partial class DamageReasonsCountGetRequest : ApiRequest
    {
        public DamageReasonsCountGetRequest(DamageReasonsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageReasonsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageReasonStateEvent
    /// </summary>
    public partial class DamageReasonStateEventGetRequest : ApiRequest
    {
        public DamageReasonStateEventGetRequest(DamageReasonStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageReasonHistoryState
    /// </summary>
    public partial class DamageReasonHistoryStateGetRequest : ApiRequest
    {
        public DamageReasonHistoryStateGetRequest(DamageReasonHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageReasonHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageType
    /// </summary>
    public partial class DamageTypeGetRequest : ApiRequest
    {
        public DamageTypeGetRequest(DamageTypeUriParameters UriParameters, DamageTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class DamageType
    /// </summary>
    public partial class DamageTypePutRequest : ApiRequest
    {
        public DamageTypePutRequest(DamageTypeUriParameters UriParameters, CreateDamageTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateDamageTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class DamageType
    /// </summary>
    public partial class DamageTypePatchRequest : ApiRequest
    {
        public DamageTypePatchRequest(DamageTypeUriParameters UriParameters, MergePatchDamageTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchDamageTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class DamageType
    /// </summary>
    public partial class DamageTypeDeleteRequest : ApiRequest
    {
        public DamageTypeDeleteRequest(DamageTypeUriParameters UriParameters, DamageTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageTypes
    /// </summary>
    public partial class DamageTypesGetRequest : ApiRequest
    {
        public DamageTypesGetRequest(DamageTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageTypesCount
    /// </summary>
    public partial class DamageTypesCountGetRequest : ApiRequest
    {
        public DamageTypesCountGetRequest(DamageTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DamageTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageTypeStateEvent
    /// </summary>
    public partial class DamageTypeStateEventGetRequest : ApiRequest
    {
        public DamageTypeStateEventGetRequest(DamageTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DamageTypeHistoryState
    /// </summary>
    public partial class DamageTypeHistoryStateGetRequest : ApiRequest
    {
        public DamageTypeHistoryStateGetRequest(DamageTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DamageTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentType
    /// </summary>
    public partial class DocumentTypeGetRequest : ApiRequest
    {
        public DocumentTypeGetRequest(DocumentTypeUriParameters UriParameters, DocumentTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class DocumentType
    /// </summary>
    public partial class DocumentTypePutRequest : ApiRequest
    {
        public DocumentTypePutRequest(DocumentTypeUriParameters UriParameters, CreateDocumentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateDocumentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class DocumentType
    /// </summary>
    public partial class DocumentTypePatchRequest : ApiRequest
    {
        public DocumentTypePatchRequest(DocumentTypeUriParameters UriParameters, MergePatchDocumentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchDocumentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class DocumentType
    /// </summary>
    public partial class DocumentTypeDeleteRequest : ApiRequest
    {
        public DocumentTypeDeleteRequest(DocumentTypeUriParameters UriParameters, DocumentTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypes
    /// </summary>
    public partial class DocumentTypesGetRequest : ApiRequest
    {
        public DocumentTypesGetRequest(DocumentTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypesCount
    /// </summary>
    public partial class DocumentTypesCountGetRequest : ApiRequest
    {
        public DocumentTypesCountGetRequest(DocumentTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public DocumentTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypeStateEvent
    /// </summary>
    public partial class DocumentTypeStateEventGetRequest : ApiRequest
    {
        public DocumentTypeStateEventGetRequest(DocumentTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class DocumentTypeHistoryState
    /// </summary>
    public partial class DocumentTypeHistoryStateGetRequest : ApiRequest
    {
        public DocumentTypeHistoryStateGetRequest(DocumentTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public DocumentTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Facility
    /// </summary>
    public partial class FacilityGetRequest : ApiRequest
    {
        public FacilityGetRequest(FacilityUriParameters UriParameters, FacilityGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public FacilityGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Facility
    /// </summary>
    public partial class FacilityPutRequest : ApiRequest
    {
        public FacilityPutRequest(FacilityUriParameters UriParameters, CreateFacilityDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateFacilityDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Facility
    /// </summary>
    public partial class FacilityPatchRequest : ApiRequest
    {
        public FacilityPatchRequest(FacilityUriParameters UriParameters, MergePatchFacilityDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchFacilityDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Facility
    /// </summary>
    public partial class FacilityDeleteRequest : ApiRequest
    {
        public FacilityDeleteRequest(FacilityUriParameters UriParameters, FacilityDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public FacilityDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Facilities
    /// </summary>
    public partial class FacilitiesGetRequest : ApiRequest
    {
        public FacilitiesGetRequest(FacilitiesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public FacilitiesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class FacilitiesCount
    /// </summary>
    public partial class FacilitiesCountGetRequest : ApiRequest
    {
        public FacilitiesCountGetRequest(FacilitiesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public FacilitiesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class FacilityStateEvent
    /// </summary>
    public partial class FacilityStateEventGetRequest : ApiRequest
    {
        public FacilityStateEventGetRequest(FacilityStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class FacilityHistoryState
    /// </summary>
    public partial class FacilityHistoryStateGetRequest : ApiRequest
    {
        public FacilityHistoryStateGetRequest(FacilityHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public FacilityHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentificationType
    /// </summary>
    public partial class GoodIdentificationTypeGetRequest : ApiRequest
    {
        public GoodIdentificationTypeGetRequest(GoodIdentificationTypeUriParameters UriParameters, GoodIdentificationTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GoodIdentificationTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class GoodIdentificationType
    /// </summary>
    public partial class GoodIdentificationTypePutRequest : ApiRequest
    {
        public GoodIdentificationTypePutRequest(GoodIdentificationTypeUriParameters UriParameters, CreateGoodIdentificationTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateGoodIdentificationTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class GoodIdentificationType
    /// </summary>
    public partial class GoodIdentificationTypePatchRequest : ApiRequest
    {
        public GoodIdentificationTypePatchRequest(GoodIdentificationTypeUriParameters UriParameters, MergePatchGoodIdentificationTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchGoodIdentificationTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class GoodIdentificationType
    /// </summary>
    public partial class GoodIdentificationTypeDeleteRequest : ApiRequest
    {
        public GoodIdentificationTypeDeleteRequest(GoodIdentificationTypeUriParameters UriParameters, GoodIdentificationTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GoodIdentificationTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentificationTypes
    /// </summary>
    public partial class GoodIdentificationTypesGetRequest : ApiRequest
    {
        public GoodIdentificationTypesGetRequest(GoodIdentificationTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GoodIdentificationTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentificationTypesCount
    /// </summary>
    public partial class GoodIdentificationTypesCountGetRequest : ApiRequest
    {
        public GoodIdentificationTypesCountGetRequest(GoodIdentificationTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public GoodIdentificationTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentificationTypeStateEvent
    /// </summary>
    public partial class GoodIdentificationTypeStateEventGetRequest : ApiRequest
    {
        public GoodIdentificationTypeStateEventGetRequest(GoodIdentificationTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentificationTypeHistoryState
    /// </summary>
    public partial class GoodIdentificationTypeHistoryStateGetRequest : ApiRequest
    {
        public GoodIdentificationTypeHistoryStateGetRequest(GoodIdentificationTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOut
    /// </summary>
    public partial class InOutGetRequest : ApiRequest
    {
        public InOutGetRequest(InOutUriParameters UriParameters, InOutGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InOut
    /// </summary>
    public partial class InOutPutRequest : ApiRequest
    {
        public InOutPutRequest(InOutUriParameters UriParameters, CreateInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InOut
    /// </summary>
    public partial class InOutPatchRequest : ApiRequest
    {
        public InOutPatchRequest(InOutUriParameters UriParameters, MergePatchInOutDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInOutDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InOut
    /// </summary>
    public partial class InOutDeleteRequest : ApiRequest
    {
        public InOutDeleteRequest(InOutUriParameters UriParameters, InOutDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOuts
    /// </summary>
    public partial class InOutsGetRequest : ApiRequest
    {
        public InOutsGetRequest(InOutsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutsCount
    /// </summary>
    public partial class InOutsCountGetRequest : ApiRequest
    {
        public InOutsCountGetRequest(InOutsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InOutsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutStateEvent
    /// </summary>
    public partial class InOutStateEventGetRequest : ApiRequest
    {
        public InOutStateEventGetRequest(InOutStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutHistoryState
    /// </summary>
    public partial class InOutHistoryStateGetRequest : ApiRequest
    {
        public InOutHistoryStateGetRequest(InOutHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutImage
    /// </summary>
    public partial class InOutImageGetRequest : ApiRequest
    {
        public InOutImageGetRequest(InOutImageUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutImageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLine
    /// </summary>
    public partial class InOutLineGetRequest : ApiRequest
    {
        public InOutLineGetRequest(InOutLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InOutLineImage
    /// </summary>
    public partial class InOutLineImageGetRequest : ApiRequest
    {
        public InOutLineImageGetRequest(InOutLineImageUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InOutLineImageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItem
    /// </summary>
    public partial class InventoryItemGetRequest : ApiRequest
    {
        public InventoryItemGetRequest(InventoryItemUriParameters UriParameters, InventoryItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryItem
    /// </summary>
    public partial class InventoryItemPutRequest : ApiRequest
    {
        public InventoryItemPutRequest(InventoryItemUriParameters UriParameters, CreateInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryItem
    /// </summary>
    public partial class InventoryItemPatchRequest : ApiRequest
    {
        public InventoryItemPatchRequest(InventoryItemUriParameters UriParameters, MergePatchInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryItem
    /// </summary>
    public partial class InventoryItemDeleteRequest : ApiRequest
    {
        public InventoryItemDeleteRequest(InventoryItemUriParameters UriParameters, InventoryItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItems
    /// </summary>
    public partial class InventoryItemsGetRequest : ApiRequest
    {
        public InventoryItemsGetRequest(InventoryItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemsCount
    /// </summary>
    public partial class InventoryItemsCountGetRequest : ApiRequest
    {
        public InventoryItemsCountGetRequest(InventoryItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemStateEvent
    /// </summary>
    public partial class InventoryItemStateEventGetRequest : ApiRequest
    {
        public InventoryItemStateEventGetRequest(InventoryItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemHistoryState
    /// </summary>
    public partial class InventoryItemHistoryStateGetRequest : ApiRequest
    {
        public InventoryItemHistoryStateGetRequest(InventoryItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemEntry
    /// </summary>
    public partial class InventoryItemEntryGetRequest : ApiRequest
    {
        public InventoryItemEntryGetRequest(InventoryItemEntryUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemEntryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirement
    /// </summary>
    public partial class InventoryItemRequirementGetRequest : ApiRequest
    {
        public InventoryItemRequirementGetRequest(InventoryItemRequirementUriParameters UriParameters, InventoryItemRequirementGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemRequirementGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryItemRequirement
    /// </summary>
    public partial class InventoryItemRequirementPutRequest : ApiRequest
    {
        public InventoryItemRequirementPutRequest(InventoryItemRequirementUriParameters UriParameters, CreateInventoryItemRequirementDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryItemRequirementDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryItemRequirement
    /// </summary>
    public partial class InventoryItemRequirementPatchRequest : ApiRequest
    {
        public InventoryItemRequirementPatchRequest(InventoryItemRequirementUriParameters UriParameters, MergePatchInventoryItemRequirementDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryItemRequirementDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryItemRequirement
    /// </summary>
    public partial class InventoryItemRequirementDeleteRequest : ApiRequest
    {
        public InventoryItemRequirementDeleteRequest(InventoryItemRequirementUriParameters UriParameters, InventoryItemRequirementDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemRequirementDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirements
    /// </summary>
    public partial class InventoryItemRequirementsGetRequest : ApiRequest
    {
        public InventoryItemRequirementsGetRequest(InventoryItemRequirementsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemRequirementsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirementsCount
    /// </summary>
    public partial class InventoryItemRequirementsCountGetRequest : ApiRequest
    {
        public InventoryItemRequirementsCountGetRequest(InventoryItemRequirementsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryItemRequirementsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirementStateEvent
    /// </summary>
    public partial class InventoryItemRequirementStateEventGetRequest : ApiRequest
    {
        public InventoryItemRequirementStateEventGetRequest(InventoryItemRequirementStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirementHistoryState
    /// </summary>
    public partial class InventoryItemRequirementHistoryStateGetRequest : ApiRequest
    {
        public InventoryItemRequirementHistoryStateGetRequest(InventoryItemRequirementHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryItemRequirementEntry
    /// </summary>
    public partial class InventoryItemRequirementEntryGetRequest : ApiRequest
    {
        public InventoryItemRequirementEntryGetRequest(InventoryItemRequirementEntryUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryItemRequirementEntryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRuleGetRequest : ApiRequest
    {
        public InventoryPostingRuleGetRequest(InventoryPostingRuleUriParameters UriParameters, InventoryPostingRuleGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRuleGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRulePutRequest : ApiRequest
    {
        public InventoryPostingRulePutRequest(InventoryPostingRuleUriParameters UriParameters, CreateInventoryPostingRuleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryPostingRuleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRulePatchRequest : ApiRequest
    {
        public InventoryPostingRulePatchRequest(InventoryPostingRuleUriParameters UriParameters, MergePatchInventoryPostingRuleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryPostingRuleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryPostingRule
    /// </summary>
    public partial class InventoryPostingRuleDeleteRequest : ApiRequest
    {
        public InventoryPostingRuleDeleteRequest(InventoryPostingRuleUriParameters UriParameters, InventoryPostingRuleDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRuleDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRules
    /// </summary>
    public partial class InventoryPostingRulesGetRequest : ApiRequest
    {
        public InventoryPostingRulesGetRequest(InventoryPostingRulesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRulesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRulesCount
    /// </summary>
    public partial class InventoryPostingRulesCountGetRequest : ApiRequest
    {
        public InventoryPostingRulesCountGetRequest(InventoryPostingRulesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPostingRulesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRuleStateEvent
    /// </summary>
    public partial class InventoryPostingRuleStateEventGetRequest : ApiRequest
    {
        public InventoryPostingRuleStateEventGetRequest(InventoryPostingRuleStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPostingRuleHistoryState
    /// </summary>
    public partial class InventoryPostingRuleHistoryStateGetRequest : ApiRequest
    {
        public InventoryPostingRuleHistoryStateGetRequest(InventoryPostingRuleHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPostingRuleHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredGetRequest : ApiRequest
    {
        public InventoryPRTriggeredGetRequest(InventoryPRTriggeredUriParameters UriParameters, InventoryPRTriggeredGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredPutRequest : ApiRequest
    {
        public InventoryPRTriggeredPutRequest(InventoryPRTriggeredUriParameters UriParameters, CreateInventoryPRTriggeredDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateInventoryPRTriggeredDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredPatchRequest : ApiRequest
    {
        public InventoryPRTriggeredPatchRequest(InventoryPRTriggeredUriParameters UriParameters, MergePatchInventoryPRTriggeredDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchInventoryPRTriggeredDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class InventoryPRTriggered
    /// </summary>
    public partial class InventoryPRTriggeredDeleteRequest : ApiRequest
    {
        public InventoryPRTriggeredDeleteRequest(InventoryPRTriggeredUriParameters UriParameters, InventoryPRTriggeredDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggereds
    /// </summary>
    public partial class InventoryPRTriggeredsGetRequest : ApiRequest
    {
        public InventoryPRTriggeredsGetRequest(InventoryPRTriggeredsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredsCount
    /// </summary>
    public partial class InventoryPRTriggeredsCountGetRequest : ApiRequest
    {
        public InventoryPRTriggeredsCountGetRequest(InventoryPRTriggeredsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public InventoryPRTriggeredsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredStateEvent
    /// </summary>
    public partial class InventoryPRTriggeredStateEventGetRequest : ApiRequest
    {
        public InventoryPRTriggeredStateEventGetRequest(InventoryPRTriggeredStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class InventoryPRTriggeredHistoryState
    /// </summary>
    public partial class InventoryPRTriggeredHistoryStateGetRequest : ApiRequest
    {
        public InventoryPRTriggeredHistoryStateGetRequest(InventoryPRTriggeredHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public InventoryPRTriggeredHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locator
    /// </summary>
    public partial class LocatorGetRequest : ApiRequest
    {
        public LocatorGetRequest(LocatorUriParameters UriParameters, LocatorGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Locator
    /// </summary>
    public partial class LocatorPutRequest : ApiRequest
    {
        public LocatorPutRequest(LocatorUriParameters UriParameters, CreateLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Locator
    /// </summary>
    public partial class LocatorPatchRequest : ApiRequest
    {
        public LocatorPatchRequest(LocatorUriParameters UriParameters, MergePatchLocatorDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchLocatorDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Locator
    /// </summary>
    public partial class LocatorDeleteRequest : ApiRequest
    {
        public LocatorDeleteRequest(LocatorUriParameters UriParameters, LocatorDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Locators
    /// </summary>
    public partial class LocatorsGetRequest : ApiRequest
    {
        public LocatorsGetRequest(LocatorsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorsCount
    /// </summary>
    public partial class LocatorsCountGetRequest : ApiRequest
    {
        public LocatorsCountGetRequest(LocatorsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorStateEvent
    /// </summary>
    public partial class LocatorStateEventGetRequest : ApiRequest
    {
        public LocatorStateEventGetRequest(LocatorStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorHistoryState
    /// </summary>
    public partial class LocatorHistoryStateGetRequest : ApiRequest
    {
        public LocatorHistoryStateGetRequest(LocatorHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorType
    /// </summary>
    public partial class LocatorTypeGetRequest : ApiRequest
    {
        public LocatorTypeGetRequest(LocatorTypeUriParameters UriParameters, LocatorTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class LocatorType
    /// </summary>
    public partial class LocatorTypePutRequest : ApiRequest
    {
        public LocatorTypePutRequest(LocatorTypeUriParameters UriParameters, CreateLocatorTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateLocatorTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class LocatorType
    /// </summary>
    public partial class LocatorTypePatchRequest : ApiRequest
    {
        public LocatorTypePatchRequest(LocatorTypeUriParameters UriParameters, MergePatchLocatorTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchLocatorTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class LocatorType
    /// </summary>
    public partial class LocatorTypeDeleteRequest : ApiRequest
    {
        public LocatorTypeDeleteRequest(LocatorTypeUriParameters UriParameters, LocatorTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTypes
    /// </summary>
    public partial class LocatorTypesGetRequest : ApiRequest
    {
        public LocatorTypesGetRequest(LocatorTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTypesCount
    /// </summary>
    public partial class LocatorTypesCountGetRequest : ApiRequest
    {
        public LocatorTypesCountGetRequest(LocatorTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTypeStateEvent
    /// </summary>
    public partial class LocatorTypeStateEventGetRequest : ApiRequest
    {
        public LocatorTypeStateEventGetRequest(LocatorTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTypeHistoryState
    /// </summary>
    public partial class LocatorTypeHistoryStateGetRequest : ApiRequest
    {
        public LocatorTypeHistoryStateGetRequest(LocatorTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LocatorTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Lot
    /// </summary>
    public partial class LotGetRequest : ApiRequest
    {
        public LotGetRequest(LotUriParameters UriParameters, LotGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LotGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Lot
    /// </summary>
    public partial class LotPutRequest : ApiRequest
    {
        public LotPutRequest(LotUriParameters UriParameters, CreateLotDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateLotDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Lot
    /// </summary>
    public partial class LotPatchRequest : ApiRequest
    {
        public LotPatchRequest(LotUriParameters UriParameters, MergePatchLotDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchLotDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Lot
    /// </summary>
    public partial class LotDeleteRequest : ApiRequest
    {
        public LotDeleteRequest(LotUriParameters UriParameters, LotDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LotDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Lots
    /// </summary>
    public partial class LotsGetRequest : ApiRequest
    {
        public LotsGetRequest(LotsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LotsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LotsCount
    /// </summary>
    public partial class LotsCountGetRequest : ApiRequest
    {
        public LotsCountGetRequest(LotsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LotsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LotStateEvent
    /// </summary>
    public partial class LotStateEventGetRequest : ApiRequest
    {
        public LotStateEventGetRequest(LotStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LotHistoryState
    /// </summary>
    public partial class LotHistoryStateGetRequest : ApiRequest
    {
        public LotHistoryStateGetRequest(LotHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public LotHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Movement
    /// </summary>
    public partial class MovementGetRequest : ApiRequest
    {
        public MovementGetRequest(MovementUriParameters UriParameters, MovementGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Movement
    /// </summary>
    public partial class MovementPutRequest : ApiRequest
    {
        public MovementPutRequest(MovementUriParameters UriParameters, CreateMovementDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateMovementDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Movement
    /// </summary>
    public partial class MovementPatchRequest : ApiRequest
    {
        public MovementPatchRequest(MovementUriParameters UriParameters, MergePatchMovementDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchMovementDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Movement
    /// </summary>
    public partial class MovementDeleteRequest : ApiRequest
    {
        public MovementDeleteRequest(MovementUriParameters UriParameters, MovementDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Movements
    /// </summary>
    public partial class MovementsGetRequest : ApiRequest
    {
        public MovementsGetRequest(MovementsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementsCount
    /// </summary>
    public partial class MovementsCountGetRequest : ApiRequest
    {
        public MovementsCountGetRequest(MovementsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementStateEvent
    /// </summary>
    public partial class MovementStateEventGetRequest : ApiRequest
    {
        public MovementStateEventGetRequest(MovementStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementHistoryState
    /// </summary>
    public partial class MovementHistoryStateGetRequest : ApiRequest
    {
        public MovementHistoryStateGetRequest(MovementHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementLine
    /// </summary>
    public partial class MovementLineGetRequest : ApiRequest
    {
        public MovementLineGetRequest(MovementLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmation
    /// </summary>
    public partial class MovementConfirmationGetRequest : ApiRequest
    {
        public MovementConfirmationGetRequest(MovementConfirmationUriParameters UriParameters, MovementConfirmationGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementConfirmationGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class MovementConfirmation
    /// </summary>
    public partial class MovementConfirmationPutRequest : ApiRequest
    {
        public MovementConfirmationPutRequest(MovementConfirmationUriParameters UriParameters, CreateMovementConfirmationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateMovementConfirmationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class MovementConfirmation
    /// </summary>
    public partial class MovementConfirmationPatchRequest : ApiRequest
    {
        public MovementConfirmationPatchRequest(MovementConfirmationUriParameters UriParameters, MergePatchMovementConfirmationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchMovementConfirmationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class MovementConfirmation
    /// </summary>
    public partial class MovementConfirmationDeleteRequest : ApiRequest
    {
        public MovementConfirmationDeleteRequest(MovementConfirmationUriParameters UriParameters, MovementConfirmationDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementConfirmationDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmations
    /// </summary>
    public partial class MovementConfirmationsGetRequest : ApiRequest
    {
        public MovementConfirmationsGetRequest(MovementConfirmationsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementConfirmationsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmationsCount
    /// </summary>
    public partial class MovementConfirmationsCountGetRequest : ApiRequest
    {
        public MovementConfirmationsCountGetRequest(MovementConfirmationsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementConfirmationsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmationStateEvent
    /// </summary>
    public partial class MovementConfirmationStateEventGetRequest : ApiRequest
    {
        public MovementConfirmationStateEventGetRequest(MovementConfirmationStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmationHistoryState
    /// </summary>
    public partial class MovementConfirmationHistoryStateGetRequest : ApiRequest
    {
        public MovementConfirmationHistoryStateGetRequest(MovementConfirmationHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementConfirmationLine
    /// </summary>
    public partial class MovementConfirmationLineGetRequest : ApiRequest
    {
        public MovementConfirmationLineGetRequest(MovementConfirmationLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementConfirmationLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementType
    /// </summary>
    public partial class MovementTypeGetRequest : ApiRequest
    {
        public MovementTypeGetRequest(MovementTypeUriParameters UriParameters, MovementTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class MovementType
    /// </summary>
    public partial class MovementTypePutRequest : ApiRequest
    {
        public MovementTypePutRequest(MovementTypeUriParameters UriParameters, CreateMovementTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateMovementTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class MovementType
    /// </summary>
    public partial class MovementTypePatchRequest : ApiRequest
    {
        public MovementTypePatchRequest(MovementTypeUriParameters UriParameters, MergePatchMovementTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchMovementTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class MovementType
    /// </summary>
    public partial class MovementTypeDeleteRequest : ApiRequest
    {
        public MovementTypeDeleteRequest(MovementTypeUriParameters UriParameters, MovementTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypes
    /// </summary>
    public partial class MovementTypesGetRequest : ApiRequest
    {
        public MovementTypesGetRequest(MovementTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypesCount
    /// </summary>
    public partial class MovementTypesCountGetRequest : ApiRequest
    {
        public MovementTypesCountGetRequest(MovementTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public MovementTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypeStateEvent
    /// </summary>
    public partial class MovementTypeStateEventGetRequest : ApiRequest
    {
        public MovementTypeStateEventGetRequest(MovementTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class MovementTypeHistoryState
    /// </summary>
    public partial class MovementTypeHistoryStateGetRequest : ApiRequest
    {
        public MovementTypeHistoryStateGetRequest(MovementTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public MovementTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Order
    /// </summary>
    public partial class OrderGetRequest : ApiRequest
    {
        public OrderGetRequest(OrderUriParameters UriParameters, OrderGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Order
    /// </summary>
    public partial class OrderPutRequest : ApiRequest
    {
        public OrderPutRequest(OrderUriParameters UriParameters, CreateOrderDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Order
    /// </summary>
    public partial class OrderPatchRequest : ApiRequest
    {
        public OrderPatchRequest(OrderUriParameters UriParameters, MergePatchOrderDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Order
    /// </summary>
    public partial class OrderDeleteRequest : ApiRequest
    {
        public OrderDeleteRequest(OrderUriParameters UriParameters, OrderDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Orders
    /// </summary>
    public partial class OrdersGetRequest : ApiRequest
    {
        public OrdersGetRequest(OrdersGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrdersGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrdersCount
    /// </summary>
    public partial class OrdersCountGetRequest : ApiRequest
    {
        public OrdersCountGetRequest(OrdersCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrdersCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderStateEvent
    /// </summary>
    public partial class OrderStateEventGetRequest : ApiRequest
    {
        public OrderStateEventGetRequest(OrderStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderHistoryState
    /// </summary>
    public partial class OrderHistoryStateGetRequest : ApiRequest
    {
        public OrderHistoryStateGetRequest(OrderHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderRole
    /// </summary>
    public partial class OrderRoleGetRequest : ApiRequest
    {
        public OrderRoleGetRequest(OrderRoleUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItem
    /// </summary>
    public partial class OrderItemGetRequest : ApiRequest
    {
        public OrderItemGetRequest(OrderItemUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipGroup
    /// </summary>
    public partial class OrderShipGroupGetRequest : ApiRequest
    {
        public OrderShipGroupGetRequest(OrderShipGroupUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGroupAssociation
    /// </summary>
    public partial class OrderItemShipGroupAssociationGetRequest : ApiRequest
    {
        public OrderItemShipGroupAssociationGetRequest(OrderItemShipGroupAssociationUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGroupAssociationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGrpInvReservation
    /// </summary>
    public partial class OrderItemShipGrpInvReservationGetRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationGetRequest(OrderItemShipGrpInvReservationUriParameters UriParameters, OrderItemShipGrpInvReservationGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemShipGrpInvReservationGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrderItemShipGrpInvReservation
    /// </summary>
    public partial class OrderItemShipGrpInvReservationPutRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationPutRequest(OrderItemShipGrpInvReservationUriParameters UriParameters, CreateOrderItemShipGrpInvReservationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderItemShipGrpInvReservationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrderItemShipGrpInvReservation
    /// </summary>
    public partial class OrderItemShipGrpInvReservationPatchRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationPatchRequest(OrderItemShipGrpInvReservationUriParameters UriParameters, MergePatchOrderItemShipGrpInvReservationDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderItemShipGrpInvReservationDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrderItemShipGrpInvReservation
    /// </summary>
    public partial class OrderItemShipGrpInvReservationDeleteRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationDeleteRequest(OrderItemShipGrpInvReservationUriParameters UriParameters, OrderItemShipGrpInvReservationDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemShipGrpInvReservationDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGrpInvReservations
    /// </summary>
    public partial class OrderItemShipGrpInvReservationsGetRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationsGetRequest(OrderItemShipGrpInvReservationsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemShipGrpInvReservationsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGrpInvReservationsCount
    /// </summary>
    public partial class OrderItemShipGrpInvReservationsCountGetRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationsCountGetRequest(OrderItemShipGrpInvReservationsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderItemShipGrpInvReservationsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGrpInvReservationStateEvent
    /// </summary>
    public partial class OrderItemShipGrpInvReservationStateEventGetRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationStateEventGetRequest(OrderItemShipGrpInvReservationStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderItemShipGrpInvReservationHistoryState
    /// </summary>
    public partial class OrderItemShipGrpInvReservationHistoryStateGetRequest : ApiRequest
    {
        public OrderItemShipGrpInvReservationHistoryStateGetRequest(OrderItemShipGrpInvReservationHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderItemShipGrpInvReservationHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipment
    /// </summary>
    public partial class OrderShipmentGetRequest : ApiRequest
    {
        public OrderShipmentGetRequest(OrderShipmentUriParameters UriParameters, OrderShipmentGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrderShipment
    /// </summary>
    public partial class OrderShipmentPutRequest : ApiRequest
    {
        public OrderShipmentPutRequest(OrderShipmentUriParameters UriParameters, CreateOrderShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrderShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrderShipment
    /// </summary>
    public partial class OrderShipmentPatchRequest : ApiRequest
    {
        public OrderShipmentPatchRequest(OrderShipmentUriParameters UriParameters, MergePatchOrderShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrderShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrderShipment
    /// </summary>
    public partial class OrderShipmentDeleteRequest : ApiRequest
    {
        public OrderShipmentDeleteRequest(OrderShipmentUriParameters UriParameters, OrderShipmentDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipments
    /// </summary>
    public partial class OrderShipmentsGetRequest : ApiRequest
    {
        public OrderShipmentsGetRequest(OrderShipmentsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentsCount
    /// </summary>
    public partial class OrderShipmentsCountGetRequest : ApiRequest
    {
        public OrderShipmentsCountGetRequest(OrderShipmentsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrderShipmentsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentStateEvent
    /// </summary>
    public partial class OrderShipmentStateEventGetRequest : ApiRequest
    {
        public OrderShipmentStateEventGetRequest(OrderShipmentStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrderShipmentHistoryState
    /// </summary>
    public partial class OrderShipmentHistoryStateGetRequest : ApiRequest
    {
        public OrderShipmentHistoryStateGetRequest(OrderShipmentHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrderShipmentHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureGetRequest : ApiRequest
    {
        public OrganizationStructureGetRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePutRequest : ApiRequest
    {
        public OrganizationStructurePutRequest(OrganizationStructureUriParameters UriParameters, CreateOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructurePatchRequest : ApiRequest
    {
        public OrganizationStructurePatchRequest(OrganizationStructureUriParameters UriParameters, MergePatchOrganizationStructureDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructure
    /// </summary>
    public partial class OrganizationStructureDeleteRequest : ApiRequest
    {
        public OrganizationStructureDeleteRequest(OrganizationStructureUriParameters UriParameters, OrganizationStructureDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructures
    /// </summary>
    public partial class OrganizationStructuresGetRequest : ApiRequest
    {
        public OrganizationStructuresGetRequest(OrganizationStructuresGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructuresCount
    /// </summary>
    public partial class OrganizationStructuresCountGetRequest : ApiRequest
    {
        public OrganizationStructuresCountGetRequest(OrganizationStructuresCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructuresCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureStateEvent
    /// </summary>
    public partial class OrganizationStructureStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureStateEventGetRequest(OrganizationStructureStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureHistoryState
    /// </summary>
    public partial class OrganizationStructureHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureHistoryStateGetRequest(OrganizationStructureHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeGetRequest : ApiRequest
    {
        public OrganizationStructureTypeGetRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePutRequest : ApiRequest
    {
        public OrganizationStructureTypePutRequest(OrganizationStructureTypeUriParameters UriParameters, CreateOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypePatchRequest : ApiRequest
    {
        public OrganizationStructureTypePatchRequest(OrganizationStructureTypeUriParameters UriParameters, MergePatchOrganizationStructureTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchOrganizationStructureTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class OrganizationStructureType
    /// </summary>
    public partial class OrganizationStructureTypeDeleteRequest : ApiRequest
    {
        public OrganizationStructureTypeDeleteRequest(OrganizationStructureTypeUriParameters UriParameters, OrganizationStructureTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypes
    /// </summary>
    public partial class OrganizationStructureTypesGetRequest : ApiRequest
    {
        public OrganizationStructureTypesGetRequest(OrganizationStructureTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypesCount
    /// </summary>
    public partial class OrganizationStructureTypesCountGetRequest : ApiRequest
    {
        public OrganizationStructureTypesCountGetRequest(OrganizationStructureTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationStructureTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>
    public partial class OrganizationStructureTypeStateEventGetRequest : ApiRequest
    {
        public OrganizationStructureTypeStateEventGetRequest(OrganizationStructureTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>
    public partial class OrganizationStructureTypeHistoryStateGetRequest : ApiRequest
    {
        public OrganizationStructureTypeHistoryStateGetRequest(OrganizationStructureTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public OrganizationStructureTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Party
    /// </summary>
    public partial class PartyGetRequest : ApiRequest
    {
        public PartyGetRequest(PartyUriParameters UriParameters, PartyGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Party
    /// </summary>
    public partial class PartyPutRequest : ApiRequest
    {
        public PartyPutRequest(PartyUriParameters UriParameters, CreatePartyDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePartyDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Party
    /// </summary>
    public partial class PartyPatchRequest : ApiRequest
    {
        public PartyPatchRequest(PartyUriParameters UriParameters, MergePatchPartyDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPartyDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Party
    /// </summary>
    public partial class PartyDeleteRequest : ApiRequest
    {
        public PartyDeleteRequest(PartyUriParameters UriParameters, PartyDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Parties
    /// </summary>
    public partial class PartiesGetRequest : ApiRequest
    {
        public PartiesGetRequest(PartiesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartiesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartiesCount
    /// </summary>
    public partial class PartiesCountGetRequest : ApiRequest
    {
        public PartiesCountGetRequest(PartiesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartiesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyStateEvent
    /// </summary>
    public partial class PartyStateEventGetRequest : ApiRequest
    {
        public PartyStateEventGetRequest(PartyStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyHistoryState
    /// </summary>
    public partial class PartyHistoryStateGetRequest : ApiRequest
    {
        public PartyHistoryStateGetRequest(PartyHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyRole
    /// </summary>
    public partial class PartyRoleGetRequest : ApiRequest
    {
        public PartyRoleGetRequest(PartyRoleUriParameters UriParameters, PartyRoleGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyRoleGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class PartyRole
    /// </summary>
    public partial class PartyRolePutRequest : ApiRequest
    {
        public PartyRolePutRequest(PartyRoleUriParameters UriParameters, CreatePartyRoleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePartyRoleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class PartyRole
    /// </summary>
    public partial class PartyRolePatchRequest : ApiRequest
    {
        public PartyRolePatchRequest(PartyRoleUriParameters UriParameters, MergePatchPartyRoleDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPartyRoleDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class PartyRole
    /// </summary>
    public partial class PartyRoleDeleteRequest : ApiRequest
    {
        public PartyRoleDeleteRequest(PartyRoleUriParameters UriParameters, PartyRoleDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyRoleDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyRoles
    /// </summary>
    public partial class PartyRolesGetRequest : ApiRequest
    {
        public PartyRolesGetRequest(PartyRolesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyRolesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyRolesCount
    /// </summary>
    public partial class PartyRolesCountGetRequest : ApiRequest
    {
        public PartyRolesCountGetRequest(PartyRolesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PartyRolesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyRoleStateEvent
    /// </summary>
    public partial class PartyRoleStateEventGetRequest : ApiRequest
    {
        public PartyRoleStateEventGetRequest(PartyRoleStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PartyRoleHistoryState
    /// </summary>
    public partial class PartyRoleHistoryStateGetRequest : ApiRequest
    {
        public PartyRoleHistoryStateGetRequest(PartyRoleHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PartyRoleHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventory
    /// </summary>
    public partial class PhysicalInventoryGetRequest : ApiRequest
    {
        public PhysicalInventoryGetRequest(PhysicalInventoryUriParameters UriParameters, PhysicalInventoryGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PhysicalInventoryGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class PhysicalInventory
    /// </summary>
    public partial class PhysicalInventoryPutRequest : ApiRequest
    {
        public PhysicalInventoryPutRequest(PhysicalInventoryUriParameters UriParameters, CreatePhysicalInventoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePhysicalInventoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class PhysicalInventory
    /// </summary>
    public partial class PhysicalInventoryPatchRequest : ApiRequest
    {
        public PhysicalInventoryPatchRequest(PhysicalInventoryUriParameters UriParameters, MergePatchPhysicalInventoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPhysicalInventoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class PhysicalInventory
    /// </summary>
    public partial class PhysicalInventoryDeleteRequest : ApiRequest
    {
        public PhysicalInventoryDeleteRequest(PhysicalInventoryUriParameters UriParameters, PhysicalInventoryDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PhysicalInventoryDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventories
    /// </summary>
    public partial class PhysicalInventoriesGetRequest : ApiRequest
    {
        public PhysicalInventoriesGetRequest(PhysicalInventoriesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PhysicalInventoriesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventoriesCount
    /// </summary>
    public partial class PhysicalInventoriesCountGetRequest : ApiRequest
    {
        public PhysicalInventoriesCountGetRequest(PhysicalInventoriesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PhysicalInventoriesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventoryStateEvent
    /// </summary>
    public partial class PhysicalInventoryStateEventGetRequest : ApiRequest
    {
        public PhysicalInventoryStateEventGetRequest(PhysicalInventoryStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventoryHistoryState
    /// </summary>
    public partial class PhysicalInventoryHistoryStateGetRequest : ApiRequest
    {
        public PhysicalInventoryHistoryStateGetRequest(PhysicalInventoryHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PhysicalInventoryLine
    /// </summary>
    public partial class PhysicalInventoryLineGetRequest : ApiRequest
    {
        public PhysicalInventoryLineGetRequest(PhysicalInventoryLineUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PhysicalInventoryLineUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Picklist
    /// </summary>
    public partial class PicklistGetRequest : ApiRequest
    {
        public PicklistGetRequest(PicklistUriParameters UriParameters, PicklistGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Picklist
    /// </summary>
    public partial class PicklistPutRequest : ApiRequest
    {
        public PicklistPutRequest(PicklistUriParameters UriParameters, CreatePicklistDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePicklistDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Picklist
    /// </summary>
    public partial class PicklistPatchRequest : ApiRequest
    {
        public PicklistPatchRequest(PicklistUriParameters UriParameters, MergePatchPicklistDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPicklistDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Picklist
    /// </summary>
    public partial class PicklistDeleteRequest : ApiRequest
    {
        public PicklistDeleteRequest(PicklistUriParameters UriParameters, PicklistDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Picklists
    /// </summary>
    public partial class PicklistsGetRequest : ApiRequest
    {
        public PicklistsGetRequest(PicklistsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistsCount
    /// </summary>
    public partial class PicklistsCountGetRequest : ApiRequest
    {
        public PicklistsCountGetRequest(PicklistsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistStateEvent
    /// </summary>
    public partial class PicklistStateEventGetRequest : ApiRequest
    {
        public PicklistStateEventGetRequest(PicklistStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistHistoryState
    /// </summary>
    public partial class PicklistHistoryStateGetRequest : ApiRequest
    {
        public PicklistHistoryStateGetRequest(PicklistHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistRole
    /// </summary>
    public partial class PicklistRoleGetRequest : ApiRequest
    {
        public PicklistRoleGetRequest(PicklistRoleUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistRoleUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistBin
    /// </summary>
    public partial class PicklistBinGetRequest : ApiRequest
    {
        public PicklistBinGetRequest(PicklistBinUriParameters UriParameters, PicklistBinGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistBinGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class PicklistBin
    /// </summary>
    public partial class PicklistBinPutRequest : ApiRequest
    {
        public PicklistBinPutRequest(PicklistBinUriParameters UriParameters, CreatePicklistBinDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePicklistBinDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class PicklistBin
    /// </summary>
    public partial class PicklistBinPatchRequest : ApiRequest
    {
        public PicklistBinPatchRequest(PicklistBinUriParameters UriParameters, MergePatchPicklistBinDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPicklistBinDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class PicklistBin
    /// </summary>
    public partial class PicklistBinDeleteRequest : ApiRequest
    {
        public PicklistBinDeleteRequest(PicklistBinUriParameters UriParameters, PicklistBinDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistBinDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistBins
    /// </summary>
    public partial class PicklistBinsGetRequest : ApiRequest
    {
        public PicklistBinsGetRequest(PicklistBinsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistBinsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistBinsCount
    /// </summary>
    public partial class PicklistBinsCountGetRequest : ApiRequest
    {
        public PicklistBinsCountGetRequest(PicklistBinsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PicklistBinsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistBinStateEvent
    /// </summary>
    public partial class PicklistBinStateEventGetRequest : ApiRequest
    {
        public PicklistBinStateEventGetRequest(PicklistBinStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistBinHistoryState
    /// </summary>
    public partial class PicklistBinHistoryStateGetRequest : ApiRequest
    {
        public PicklistBinHistoryStateGetRequest(PicklistBinHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistBinHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PicklistItem
    /// </summary>
    public partial class PicklistItemGetRequest : ApiRequest
    {
        public PicklistItemGetRequest(PicklistItemUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PicklistItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Pickwave
    /// </summary>
    public partial class PickwaveGetRequest : ApiRequest
    {
        public PickwaveGetRequest(PickwaveUriParameters UriParameters, PickwaveGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PickwaveGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Pickwave
    /// </summary>
    public partial class PickwavePutRequest : ApiRequest
    {
        public PickwavePutRequest(PickwaveUriParameters UriParameters, CreatePickwaveDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreatePickwaveDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Pickwave
    /// </summary>
    public partial class PickwavePatchRequest : ApiRequest
    {
        public PickwavePatchRequest(PickwaveUriParameters UriParameters, MergePatchPickwaveDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchPickwaveDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Pickwave
    /// </summary>
    public partial class PickwaveDeleteRequest : ApiRequest
    {
        public PickwaveDeleteRequest(PickwaveUriParameters UriParameters, PickwaveDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PickwaveDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Pickwaves
    /// </summary>
    public partial class PickwavesGetRequest : ApiRequest
    {
        public PickwavesGetRequest(PickwavesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PickwavesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PickwavesCount
    /// </summary>
    public partial class PickwavesCountGetRequest : ApiRequest
    {
        public PickwavesCountGetRequest(PickwavesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public PickwavesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PickwaveStateEvent
    /// </summary>
    public partial class PickwaveStateEventGetRequest : ApiRequest
    {
        public PickwaveStateEventGetRequest(PickwaveStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class PickwaveHistoryState
    /// </summary>
    public partial class PickwaveHistoryStateGetRequest : ApiRequest
    {
        public PickwaveHistoryStateGetRequest(PickwaveHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public PickwaveHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Product
    /// </summary>
    public partial class ProductGetRequest : ApiRequest
    {
        public ProductGetRequest(ProductUriParameters UriParameters, ProductGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Product
    /// </summary>
    public partial class ProductPutRequest : ApiRequest
    {
        public ProductPutRequest(ProductUriParameters UriParameters, CreateProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Product
    /// </summary>
    public partial class ProductPatchRequest : ApiRequest
    {
        public ProductPatchRequest(ProductUriParameters UriParameters, MergePatchProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Product
    /// </summary>
    public partial class ProductDeleteRequest : ApiRequest
    {
        public ProductDeleteRequest(ProductUriParameters UriParameters, ProductDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Products
    /// </summary>
    public partial class ProductsGetRequest : ApiRequest
    {
        public ProductsGetRequest(ProductsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductsCount
    /// </summary>
    public partial class ProductsCountGetRequest : ApiRequest
    {
        public ProductsCountGetRequest(ProductsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductStateEvent
    /// </summary>
    public partial class ProductStateEventGetRequest : ApiRequest
    {
        public ProductStateEventGetRequest(ProductStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductHistoryState
    /// </summary>
    public partial class ProductHistoryStateGetRequest : ApiRequest
    {
        public ProductHistoryStateGetRequest(ProductHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class GoodIdentification
    /// </summary>
    public partial class GoodIdentificationGetRequest : ApiRequest
    {
        public GoodIdentificationGetRequest(GoodIdentificationUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public GoodIdentificationUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategory
    /// </summary>
    public partial class ProductCategoryGetRequest : ApiRequest
    {
        public ProductCategoryGetRequest(ProductCategoryUriParameters UriParameters, ProductCategoryGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ProductCategory
    /// </summary>
    public partial class ProductCategoryPutRequest : ApiRequest
    {
        public ProductCategoryPutRequest(ProductCategoryUriParameters UriParameters, CreateProductCategoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateProductCategoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ProductCategory
    /// </summary>
    public partial class ProductCategoryPatchRequest : ApiRequest
    {
        public ProductCategoryPatchRequest(ProductCategoryUriParameters UriParameters, MergePatchProductCategoryDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchProductCategoryDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ProductCategory
    /// </summary>
    public partial class ProductCategoryDeleteRequest : ApiRequest
    {
        public ProductCategoryDeleteRequest(ProductCategoryUriParameters UriParameters, ProductCategoryDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategories
    /// </summary>
    public partial class ProductCategoriesGetRequest : ApiRequest
    {
        public ProductCategoriesGetRequest(ProductCategoriesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoriesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoriesCount
    /// </summary>
    public partial class ProductCategoriesCountGetRequest : ApiRequest
    {
        public ProductCategoriesCountGetRequest(ProductCategoriesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoriesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryStateEvent
    /// </summary>
    public partial class ProductCategoryStateEventGetRequest : ApiRequest
    {
        public ProductCategoryStateEventGetRequest(ProductCategoryStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryHistoryState
    /// </summary>
    public partial class ProductCategoryHistoryStateGetRequest : ApiRequest
    {
        public ProductCategoryHistoryStateGetRequest(ProductCategoryHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryMember
    /// </summary>
    public partial class ProductCategoryMemberGetRequest : ApiRequest
    {
        public ProductCategoryMemberGetRequest(ProductCategoryMemberUriParameters UriParameters, ProductCategoryMemberGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryMemberGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ProductCategoryMember
    /// </summary>
    public partial class ProductCategoryMemberPutRequest : ApiRequest
    {
        public ProductCategoryMemberPutRequest(ProductCategoryMemberUriParameters UriParameters, CreateProductCategoryMemberDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateProductCategoryMemberDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ProductCategoryMember
    /// </summary>
    public partial class ProductCategoryMemberPatchRequest : ApiRequest
    {
        public ProductCategoryMemberPatchRequest(ProductCategoryMemberUriParameters UriParameters, MergePatchProductCategoryMemberDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchProductCategoryMemberDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ProductCategoryMember
    /// </summary>
    public partial class ProductCategoryMemberDeleteRequest : ApiRequest
    {
        public ProductCategoryMemberDeleteRequest(ProductCategoryMemberUriParameters UriParameters, ProductCategoryMemberDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryMemberDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryMembers
    /// </summary>
    public partial class ProductCategoryMembersGetRequest : ApiRequest
    {
        public ProductCategoryMembersGetRequest(ProductCategoryMembersGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryMembersGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryMembersCount
    /// </summary>
    public partial class ProductCategoryMembersCountGetRequest : ApiRequest
    {
        public ProductCategoryMembersCountGetRequest(ProductCategoryMembersCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ProductCategoryMembersCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryMemberStateEvent
    /// </summary>
    public partial class ProductCategoryMemberStateEventGetRequest : ApiRequest
    {
        public ProductCategoryMemberStateEventGetRequest(ProductCategoryMemberStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ProductCategoryMemberHistoryState
    /// </summary>
    public partial class ProductCategoryMemberHistoryStateGetRequest : ApiRequest
    {
        public ProductCategoryMemberHistoryStateGetRequest(ProductCategoryMemberHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ProductCategoryMemberHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RejectionReason
    /// </summary>
    public partial class RejectionReasonGetRequest : ApiRequest
    {
        public RejectionReasonGetRequest(RejectionReasonUriParameters UriParameters, RejectionReasonGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RejectionReasonGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class RejectionReason
    /// </summary>
    public partial class RejectionReasonPutRequest : ApiRequest
    {
        public RejectionReasonPutRequest(RejectionReasonUriParameters UriParameters, CreateRejectionReasonDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateRejectionReasonDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class RejectionReason
    /// </summary>
    public partial class RejectionReasonPatchRequest : ApiRequest
    {
        public RejectionReasonPatchRequest(RejectionReasonUriParameters UriParameters, MergePatchRejectionReasonDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchRejectionReasonDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class RejectionReason
    /// </summary>
    public partial class RejectionReasonDeleteRequest : ApiRequest
    {
        public RejectionReasonDeleteRequest(RejectionReasonUriParameters UriParameters, RejectionReasonDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RejectionReasonDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RejectionReasons
    /// </summary>
    public partial class RejectionReasonsGetRequest : ApiRequest
    {
        public RejectionReasonsGetRequest(RejectionReasonsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RejectionReasonsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RejectionReasonsCount
    /// </summary>
    public partial class RejectionReasonsCountGetRequest : ApiRequest
    {
        public RejectionReasonsCountGetRequest(RejectionReasonsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RejectionReasonsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RejectionReasonStateEvent
    /// </summary>
    public partial class RejectionReasonStateEventGetRequest : ApiRequest
    {
        public RejectionReasonStateEventGetRequest(RejectionReasonStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RejectionReasonHistoryState
    /// </summary>
    public partial class RejectionReasonHistoryStateGetRequest : ApiRequest
    {
        public RejectionReasonHistoryStateGetRequest(RejectionReasonHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RejectionReasonHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RoleType
    /// </summary>
    public partial class RoleTypeGetRequest : ApiRequest
    {
        public RoleTypeGetRequest(RoleTypeUriParameters UriParameters, RoleTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RoleTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class RoleType
    /// </summary>
    public partial class RoleTypePutRequest : ApiRequest
    {
        public RoleTypePutRequest(RoleTypeUriParameters UriParameters, CreateRoleTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateRoleTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class RoleType
    /// </summary>
    public partial class RoleTypePatchRequest : ApiRequest
    {
        public RoleTypePatchRequest(RoleTypeUriParameters UriParameters, MergePatchRoleTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchRoleTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class RoleType
    /// </summary>
    public partial class RoleTypeDeleteRequest : ApiRequest
    {
        public RoleTypeDeleteRequest(RoleTypeUriParameters UriParameters, RoleTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RoleTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RoleTypes
    /// </summary>
    public partial class RoleTypesGetRequest : ApiRequest
    {
        public RoleTypesGetRequest(RoleTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RoleTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RoleTypesCount
    /// </summary>
    public partial class RoleTypesCountGetRequest : ApiRequest
    {
        public RoleTypesCountGetRequest(RoleTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public RoleTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RoleTypeStateEvent
    /// </summary>
    public partial class RoleTypeStateEventGetRequest : ApiRequest
    {
        public RoleTypeStateEventGetRequest(RoleTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class RoleTypeHistoryState
    /// </summary>
    public partial class RoleTypeHistoryStateGetRequest : ApiRequest
    {
        public RoleTypeHistoryStateGetRequest(RoleTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public RoleTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemGetRequest : ApiRequest
    {
        public SellableInventoryItemGetRequest(SellableInventoryItemUriParameters UriParameters, SellableInventoryItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemPutRequest : ApiRequest
    {
        public SellableInventoryItemPutRequest(SellableInventoryItemUriParameters UriParameters, CreateSellableInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateSellableInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemPatchRequest : ApiRequest
    {
        public SellableInventoryItemPatchRequest(SellableInventoryItemUriParameters UriParameters, MergePatchSellableInventoryItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchSellableInventoryItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class SellableInventoryItem
    /// </summary>
    public partial class SellableInventoryItemDeleteRequest : ApiRequest
    {
        public SellableInventoryItemDeleteRequest(SellableInventoryItemUriParameters UriParameters, SellableInventoryItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItems
    /// </summary>
    public partial class SellableInventoryItemsGetRequest : ApiRequest
    {
        public SellableInventoryItemsGetRequest(SellableInventoryItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemsCount
    /// </summary>
    public partial class SellableInventoryItemsCountGetRequest : ApiRequest
    {
        public SellableInventoryItemsCountGetRequest(SellableInventoryItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SellableInventoryItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemStateEvent
    /// </summary>
    public partial class SellableInventoryItemStateEventGetRequest : ApiRequest
    {
        public SellableInventoryItemStateEventGetRequest(SellableInventoryItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemHistoryState
    /// </summary>
    public partial class SellableInventoryItemHistoryStateGetRequest : ApiRequest
    {
        public SellableInventoryItemHistoryStateGetRequest(SellableInventoryItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SellableInventoryItemEntry
    /// </summary>
    public partial class SellableInventoryItemEntryGetRequest : ApiRequest
    {
        public SellableInventoryItemEntryGetRequest(SellableInventoryItemEntryUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SellableInventoryItemEntryUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Shipment
    /// </summary>
    public partial class ShipmentGetRequest : ApiRequest
    {
        public ShipmentGetRequest(ShipmentUriParameters UriParameters, ShipmentGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Shipment
    /// </summary>
    public partial class ShipmentPutRequest : ApiRequest
    {
        public ShipmentPutRequest(ShipmentUriParameters UriParameters, CreateShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Shipment
    /// </summary>
    public partial class ShipmentPatchRequest : ApiRequest
    {
        public ShipmentPatchRequest(ShipmentUriParameters UriParameters, MergePatchShipmentDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Shipment
    /// </summary>
    public partial class ShipmentDeleteRequest : ApiRequest
    {
        public ShipmentDeleteRequest(ShipmentUriParameters UriParameters, ShipmentDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Shipments
    /// </summary>
    public partial class ShipmentsGetRequest : ApiRequest
    {
        public ShipmentsGetRequest(ShipmentsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentsCount
    /// </summary>
    public partial class ShipmentsCountGetRequest : ApiRequest
    {
        public ShipmentsCountGetRequest(ShipmentsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentStateEvent
    /// </summary>
    public partial class ShipmentStateEventGetRequest : ApiRequest
    {
        public ShipmentStateEventGetRequest(ShipmentStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentHistoryState
    /// </summary>
    public partial class ShipmentHistoryStateGetRequest : ApiRequest
    {
        public ShipmentHistoryStateGetRequest(ShipmentHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentImage
    /// </summary>
    public partial class ShipmentImageGetRequest : ApiRequest
    {
        public ShipmentImageGetRequest(ShipmentImageUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentImageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentItem
    /// </summary>
    public partial class ShipmentItemGetRequest : ApiRequest
    {
        public ShipmentItemGetRequest(ShipmentItemUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentReceipt
    /// </summary>
    public partial class ShipmentReceiptGetRequest : ApiRequest
    {
        public ShipmentReceiptGetRequest(ShipmentReceiptUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentReceiptUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentReceiptImage
    /// </summary>
    public partial class ShipmentReceiptImageGetRequest : ApiRequest
    {
        public ShipmentReceiptImageGetRequest(ShipmentReceiptImageUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentReceiptImageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ItemIssuance
    /// </summary>
    public partial class ItemIssuanceGetRequest : ApiRequest
    {
        public ItemIssuanceGetRequest(ItemIssuanceUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ItemIssuanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentMethodType
    /// </summary>
    public partial class ShipmentMethodTypeGetRequest : ApiRequest
    {
        public ShipmentMethodTypeGetRequest(ShipmentMethodTypeUriParameters UriParameters, ShipmentMethodTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentMethodTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ShipmentMethodType
    /// </summary>
    public partial class ShipmentMethodTypePutRequest : ApiRequest
    {
        public ShipmentMethodTypePutRequest(ShipmentMethodTypeUriParameters UriParameters, CreateShipmentMethodTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentMethodTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ShipmentMethodType
    /// </summary>
    public partial class ShipmentMethodTypePatchRequest : ApiRequest
    {
        public ShipmentMethodTypePatchRequest(ShipmentMethodTypeUriParameters UriParameters, MergePatchShipmentMethodTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentMethodTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ShipmentMethodType
    /// </summary>
    public partial class ShipmentMethodTypeDeleteRequest : ApiRequest
    {
        public ShipmentMethodTypeDeleteRequest(ShipmentMethodTypeUriParameters UriParameters, ShipmentMethodTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentMethodTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentMethodTypes
    /// </summary>
    public partial class ShipmentMethodTypesGetRequest : ApiRequest
    {
        public ShipmentMethodTypesGetRequest(ShipmentMethodTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentMethodTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentMethodTypesCount
    /// </summary>
    public partial class ShipmentMethodTypesCountGetRequest : ApiRequest
    {
        public ShipmentMethodTypesCountGetRequest(ShipmentMethodTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentMethodTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentMethodTypeStateEvent
    /// </summary>
    public partial class ShipmentMethodTypeStateEventGetRequest : ApiRequest
    {
        public ShipmentMethodTypeStateEventGetRequest(ShipmentMethodTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentMethodTypeHistoryState
    /// </summary>
    public partial class ShipmentMethodTypeHistoryStateGetRequest : ApiRequest
    {
        public ShipmentMethodTypeHistoryStateGetRequest(ShipmentMethodTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentMethodTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackage
    /// </summary>
    public partial class ShipmentPackageGetRequest : ApiRequest
    {
        public ShipmentPackageGetRequest(ShipmentPackageUriParameters UriParameters, ShipmentPackageGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentPackageGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ShipmentPackage
    /// </summary>
    public partial class ShipmentPackagePutRequest : ApiRequest
    {
        public ShipmentPackagePutRequest(ShipmentPackageUriParameters UriParameters, CreateShipmentPackageDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentPackageDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ShipmentPackage
    /// </summary>
    public partial class ShipmentPackagePatchRequest : ApiRequest
    {
        public ShipmentPackagePatchRequest(ShipmentPackageUriParameters UriParameters, MergePatchShipmentPackageDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentPackageDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ShipmentPackage
    /// </summary>
    public partial class ShipmentPackageDeleteRequest : ApiRequest
    {
        public ShipmentPackageDeleteRequest(ShipmentPackageUriParameters UriParameters, ShipmentPackageDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentPackageDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackages
    /// </summary>
    public partial class ShipmentPackagesGetRequest : ApiRequest
    {
        public ShipmentPackagesGetRequest(ShipmentPackagesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentPackagesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackagesCount
    /// </summary>
    public partial class ShipmentPackagesCountGetRequest : ApiRequest
    {
        public ShipmentPackagesCountGetRequest(ShipmentPackagesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentPackagesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackageStateEvent
    /// </summary>
    public partial class ShipmentPackageStateEventGetRequest : ApiRequest
    {
        public ShipmentPackageStateEventGetRequest(ShipmentPackageStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackageHistoryState
    /// </summary>
    public partial class ShipmentPackageHistoryStateGetRequest : ApiRequest
    {
        public ShipmentPackageHistoryStateGetRequest(ShipmentPackageHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentPackageContent
    /// </summary>
    public partial class ShipmentPackageContentGetRequest : ApiRequest
    {
        public ShipmentPackageContentGetRequest(ShipmentPackageContentUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentPackageContentUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentType
    /// </summary>
    public partial class ShipmentTypeGetRequest : ApiRequest
    {
        public ShipmentTypeGetRequest(ShipmentTypeUriParameters UriParameters, ShipmentTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class ShipmentType
    /// </summary>
    public partial class ShipmentTypePutRequest : ApiRequest
    {
        public ShipmentTypePutRequest(ShipmentTypeUriParameters UriParameters, CreateShipmentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateShipmentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class ShipmentType
    /// </summary>
    public partial class ShipmentTypePatchRequest : ApiRequest
    {
        public ShipmentTypePatchRequest(ShipmentTypeUriParameters UriParameters, MergePatchShipmentTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchShipmentTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class ShipmentType
    /// </summary>
    public partial class ShipmentTypeDeleteRequest : ApiRequest
    {
        public ShipmentTypeDeleteRequest(ShipmentTypeUriParameters UriParameters, ShipmentTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypes
    /// </summary>
    public partial class ShipmentTypesGetRequest : ApiRequest
    {
        public ShipmentTypesGetRequest(ShipmentTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypesCount
    /// </summary>
    public partial class ShipmentTypesCountGetRequest : ApiRequest
    {
        public ShipmentTypesCountGetRequest(ShipmentTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public ShipmentTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypeStateEvent
    /// </summary>
    public partial class ShipmentTypeStateEventGetRequest : ApiRequest
    {
        public ShipmentTypeStateEventGetRequest(ShipmentTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class ShipmentTypeHistoryState
    /// </summary>
    public partial class ShipmentTypeHistoryStateGetRequest : ApiRequest
    {
        public ShipmentTypeHistoryStateGetRequest(ShipmentTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public ShipmentTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItem
    /// </summary>
    public partial class StatusItemGetRequest : ApiRequest
    {
        public StatusItemGetRequest(StatusItemUriParameters UriParameters, StatusItemGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class StatusItem
    /// </summary>
    public partial class StatusItemPutRequest : ApiRequest
    {
        public StatusItemPutRequest(StatusItemUriParameters UriParameters, CreateStatusItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateStatusItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class StatusItem
    /// </summary>
    public partial class StatusItemPatchRequest : ApiRequest
    {
        public StatusItemPatchRequest(StatusItemUriParameters UriParameters, MergePatchStatusItemDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchStatusItemDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class StatusItem
    /// </summary>
    public partial class StatusItemDeleteRequest : ApiRequest
    {
        public StatusItemDeleteRequest(StatusItemUriParameters UriParameters, StatusItemDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItems
    /// </summary>
    public partial class StatusItemsGetRequest : ApiRequest
    {
        public StatusItemsGetRequest(StatusItemsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemsCount
    /// </summary>
    public partial class StatusItemsCountGetRequest : ApiRequest
    {
        public StatusItemsCountGetRequest(StatusItemsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public StatusItemsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemStateEvent
    /// </summary>
    public partial class StatusItemStateEventGetRequest : ApiRequest
    {
        public StatusItemStateEventGetRequest(StatusItemStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class StatusItemHistoryState
    /// </summary>
    public partial class StatusItemHistoryStateGetRequest : ApiRequest
    {
        public StatusItemHistoryStateGetRequest(StatusItemHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public StatusItemHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProduct
    /// </summary>
    public partial class SupplierProductGetRequest : ApiRequest
    {
        public SupplierProductGetRequest(SupplierProductUriParameters UriParameters, SupplierProductGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class SupplierProduct
    /// </summary>
    public partial class SupplierProductPutRequest : ApiRequest
    {
        public SupplierProductPutRequest(SupplierProductUriParameters UriParameters, CreateSupplierProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateSupplierProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class SupplierProduct
    /// </summary>
    public partial class SupplierProductPatchRequest : ApiRequest
    {
        public SupplierProductPatchRequest(SupplierProductUriParameters UriParameters, MergePatchSupplierProductDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchSupplierProductDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class SupplierProduct
    /// </summary>
    public partial class SupplierProductDeleteRequest : ApiRequest
    {
        public SupplierProductDeleteRequest(SupplierProductUriParameters UriParameters, SupplierProductDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProducts
    /// </summary>
    public partial class SupplierProductsGetRequest : ApiRequest
    {
        public SupplierProductsGetRequest(SupplierProductsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductsCount
    /// </summary>
    public partial class SupplierProductsCountGetRequest : ApiRequest
    {
        public SupplierProductsCountGetRequest(SupplierProductsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public SupplierProductsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductStateEvent
    /// </summary>
    public partial class SupplierProductStateEventGetRequest : ApiRequest
    {
        public SupplierProductStateEventGetRequest(SupplierProductStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class SupplierProductHistoryState
    /// </summary>
    public partial class SupplierProductHistoryStateGetRequest : ApiRequest
    {
        public SupplierProductHistoryStateGetRequest(SupplierProductHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public SupplierProductHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Uom
    /// </summary>
    public partial class UomGetRequest : ApiRequest
    {
        public UomGetRequest(UomUriParameters UriParameters, UomGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Uom
    /// </summary>
    public partial class UomPutRequest : ApiRequest
    {
        public UomPutRequest(UomUriParameters UriParameters, CreateUomDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateUomDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Uom
    /// </summary>
    public partial class UomPatchRequest : ApiRequest
    {
        public UomPatchRequest(UomUriParameters UriParameters, MergePatchUomDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchUomDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Uom
    /// </summary>
    public partial class UomDeleteRequest : ApiRequest
    {
        public UomDeleteRequest(UomUriParameters UriParameters, UomDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Uoms
    /// </summary>
    public partial class UomsGetRequest : ApiRequest
    {
        public UomsGetRequest(UomsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomsCount
    /// </summary>
    public partial class UomsCountGetRequest : ApiRequest
    {
        public UomsCountGetRequest(UomsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomStateEvent
    /// </summary>
    public partial class UomStateEventGetRequest : ApiRequest
    {
        public UomStateEventGetRequest(UomStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomHistoryState
    /// </summary>
    public partial class UomHistoryStateGetRequest : ApiRequest
    {
        public UomHistoryStateGetRequest(UomHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomConversion
    /// </summary>
    public partial class UomConversionGetRequest : ApiRequest
    {
        public UomConversionGetRequest(UomConversionUriParameters UriParameters, UomConversionGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomConversionGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class UomConversion
    /// </summary>
    public partial class UomConversionPutRequest : ApiRequest
    {
        public UomConversionPutRequest(UomConversionUriParameters UriParameters, CreateUomConversionDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateUomConversionDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class UomConversion
    /// </summary>
    public partial class UomConversionPatchRequest : ApiRequest
    {
        public UomConversionPatchRequest(UomConversionUriParameters UriParameters, MergePatchUomConversionDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchUomConversionDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class UomConversion
    /// </summary>
    public partial class UomConversionDeleteRequest : ApiRequest
    {
        public UomConversionDeleteRequest(UomConversionUriParameters UriParameters, UomConversionDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomConversionDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomConversions
    /// </summary>
    public partial class UomConversionsGetRequest : ApiRequest
    {
        public UomConversionsGetRequest(UomConversionsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomConversionsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomConversionsCount
    /// </summary>
    public partial class UomConversionsCountGetRequest : ApiRequest
    {
        public UomConversionsCountGetRequest(UomConversionsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomConversionsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomConversionStateEvent
    /// </summary>
    public partial class UomConversionStateEventGetRequest : ApiRequest
    {
        public UomConversionStateEventGetRequest(UomConversionStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomConversionHistoryState
    /// </summary>
    public partial class UomConversionHistoryStateGetRequest : ApiRequest
    {
        public UomConversionHistoryStateGetRequest(UomConversionHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomConversionHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomType
    /// </summary>
    public partial class UomTypeGetRequest : ApiRequest
    {
        public UomTypeGetRequest(UomTypeUriParameters UriParameters, UomTypeGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomTypeGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class UomType
    /// </summary>
    public partial class UomTypePutRequest : ApiRequest
    {
        public UomTypePutRequest(UomTypeUriParameters UriParameters, CreateUomTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateUomTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class UomType
    /// </summary>
    public partial class UomTypePatchRequest : ApiRequest
    {
        public UomTypePatchRequest(UomTypeUriParameters UriParameters, MergePatchUomTypeDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchUomTypeDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class UomType
    /// </summary>
    public partial class UomTypeDeleteRequest : ApiRequest
    {
        public UomTypeDeleteRequest(UomTypeUriParameters UriParameters, UomTypeDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomTypeDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomTypes
    /// </summary>
    public partial class UomTypesGetRequest : ApiRequest
    {
        public UomTypesGetRequest(UomTypesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomTypesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomTypesCount
    /// </summary>
    public partial class UomTypesCountGetRequest : ApiRequest
    {
        public UomTypesCountGetRequest(UomTypesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public UomTypesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomTypeStateEvent
    /// </summary>
    public partial class UomTypeStateEventGetRequest : ApiRequest
    {
        public UomTypeStateEventGetRequest(UomTypeStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class UomTypeHistoryState
    /// </summary>
    public partial class UomTypeHistoryStateGetRequest : ApiRequest
    {
        public UomTypeHistoryStateGetRequest(UomTypeHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public UomTypeHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouse
    /// </summary>
    public partial class WarehouseGetRequest : ApiRequest
    {
        public WarehouseGetRequest(WarehouseUriParameters UriParameters, WarehouseGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class Warehouse
    /// </summary>
    public partial class WarehousePutRequest : ApiRequest
    {
        public WarehousePutRequest(WarehouseUriParameters UriParameters, CreateWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class Warehouse
    /// </summary>
    public partial class WarehousePatchRequest : ApiRequest
    {
        public WarehousePatchRequest(WarehouseUriParameters UriParameters, MergePatchWarehouseDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchWarehouseDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class Warehouse
    /// </summary>
    public partial class WarehouseDeleteRequest : ApiRequest
    {
        public WarehouseDeleteRequest(WarehouseUriParameters UriParameters, WarehouseDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehouseDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class Warehouses
    /// </summary>
    public partial class WarehousesGetRequest : ApiRequest
    {
        public WarehousesGetRequest(WarehousesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehousesCount
    /// </summary>
    public partial class WarehousesCountGetRequest : ApiRequest
    {
        public WarehousesCountGetRequest(WarehousesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public WarehousesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseStateEvent
    /// </summary>
    public partial class WarehouseStateEventGetRequest : ApiRequest
    {
        public WarehouseStateEventGetRequest(WarehouseStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class WarehouseHistoryState
    /// </summary>
    public partial class WarehouseHistoryStateGetRequest : ApiRequest
    {
        public WarehouseHistoryStateGetRequest(WarehouseHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public WarehouseHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceGetRequest : ApiRequest
    {
        public AttributeSetInstanceGetRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePutRequest : ApiRequest
    {
        public AttributeSetInstancePutRequest(AttributeSetInstanceUriParameters UriParameters, CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstancePatchRequest : ApiRequest
    {
        public AttributeSetInstancePatchRequest(AttributeSetInstanceUriParameters UriParameters, MergePatchAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstance
    /// </summary>
    public partial class AttributeSetInstanceDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceDeleteRequest(AttributeSetInstanceUriParameters UriParameters, AttributeSetInstanceDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesGetRequest : ApiRequest
    {
        public AttributeSetInstancesGetRequest(AttributeSetInstancesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Post of class AttributeSetInstances
    /// </summary>
    public partial class AttributeSetInstancesPostRequest : ApiRequest
    {
        public AttributeSetInstancesPostRequest(CreateAttributeSetInstanceDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstancesCount
    /// </summary>
    public partial class AttributeSetInstancesCountGetRequest : ApiRequest
    {
        public AttributeSetInstancesCountGetRequest(AttributeSetInstancesCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstancesCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>
    public partial class AttributeSetInstanceStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceStateEventGetRequest(AttributeSetInstanceStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>
    public partial class AttributeSetInstanceHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceHistoryStateGetRequest(AttributeSetInstanceHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGetRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters, AttributeSetInstanceExtensionFieldGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldPutRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldPatchRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionField
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldDeleteRequest(AttributeSetInstanceExtensionFieldUriParameters UriParameters, AttributeSetInstanceExtensionFieldDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFields
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldsGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldsGetRequest(AttributeSetInstanceExtensionFieldsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldsCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldsCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldsCountGetRequest(AttributeSetInstanceExtensionFieldsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldStateEventGetRequest(AttributeSetInstanceExtensionFieldStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldHistoryStateGetRequest(AttributeSetInstanceExtensionFieldHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupGetRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupGetQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupGetQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Put of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPutRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPutRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, CreateAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public CreateAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Patch of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupPatchRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupPatchRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, MergePatchAttributeSetInstanceExtensionFieldGroupDto Content = null, MediaTypeFormatter Formatter = null)
        {
            this.Content = Content;
            this.Formatter = Formatter;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request content
        /// </summary>
        public MergePatchAttributeSetInstanceExtensionFieldGroupDto Content { get; set; }
        /// <summary>
        /// Request formatter
        /// </summary>
        public MediaTypeFormatter Formatter { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Delete of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupDeleteRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupDeleteRequest(AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters, AttributeSetInstanceExtensionFieldGroupDeleteQuery Query = null)
        {
            this.Query = Query;
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupDeleteQuery Query { get; set; }
        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsGetRequest(AttributeSetInstanceExtensionFieldGroupsGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupsCount
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupsCountGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupsCountGetRequest(AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupsCountGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupStateEventGetRequest(AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateEventUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>
    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest : ApiRequest
    {
        public AttributeSetInstanceExtensionFieldGroupHistoryStateGetRequest(AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters)
        {
            this.UriParameters = UriParameters;
        }

        /// <summary>
        /// Request Uri Parameters
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupHistoryStateUriParameters UriParameters { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class LocatorTrees
    /// </summary>
    public partial class LocatorTreesGetRequest : ApiRequest
    {
        public LocatorTreesGetRequest(LocatorTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public LocatorTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Request object for method Get of class OrganizationTrees
    /// </summary>
    public partial class OrganizationTreesGetRequest : ApiRequest
    {
        public OrganizationTreesGetRequest(OrganizationTreesGetQuery Query = null)
        {
            this.Query = Query;
        }

        /// <summary>
        /// Request query string properties
        /// </summary>
        public OrganizationTreesGetQuery Query { get; set; }

    } // end class

    /// <summary>
    /// Response object for method Get of class Attribute
    /// </summary>

    public partial class AttributeGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Attributes
    /// </summary>

    public partial class AttributesGetResponse : ApiResponse
    {


	    private IList<AttributeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeStateDto>)new XmlSerializer(typeof(IList<AttributeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeStateEvent
    /// </summary>

    public partial class AttributeStateEventGetResponse : ApiResponse
    {


	    private AttributeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeHistoryState
    /// </summary>

    public partial class AttributeHistoryStateGetResponse : ApiResponse
    {


	    private AttributeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeStateDto)new XmlSerializer(typeof(AttributeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeValue
    /// </summary>

    public partial class AttributeValueGetResponse : ApiResponse
    {


	    private AttributeValueStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeValueStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeValueStateDto)new XmlSerializer(typeof(AttributeValueStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeValueStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeValueStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeAlias
    /// </summary>

    public partial class AttributeAliasGetResponse : ApiResponse
    {


	    private AttributeAliasStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeAliasStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeAliasStateDto)new XmlSerializer(typeof(AttributeAliasStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeAliasStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeAliasStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSet
    /// </summary>

    public partial class AttributeSetGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSets
    /// </summary>

    public partial class AttributeSetsGetResponse : ApiResponse
    {


	    private IList<AttributeSetStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetStateDto>)new XmlSerializer(typeof(IList<AttributeSetStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetStateEvent
    /// </summary>

    public partial class AttributeSetStateEventGetResponse : ApiResponse
    {


	    private AttributeSetStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetHistoryState
    /// </summary>

    public partial class AttributeSetHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetStateDto)new XmlSerializer(typeof(AttributeSetStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeUse
    /// </summary>

    public partial class AttributeUseGetResponse : ApiResponse
    {


	    private AttributeUseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeUseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeUseStateDto)new XmlSerializer(typeof(AttributeUseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeUseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeUseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ContactMech
    /// </summary>

    public partial class ContactMechGetResponse : ApiResponse
    {


	    private ContactMechStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ContactMechStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ContactMechStateDto)new XmlSerializer(typeof(ContactMechStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ContactMechStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ContactMechStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ContactMeches
    /// </summary>

    public partial class ContactMechesGetResponse : ApiResponse
    {


	    private IList<ContactMechStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ContactMechStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ContactMechStateDto>)new XmlSerializer(typeof(IList<ContactMechStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ContactMechStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ContactMechStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ContactMechStateEvent
    /// </summary>

    public partial class ContactMechStateEventGetResponse : ApiResponse
    {


	    private ContactMechStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ContactMechStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ContactMechStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ContactMechStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ContactMechStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ContactMechStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ContactMechHistoryState
    /// </summary>

    public partial class ContactMechHistoryStateGetResponse : ApiResponse
    {


	    private ContactMechStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ContactMechStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ContactMechStateDto)new XmlSerializer(typeof(ContactMechStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ContactMechStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ContactMechStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageHandlingMethod
    /// </summary>

    public partial class DamageHandlingMethodGetResponse : ApiResponse
    {


	    private DamageHandlingMethodStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageHandlingMethodStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageHandlingMethodStateDto)new XmlSerializer(typeof(DamageHandlingMethodStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageHandlingMethodStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageHandlingMethodStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageHandlingMethods
    /// </summary>

    public partial class DamageHandlingMethodsGetResponse : ApiResponse
    {


	    private IList<DamageHandlingMethodStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<DamageHandlingMethodStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<DamageHandlingMethodStateDto>)new XmlSerializer(typeof(IList<DamageHandlingMethodStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<DamageHandlingMethodStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<DamageHandlingMethodStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageHandlingMethodStateEvent
    /// </summary>

    public partial class DamageHandlingMethodStateEventGetResponse : ApiResponse
    {


	    private DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageHandlingMethodStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageHandlingMethodHistoryState
    /// </summary>

    public partial class DamageHandlingMethodHistoryStateGetResponse : ApiResponse
    {


	    private DamageHandlingMethodStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageHandlingMethodStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageHandlingMethodStateDto)new XmlSerializer(typeof(DamageHandlingMethodStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageHandlingMethodStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageHandlingMethodStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageReason
    /// </summary>

    public partial class DamageReasonGetResponse : ApiResponse
    {


	    private DamageReasonStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageReasonStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageReasonStateDto)new XmlSerializer(typeof(DamageReasonStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageReasonStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageReasonStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageReasons
    /// </summary>

    public partial class DamageReasonsGetResponse : ApiResponse
    {


	    private IList<DamageReasonStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<DamageReasonStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<DamageReasonStateDto>)new XmlSerializer(typeof(IList<DamageReasonStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<DamageReasonStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<DamageReasonStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageReasonStateEvent
    /// </summary>

    public partial class DamageReasonStateEventGetResponse : ApiResponse
    {


	    private DamageReasonStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageReasonStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageReasonStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(DamageReasonStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageReasonStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageReasonStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageReasonHistoryState
    /// </summary>

    public partial class DamageReasonHistoryStateGetResponse : ApiResponse
    {


	    private DamageReasonStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageReasonStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageReasonStateDto)new XmlSerializer(typeof(DamageReasonStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageReasonStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageReasonStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageType
    /// </summary>

    public partial class DamageTypeGetResponse : ApiResponse
    {


	    private DamageTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageTypeStateDto)new XmlSerializer(typeof(DamageTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageTypes
    /// </summary>

    public partial class DamageTypesGetResponse : ApiResponse
    {


	    private IList<DamageTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<DamageTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<DamageTypeStateDto>)new XmlSerializer(typeof(IList<DamageTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<DamageTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<DamageTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageTypeStateEvent
    /// </summary>

    public partial class DamageTypeStateEventGetResponse : ApiResponse
    {


	    private DamageTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(DamageTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DamageTypeHistoryState
    /// </summary>

    public partial class DamageTypeHistoryStateGetResponse : ApiResponse
    {


	    private DamageTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DamageTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DamageTypeStateDto)new XmlSerializer(typeof(DamageTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DamageTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DamageTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentType
    /// </summary>

    public partial class DocumentTypeGetResponse : ApiResponse
    {


	    private DocumentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateDto)new XmlSerializer(typeof(DocumentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypes
    /// </summary>

    public partial class DocumentTypesGetResponse : ApiResponse
    {


	    private IList<DocumentTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<DocumentTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<DocumentTypeStateDto>)new XmlSerializer(typeof(IList<DocumentTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<DocumentTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<DocumentTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypeStateEvent
    /// </summary>

    public partial class DocumentTypeStateEventGetResponse : ApiResponse
    {


	    private DocumentTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(DocumentTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class DocumentTypeHistoryState
    /// </summary>

    public partial class DocumentTypeHistoryStateGetResponse : ApiResponse
    {


	    private DocumentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public DocumentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (DocumentTypeStateDto)new XmlSerializer(typeof(DocumentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<DocumentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<DocumentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Facility
    /// </summary>

    public partial class FacilityGetResponse : ApiResponse
    {


	    private FacilityStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public FacilityStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (FacilityStateDto)new XmlSerializer(typeof(FacilityStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<FacilityStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<FacilityStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Facilities
    /// </summary>

    public partial class FacilitiesGetResponse : ApiResponse
    {


	    private IList<FacilityStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<FacilityStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<FacilityStateDto>)new XmlSerializer(typeof(IList<FacilityStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<FacilityStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<FacilityStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class FacilityStateEvent
    /// </summary>

    public partial class FacilityStateEventGetResponse : ApiResponse
    {


	    private FacilityStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public FacilityStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (FacilityStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(FacilityStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<FacilityStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<FacilityStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class FacilityHistoryState
    /// </summary>

    public partial class FacilityHistoryStateGetResponse : ApiResponse
    {


	    private FacilityStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public FacilityStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (FacilityStateDto)new XmlSerializer(typeof(FacilityStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<FacilityStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<FacilityStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GoodIdentificationType
    /// </summary>

    public partial class GoodIdentificationTypeGetResponse : ApiResponse
    {


	    private GoodIdentificationTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GoodIdentificationTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (GoodIdentificationTypeStateDto)new XmlSerializer(typeof(GoodIdentificationTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<GoodIdentificationTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<GoodIdentificationTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GoodIdentificationTypes
    /// </summary>

    public partial class GoodIdentificationTypesGetResponse : ApiResponse
    {


	    private IList<GoodIdentificationTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<GoodIdentificationTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<GoodIdentificationTypeStateDto>)new XmlSerializer(typeof(IList<GoodIdentificationTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<GoodIdentificationTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<GoodIdentificationTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GoodIdentificationTypeStateEvent
    /// </summary>

    public partial class GoodIdentificationTypeStateEventGetResponse : ApiResponse
    {


	    private GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<GoodIdentificationTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GoodIdentificationTypeHistoryState
    /// </summary>

    public partial class GoodIdentificationTypeHistoryStateGetResponse : ApiResponse
    {


	    private GoodIdentificationTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GoodIdentificationTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (GoodIdentificationTypeStateDto)new XmlSerializer(typeof(GoodIdentificationTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<GoodIdentificationTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<GoodIdentificationTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOut
    /// </summary>

    public partial class InOutGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOuts
    /// </summary>

    public partial class InOutsGetResponse : ApiResponse
    {


	    private IList<InOutStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InOutStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InOutStateDto>)new XmlSerializer(typeof(IList<InOutStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InOutStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InOutStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutStateEvent
    /// </summary>

    public partial class InOutStateEventGetResponse : ApiResponse
    {


	    private InOutStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InOutStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutHistoryState
    /// </summary>

    public partial class InOutHistoryStateGetResponse : ApiResponse
    {


	    private InOutStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutStateDto)new XmlSerializer(typeof(InOutStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutImage
    /// </summary>

    public partial class InOutImageGetResponse : ApiResponse
    {


	    private InOutImageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutImageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutImageStateDto)new XmlSerializer(typeof(InOutImageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutImageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutImageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLine
    /// </summary>

    public partial class InOutLineGetResponse : ApiResponse
    {


	    private InOutLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineStateDto)new XmlSerializer(typeof(InOutLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InOutLineImage
    /// </summary>

    public partial class InOutLineImageGetResponse : ApiResponse
    {


	    private InOutLineImageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InOutLineImageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InOutLineImageStateDto)new XmlSerializer(typeof(InOutLineImageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InOutLineImageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InOutLineImageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItem
    /// </summary>

    public partial class InventoryItemGetResponse : ApiResponse
    {


	    private InventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateDto)new XmlSerializer(typeof(InventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItems
    /// </summary>

    public partial class InventoryItemsGetResponse : ApiResponse
    {


	    private IList<InventoryItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryItemStateDto>)new XmlSerializer(typeof(IList<InventoryItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemStateEvent
    /// </summary>

    public partial class InventoryItemStateEventGetResponse : ApiResponse
    {


	    private InventoryItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemHistoryState
    /// </summary>

    public partial class InventoryItemHistoryStateGetResponse : ApiResponse
    {


	    private InventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemStateDto)new XmlSerializer(typeof(InventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemEntry
    /// </summary>

    public partial class InventoryItemEntryGetResponse : ApiResponse
    {


	    private InventoryItemEntryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemEntryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemEntryStateDto)new XmlSerializer(typeof(InventoryItemEntryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemEntryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemEntryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemRequirement
    /// </summary>

    public partial class InventoryItemRequirementGetResponse : ApiResponse
    {


	    private InventoryItemRequirementStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemRequirementStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemRequirementStateDto)new XmlSerializer(typeof(InventoryItemRequirementStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemRequirementStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemRequirementStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemRequirements
    /// </summary>

    public partial class InventoryItemRequirementsGetResponse : ApiResponse
    {


	    private IList<InventoryItemRequirementStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryItemRequirementStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryItemRequirementStateDto>)new XmlSerializer(typeof(IList<InventoryItemRequirementStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryItemRequirementStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryItemRequirementStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemRequirementStateEvent
    /// </summary>

    public partial class InventoryItemRequirementStateEventGetResponse : ApiResponse
    {


	    private InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemRequirementStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemRequirementHistoryState
    /// </summary>

    public partial class InventoryItemRequirementHistoryStateGetResponse : ApiResponse
    {


	    private InventoryItemRequirementStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemRequirementStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemRequirementStateDto)new XmlSerializer(typeof(InventoryItemRequirementStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemRequirementStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemRequirementStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryItemRequirementEntry
    /// </summary>

    public partial class InventoryItemRequirementEntryGetResponse : ApiResponse
    {


	    private InventoryItemRequirementEntryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryItemRequirementEntryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryItemRequirementEntryStateDto)new XmlSerializer(typeof(InventoryItemRequirementEntryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryItemRequirementEntryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryItemRequirementEntryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRule
    /// </summary>

    public partial class InventoryPostingRuleGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateDto)new XmlSerializer(typeof(InventoryPostingRuleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRules
    /// </summary>

    public partial class InventoryPostingRulesGetResponse : ApiResponse
    {


	    private IList<InventoryPostingRuleStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryPostingRuleStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryPostingRuleStateDto>)new XmlSerializer(typeof(IList<InventoryPostingRuleStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryPostingRuleStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryPostingRuleStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRuleStateEvent
    /// </summary>

    public partial class InventoryPostingRuleStateEventGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPostingRuleHistoryState
    /// </summary>

    public partial class InventoryPostingRuleHistoryStateGetResponse : ApiResponse
    {


	    private InventoryPostingRuleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPostingRuleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPostingRuleStateDto)new XmlSerializer(typeof(InventoryPostingRuleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPostingRuleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPostingRuleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggered
    /// </summary>

    public partial class InventoryPRTriggeredGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateDto)new XmlSerializer(typeof(InventoryPRTriggeredStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggereds
    /// </summary>

    public partial class InventoryPRTriggeredsGetResponse : ApiResponse
    {


	    private IList<InventoryPRTriggeredStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<InventoryPRTriggeredStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<InventoryPRTriggeredStateDto>)new XmlSerializer(typeof(IList<InventoryPRTriggeredStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<InventoryPRTriggeredStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<InventoryPRTriggeredStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggeredStateEvent
    /// </summary>

    public partial class InventoryPRTriggeredStateEventGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class InventoryPRTriggeredHistoryState
    /// </summary>

    public partial class InventoryPRTriggeredHistoryStateGetResponse : ApiResponse
    {


	    private InventoryPRTriggeredStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public InventoryPRTriggeredStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (InventoryPRTriggeredStateDto)new XmlSerializer(typeof(InventoryPRTriggeredStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<InventoryPRTriggeredStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locator
    /// </summary>

    public partial class LocatorGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Locators
    /// </summary>

    public partial class LocatorsGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorStateEvent
    /// </summary>

    public partial class LocatorStateEventGetResponse : ApiResponse
    {


	    private LocatorStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(LocatorStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorHistoryState
    /// </summary>

    public partial class LocatorHistoryStateGetResponse : ApiResponse
    {


	    private LocatorStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorStateDto)new XmlSerializer(typeof(LocatorStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorType
    /// </summary>

    public partial class LocatorTypeGetResponse : ApiResponse
    {


	    private LocatorTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorTypeStateDto)new XmlSerializer(typeof(LocatorTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTypes
    /// </summary>

    public partial class LocatorTypesGetResponse : ApiResponse
    {


	    private IList<LocatorTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorTypeStateDto>)new XmlSerializer(typeof(IList<LocatorTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTypeStateEvent
    /// </summary>

    public partial class LocatorTypeStateEventGetResponse : ApiResponse
    {


	    private LocatorTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(LocatorTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTypeHistoryState
    /// </summary>

    public partial class LocatorTypeHistoryStateGetResponse : ApiResponse
    {


	    private LocatorTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LocatorTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LocatorTypeStateDto)new XmlSerializer(typeof(LocatorTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LocatorTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LocatorTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Lot
    /// </summary>

    public partial class LotGetResponse : ApiResponse
    {


	    private LotStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LotStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LotStateDto)new XmlSerializer(typeof(LotStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LotStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LotStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Lots
    /// </summary>

    public partial class LotsGetResponse : ApiResponse
    {


	    private IList<LotStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LotStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LotStateDto>)new XmlSerializer(typeof(IList<LotStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LotStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LotStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LotStateEvent
    /// </summary>

    public partial class LotStateEventGetResponse : ApiResponse
    {


	    private LotStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LotStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LotStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(LotStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LotStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LotStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LotHistoryState
    /// </summary>

    public partial class LotHistoryStateGetResponse : ApiResponse
    {


	    private LotStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public LotStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (LotStateDto)new XmlSerializer(typeof(LotStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<LotStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<LotStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Movement
    /// </summary>

    public partial class MovementGetResponse : ApiResponse
    {


	    private MovementStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementStateDto)new XmlSerializer(typeof(MovementStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Movements
    /// </summary>

    public partial class MovementsGetResponse : ApiResponse
    {


	    private IList<MovementStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<MovementStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<MovementStateDto>)new XmlSerializer(typeof(IList<MovementStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<MovementStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<MovementStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementStateEvent
    /// </summary>

    public partial class MovementStateEventGetResponse : ApiResponse
    {


	    private MovementStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(MovementStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementHistoryState
    /// </summary>

    public partial class MovementHistoryStateGetResponse : ApiResponse
    {


	    private MovementStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementStateDto)new XmlSerializer(typeof(MovementStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementLine
    /// </summary>

    public partial class MovementLineGetResponse : ApiResponse
    {


	    private MovementLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementLineStateDto)new XmlSerializer(typeof(MovementLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementConfirmation
    /// </summary>

    public partial class MovementConfirmationGetResponse : ApiResponse
    {


	    private MovementConfirmationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementConfirmationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementConfirmationStateDto)new XmlSerializer(typeof(MovementConfirmationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementConfirmationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementConfirmationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementConfirmations
    /// </summary>

    public partial class MovementConfirmationsGetResponse : ApiResponse
    {


	    private IList<MovementConfirmationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<MovementConfirmationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<MovementConfirmationStateDto>)new XmlSerializer(typeof(IList<MovementConfirmationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<MovementConfirmationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<MovementConfirmationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementConfirmationStateEvent
    /// </summary>

    public partial class MovementConfirmationStateEventGetResponse : ApiResponse
    {


	    private MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementConfirmationStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementConfirmationHistoryState
    /// </summary>

    public partial class MovementConfirmationHistoryStateGetResponse : ApiResponse
    {


	    private MovementConfirmationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementConfirmationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementConfirmationStateDto)new XmlSerializer(typeof(MovementConfirmationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementConfirmationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementConfirmationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementConfirmationLine
    /// </summary>

    public partial class MovementConfirmationLineGetResponse : ApiResponse
    {


	    private MovementConfirmationLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementConfirmationLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementConfirmationLineStateDto)new XmlSerializer(typeof(MovementConfirmationLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementConfirmationLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementConfirmationLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementType
    /// </summary>

    public partial class MovementTypeGetResponse : ApiResponse
    {


	    private MovementTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateDto)new XmlSerializer(typeof(MovementTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypes
    /// </summary>

    public partial class MovementTypesGetResponse : ApiResponse
    {


	    private IList<MovementTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<MovementTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<MovementTypeStateDto>)new XmlSerializer(typeof(IList<MovementTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<MovementTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<MovementTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypeStateEvent
    /// </summary>

    public partial class MovementTypeStateEventGetResponse : ApiResponse
    {


	    private MovementTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(MovementTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class MovementTypeHistoryState
    /// </summary>

    public partial class MovementTypeHistoryStateGetResponse : ApiResponse
    {


	    private MovementTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public MovementTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (MovementTypeStateDto)new XmlSerializer(typeof(MovementTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<MovementTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<MovementTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Order
    /// </summary>

    public partial class OrderGetResponse : ApiResponse
    {


	    private OrderStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderStateDto)new XmlSerializer(typeof(OrderStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Orders
    /// </summary>

    public partial class OrdersGetResponse : ApiResponse
    {


	    private IList<OrderStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderStateDto>)new XmlSerializer(typeof(IList<OrderStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderStateEvent
    /// </summary>

    public partial class OrderStateEventGetResponse : ApiResponse
    {


	    private OrderStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderHistoryState
    /// </summary>

    public partial class OrderHistoryStateGetResponse : ApiResponse
    {


	    private OrderStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderStateDto)new XmlSerializer(typeof(OrderStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderRole
    /// </summary>

    public partial class OrderRoleGetResponse : ApiResponse
    {


	    private OrderRoleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderRoleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderRoleStateDto)new XmlSerializer(typeof(OrderRoleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderRoleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderRoleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItem
    /// </summary>

    public partial class OrderItemGetResponse : ApiResponse
    {


	    private OrderItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemStateDto)new XmlSerializer(typeof(OrderItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipGroup
    /// </summary>

    public partial class OrderShipGroupGetResponse : ApiResponse
    {


	    private OrderShipGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipGroupStateDto)new XmlSerializer(typeof(OrderShipGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemShipGroupAssociation
    /// </summary>

    public partial class OrderItemShipGroupAssociationGetResponse : ApiResponse
    {


	    private OrderItemShipGroupAssociationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemShipGroupAssociationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemShipGroupAssociationStateDto)new XmlSerializer(typeof(OrderItemShipGroupAssociationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemShipGroupAssociationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemShipGroupAssociationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemShipGrpInvReservation
    /// </summary>

    public partial class OrderItemShipGrpInvReservationGetResponse : ApiResponse
    {


	    private OrderItemShipGrpInvReservationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemShipGrpInvReservationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemShipGrpInvReservationStateDto)new XmlSerializer(typeof(OrderItemShipGrpInvReservationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemShipGrpInvReservations
    /// </summary>

    public partial class OrderItemShipGrpInvReservationsGetResponse : ApiResponse
    {


	    private IList<OrderItemShipGrpInvReservationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderItemShipGrpInvReservationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderItemShipGrpInvReservationStateDto>)new XmlSerializer(typeof(IList<OrderItemShipGrpInvReservationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderItemShipGrpInvReservationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderItemShipGrpInvReservationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemShipGrpInvReservationStateEvent
    /// </summary>

    public partial class OrderItemShipGrpInvReservationStateEventGetResponse : ApiResponse
    {


	    private OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderItemShipGrpInvReservationHistoryState
    /// </summary>

    public partial class OrderItemShipGrpInvReservationHistoryStateGetResponse : ApiResponse
    {


	    private OrderItemShipGrpInvReservationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderItemShipGrpInvReservationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderItemShipGrpInvReservationStateDto)new XmlSerializer(typeof(OrderItemShipGrpInvReservationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderItemShipGrpInvReservationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipment
    /// </summary>

    public partial class OrderShipmentGetResponse : ApiResponse
    {


	    private OrderShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateDto)new XmlSerializer(typeof(OrderShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipments
    /// </summary>

    public partial class OrderShipmentsGetResponse : ApiResponse
    {


	    private IList<OrderShipmentStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrderShipmentStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrderShipmentStateDto>)new XmlSerializer(typeof(IList<OrderShipmentStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrderShipmentStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrderShipmentStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipmentStateEvent
    /// </summary>

    public partial class OrderShipmentStateEventGetResponse : ApiResponse
    {


	    private OrderShipmentStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrderShipmentStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrderShipmentHistoryState
    /// </summary>

    public partial class OrderShipmentHistoryStateGetResponse : ApiResponse
    {


	    private OrderShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrderShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrderShipmentStateDto)new XmlSerializer(typeof(OrderShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrderShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrderShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructure
    /// </summary>

    public partial class OrganizationStructureGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructures
    /// </summary>

    public partial class OrganizationStructuresGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureStateEvent
    /// </summary>

    public partial class OrganizationStructureStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureHistoryState
    /// </summary>

    public partial class OrganizationStructureHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureStateDto)new XmlSerializer(typeof(OrganizationStructureStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureType
    /// </summary>

    public partial class OrganizationStructureTypeGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypes
    /// </summary>

    public partial class OrganizationStructureTypesGetResponse : ApiResponse
    {


	    private IList<OrganizationStructureTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStructureTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStructureTypeStateDto>)new XmlSerializer(typeof(IList<OrganizationStructureTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStructureTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeStateEvent
    /// </summary>

    public partial class OrganizationStructureTypeStateEventGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationStructureTypeHistoryState
    /// </summary>

    public partial class OrganizationStructureTypeHistoryStateGetResponse : ApiResponse
    {


	    private OrganizationStructureTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public OrganizationStructureTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (OrganizationStructureTypeStateDto)new XmlSerializer(typeof(OrganizationStructureTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<OrganizationStructureTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Party
    /// </summary>

    public partial class PartyGetResponse : ApiResponse
    {


	    private PartyStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyStateDto)new XmlSerializer(typeof(PartyStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Parties
    /// </summary>

    public partial class PartiesGetResponse : ApiResponse
    {


	    private IList<PartyStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PartyStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PartyStateDto>)new XmlSerializer(typeof(IList<PartyStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PartyStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PartyStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyStateEvent
    /// </summary>

    public partial class PartyStateEventGetResponse : ApiResponse
    {


	    private PartyStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PartyStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyHistoryState
    /// </summary>

    public partial class PartyHistoryStateGetResponse : ApiResponse
    {


	    private PartyStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyStateDto)new XmlSerializer(typeof(PartyStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyRole
    /// </summary>

    public partial class PartyRoleGetResponse : ApiResponse
    {


	    private PartyRoleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyRoleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyRoleStateDto)new XmlSerializer(typeof(PartyRoleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyRoleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyRoleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyRoles
    /// </summary>

    public partial class PartyRolesGetResponse : ApiResponse
    {


	    private IList<PartyRoleStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PartyRoleStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PartyRoleStateDto>)new XmlSerializer(typeof(IList<PartyRoleStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PartyRoleStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PartyRoleStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyRoleStateEvent
    /// </summary>

    public partial class PartyRoleStateEventGetResponse : ApiResponse
    {


	    private PartyRoleStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyRoleStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyRoleStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PartyRoleStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyRoleStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyRoleStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PartyRoleHistoryState
    /// </summary>

    public partial class PartyRoleHistoryStateGetResponse : ApiResponse
    {


	    private PartyRoleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PartyRoleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PartyRoleStateDto)new XmlSerializer(typeof(PartyRoleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PartyRoleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PartyRoleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PhysicalInventory
    /// </summary>

    public partial class PhysicalInventoryGetResponse : ApiResponse
    {


	    private PhysicalInventoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PhysicalInventoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PhysicalInventoryStateDto)new XmlSerializer(typeof(PhysicalInventoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PhysicalInventoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PhysicalInventoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PhysicalInventories
    /// </summary>

    public partial class PhysicalInventoriesGetResponse : ApiResponse
    {


	    private IList<PhysicalInventoryStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PhysicalInventoryStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PhysicalInventoryStateDto>)new XmlSerializer(typeof(IList<PhysicalInventoryStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PhysicalInventoryStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PhysicalInventoryStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PhysicalInventoryStateEvent
    /// </summary>

    public partial class PhysicalInventoryStateEventGetResponse : ApiResponse
    {


	    private PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PhysicalInventoryStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PhysicalInventoryHistoryState
    /// </summary>

    public partial class PhysicalInventoryHistoryStateGetResponse : ApiResponse
    {


	    private PhysicalInventoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PhysicalInventoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PhysicalInventoryStateDto)new XmlSerializer(typeof(PhysicalInventoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PhysicalInventoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PhysicalInventoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PhysicalInventoryLine
    /// </summary>

    public partial class PhysicalInventoryLineGetResponse : ApiResponse
    {


	    private PhysicalInventoryLineStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PhysicalInventoryLineStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PhysicalInventoryLineStateDto)new XmlSerializer(typeof(PhysicalInventoryLineStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PhysicalInventoryLineStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PhysicalInventoryLineStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Picklist
    /// </summary>

    public partial class PicklistGetResponse : ApiResponse
    {


	    private PicklistStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistStateDto)new XmlSerializer(typeof(PicklistStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Picklists
    /// </summary>

    public partial class PicklistsGetResponse : ApiResponse
    {


	    private IList<PicklistStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PicklistStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PicklistStateDto>)new XmlSerializer(typeof(IList<PicklistStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PicklistStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PicklistStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistStateEvent
    /// </summary>

    public partial class PicklistStateEventGetResponse : ApiResponse
    {


	    private PicklistStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PicklistStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistHistoryState
    /// </summary>

    public partial class PicklistHistoryStateGetResponse : ApiResponse
    {


	    private PicklistStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistStateDto)new XmlSerializer(typeof(PicklistStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistRole
    /// </summary>

    public partial class PicklistRoleGetResponse : ApiResponse
    {


	    private PicklistRoleStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistRoleStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistRoleStateDto)new XmlSerializer(typeof(PicklistRoleStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistRoleStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistRoleStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistBin
    /// </summary>

    public partial class PicklistBinGetResponse : ApiResponse
    {


	    private PicklistBinStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistBinStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistBinStateDto)new XmlSerializer(typeof(PicklistBinStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistBinStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistBinStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistBins
    /// </summary>

    public partial class PicklistBinsGetResponse : ApiResponse
    {


	    private IList<PicklistBinStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PicklistBinStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PicklistBinStateDto>)new XmlSerializer(typeof(IList<PicklistBinStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PicklistBinStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PicklistBinStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistBinStateEvent
    /// </summary>

    public partial class PicklistBinStateEventGetResponse : ApiResponse
    {


	    private PicklistBinStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistBinStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistBinStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PicklistBinStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistBinStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistBinStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistBinHistoryState
    /// </summary>

    public partial class PicklistBinHistoryStateGetResponse : ApiResponse
    {


	    private PicklistBinStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistBinStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistBinStateDto)new XmlSerializer(typeof(PicklistBinStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistBinStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistBinStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PicklistItem
    /// </summary>

    public partial class PicklistItemGetResponse : ApiResponse
    {


	    private PicklistItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PicklistItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PicklistItemStateDto)new XmlSerializer(typeof(PicklistItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PicklistItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PicklistItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Pickwave
    /// </summary>

    public partial class PickwaveGetResponse : ApiResponse
    {


	    private PickwaveStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PickwaveStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PickwaveStateDto)new XmlSerializer(typeof(PickwaveStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PickwaveStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PickwaveStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Pickwaves
    /// </summary>

    public partial class PickwavesGetResponse : ApiResponse
    {


	    private IList<PickwaveStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<PickwaveStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<PickwaveStateDto>)new XmlSerializer(typeof(IList<PickwaveStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<PickwaveStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<PickwaveStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PickwaveStateEvent
    /// </summary>

    public partial class PickwaveStateEventGetResponse : ApiResponse
    {


	    private PickwaveStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PickwaveStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PickwaveStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(PickwaveStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PickwaveStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PickwaveStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class PickwaveHistoryState
    /// </summary>

    public partial class PickwaveHistoryStateGetResponse : ApiResponse
    {


	    private PickwaveStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public PickwaveStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (PickwaveStateDto)new XmlSerializer(typeof(PickwaveStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<PickwaveStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<PickwaveStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Product
    /// </summary>

    public partial class ProductGetResponse : ApiResponse
    {


	    private ProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateDto)new XmlSerializer(typeof(ProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Products
    /// </summary>

    public partial class ProductsGetResponse : ApiResponse
    {


	    private IList<ProductStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ProductStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ProductStateDto>)new XmlSerializer(typeof(IList<ProductStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ProductStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ProductStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductStateEvent
    /// </summary>

    public partial class ProductStateEventGetResponse : ApiResponse
    {


	    private ProductStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ProductStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductHistoryState
    /// </summary>

    public partial class ProductHistoryStateGetResponse : ApiResponse
    {


	    private ProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductStateDto)new XmlSerializer(typeof(ProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class GoodIdentification
    /// </summary>

    public partial class GoodIdentificationGetResponse : ApiResponse
    {


	    private GoodIdentificationStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public GoodIdentificationStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (GoodIdentificationStateDto)new XmlSerializer(typeof(GoodIdentificationStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<GoodIdentificationStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<GoodIdentificationStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategory
    /// </summary>

    public partial class ProductCategoryGetResponse : ApiResponse
    {


	    private ProductCategoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateDto)new XmlSerializer(typeof(ProductCategoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategories
    /// </summary>

    public partial class ProductCategoriesGetResponse : ApiResponse
    {


	    private IList<ProductCategoryStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ProductCategoryStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ProductCategoryStateDto>)new XmlSerializer(typeof(IList<ProductCategoryStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ProductCategoryStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ProductCategoryStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryStateEvent
    /// </summary>

    public partial class ProductCategoryStateEventGetResponse : ApiResponse
    {


	    private ProductCategoryStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ProductCategoryStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryHistoryState
    /// </summary>

    public partial class ProductCategoryHistoryStateGetResponse : ApiResponse
    {


	    private ProductCategoryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryStateDto)new XmlSerializer(typeof(ProductCategoryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryMember
    /// </summary>

    public partial class ProductCategoryMemberGetResponse : ApiResponse
    {


	    private ProductCategoryMemberStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryMemberStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryMemberStateDto)new XmlSerializer(typeof(ProductCategoryMemberStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryMemberStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryMemberStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryMembers
    /// </summary>

    public partial class ProductCategoryMembersGetResponse : ApiResponse
    {


	    private IList<ProductCategoryMemberStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ProductCategoryMemberStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ProductCategoryMemberStateDto>)new XmlSerializer(typeof(IList<ProductCategoryMemberStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ProductCategoryMemberStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ProductCategoryMemberStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryMemberStateEvent
    /// </summary>

    public partial class ProductCategoryMemberStateEventGetResponse : ApiResponse
    {


	    private ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryMemberStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ProductCategoryMemberHistoryState
    /// </summary>

    public partial class ProductCategoryMemberHistoryStateGetResponse : ApiResponse
    {


	    private ProductCategoryMemberStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ProductCategoryMemberStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ProductCategoryMemberStateDto)new XmlSerializer(typeof(ProductCategoryMemberStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ProductCategoryMemberStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ProductCategoryMemberStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RejectionReason
    /// </summary>

    public partial class RejectionReasonGetResponse : ApiResponse
    {


	    private RejectionReasonStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RejectionReasonStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RejectionReasonStateDto)new XmlSerializer(typeof(RejectionReasonStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RejectionReasonStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RejectionReasonStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RejectionReasons
    /// </summary>

    public partial class RejectionReasonsGetResponse : ApiResponse
    {


	    private IList<RejectionReasonStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<RejectionReasonStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<RejectionReasonStateDto>)new XmlSerializer(typeof(IList<RejectionReasonStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<RejectionReasonStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<RejectionReasonStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RejectionReasonStateEvent
    /// </summary>

    public partial class RejectionReasonStateEventGetResponse : ApiResponse
    {


	    private RejectionReasonStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RejectionReasonStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RejectionReasonStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(RejectionReasonStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RejectionReasonStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RejectionReasonStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RejectionReasonHistoryState
    /// </summary>

    public partial class RejectionReasonHistoryStateGetResponse : ApiResponse
    {


	    private RejectionReasonStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RejectionReasonStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RejectionReasonStateDto)new XmlSerializer(typeof(RejectionReasonStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RejectionReasonStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RejectionReasonStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RoleType
    /// </summary>

    public partial class RoleTypeGetResponse : ApiResponse
    {


	    private RoleTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RoleTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RoleTypeStateDto)new XmlSerializer(typeof(RoleTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RoleTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RoleTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RoleTypes
    /// </summary>

    public partial class RoleTypesGetResponse : ApiResponse
    {


	    private IList<RoleTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<RoleTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<RoleTypeStateDto>)new XmlSerializer(typeof(IList<RoleTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<RoleTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<RoleTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RoleTypeStateEvent
    /// </summary>

    public partial class RoleTypeStateEventGetResponse : ApiResponse
    {


	    private RoleTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RoleTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RoleTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(RoleTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RoleTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RoleTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class RoleTypeHistoryState
    /// </summary>

    public partial class RoleTypeHistoryStateGetResponse : ApiResponse
    {


	    private RoleTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public RoleTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (RoleTypeStateDto)new XmlSerializer(typeof(RoleTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<RoleTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<RoleTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItem
    /// </summary>

    public partial class SellableInventoryItemGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateDto)new XmlSerializer(typeof(SellableInventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItems
    /// </summary>

    public partial class SellableInventoryItemsGetResponse : ApiResponse
    {


	    private IList<SellableInventoryItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<SellableInventoryItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<SellableInventoryItemStateDto>)new XmlSerializer(typeof(IList<SellableInventoryItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<SellableInventoryItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<SellableInventoryItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemStateEvent
    /// </summary>

    public partial class SellableInventoryItemStateEventGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemHistoryState
    /// </summary>

    public partial class SellableInventoryItemHistoryStateGetResponse : ApiResponse
    {


	    private SellableInventoryItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemStateDto)new XmlSerializer(typeof(SellableInventoryItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SellableInventoryItemEntry
    /// </summary>

    public partial class SellableInventoryItemEntryGetResponse : ApiResponse
    {


	    private SellableInventoryItemEntryStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SellableInventoryItemEntryStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SellableInventoryItemEntryStateDto)new XmlSerializer(typeof(SellableInventoryItemEntryStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SellableInventoryItemEntryStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SellableInventoryItemEntryStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Shipment
    /// </summary>

    public partial class ShipmentGetResponse : ApiResponse
    {


	    private ShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateDto)new XmlSerializer(typeof(ShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Shipments
    /// </summary>

    public partial class ShipmentsGetResponse : ApiResponse
    {


	    private IList<ShipmentStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentStateDto>)new XmlSerializer(typeof(IList<ShipmentStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentStateEvent
    /// </summary>

    public partial class ShipmentStateEventGetResponse : ApiResponse
    {


	    private ShipmentStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentHistoryState
    /// </summary>

    public partial class ShipmentHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentStateDto)new XmlSerializer(typeof(ShipmentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentImage
    /// </summary>

    public partial class ShipmentImageGetResponse : ApiResponse
    {


	    private ShipmentImageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentImageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentImageStateDto)new XmlSerializer(typeof(ShipmentImageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentImageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentImageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentItem
    /// </summary>

    public partial class ShipmentItemGetResponse : ApiResponse
    {


	    private ShipmentItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentItemStateDto)new XmlSerializer(typeof(ShipmentItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentReceipt
    /// </summary>

    public partial class ShipmentReceiptGetResponse : ApiResponse
    {


	    private ShipmentReceiptStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentReceiptStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentReceiptStateDto)new XmlSerializer(typeof(ShipmentReceiptStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentReceiptStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentReceiptStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentReceiptImage
    /// </summary>

    public partial class ShipmentReceiptImageGetResponse : ApiResponse
    {


	    private ShipmentReceiptImageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentReceiptImageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentReceiptImageStateDto)new XmlSerializer(typeof(ShipmentReceiptImageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentReceiptImageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentReceiptImageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ItemIssuance
    /// </summary>

    public partial class ItemIssuanceGetResponse : ApiResponse
    {


	    private ItemIssuanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ItemIssuanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ItemIssuanceStateDto)new XmlSerializer(typeof(ItemIssuanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ItemIssuanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ItemIssuanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentMethodType
    /// </summary>

    public partial class ShipmentMethodTypeGetResponse : ApiResponse
    {


	    private ShipmentMethodTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentMethodTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentMethodTypeStateDto)new XmlSerializer(typeof(ShipmentMethodTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentMethodTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentMethodTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentMethodTypes
    /// </summary>

    public partial class ShipmentMethodTypesGetResponse : ApiResponse
    {


	    private IList<ShipmentMethodTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentMethodTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentMethodTypeStateDto>)new XmlSerializer(typeof(IList<ShipmentMethodTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentMethodTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentMethodTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentMethodTypeStateEvent
    /// </summary>

    public partial class ShipmentMethodTypeStateEventGetResponse : ApiResponse
    {


	    private ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentMethodTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentMethodTypeHistoryState
    /// </summary>

    public partial class ShipmentMethodTypeHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentMethodTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentMethodTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentMethodTypeStateDto)new XmlSerializer(typeof(ShipmentMethodTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentMethodTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentMethodTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentPackage
    /// </summary>

    public partial class ShipmentPackageGetResponse : ApiResponse
    {


	    private ShipmentPackageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentPackageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentPackageStateDto)new XmlSerializer(typeof(ShipmentPackageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentPackageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentPackageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentPackages
    /// </summary>

    public partial class ShipmentPackagesGetResponse : ApiResponse
    {


	    private IList<ShipmentPackageStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentPackageStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentPackageStateDto>)new XmlSerializer(typeof(IList<ShipmentPackageStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentPackageStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentPackageStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentPackageStateEvent
    /// </summary>

    public partial class ShipmentPackageStateEventGetResponse : ApiResponse
    {


	    private ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentPackageStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentPackageHistoryState
    /// </summary>

    public partial class ShipmentPackageHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentPackageStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentPackageStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentPackageStateDto)new XmlSerializer(typeof(ShipmentPackageStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentPackageStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentPackageStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentPackageContent
    /// </summary>

    public partial class ShipmentPackageContentGetResponse : ApiResponse
    {


	    private ShipmentPackageContentStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentPackageContentStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentPackageContentStateDto)new XmlSerializer(typeof(ShipmentPackageContentStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentPackageContentStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentPackageContentStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentType
    /// </summary>

    public partial class ShipmentTypeGetResponse : ApiResponse
    {


	    private ShipmentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateDto)new XmlSerializer(typeof(ShipmentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypes
    /// </summary>

    public partial class ShipmentTypesGetResponse : ApiResponse
    {


	    private IList<ShipmentTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<ShipmentTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<ShipmentTypeStateDto>)new XmlSerializer(typeof(IList<ShipmentTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<ShipmentTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<ShipmentTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypeStateEvent
    /// </summary>

    public partial class ShipmentTypeStateEventGetResponse : ApiResponse
    {


	    private ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class ShipmentTypeHistoryState
    /// </summary>

    public partial class ShipmentTypeHistoryStateGetResponse : ApiResponse
    {


	    private ShipmentTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public ShipmentTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (ShipmentTypeStateDto)new XmlSerializer(typeof(ShipmentTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<ShipmentTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<ShipmentTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItem
    /// </summary>

    public partial class StatusItemGetResponse : ApiResponse
    {


	    private StatusItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateDto)new XmlSerializer(typeof(StatusItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItems
    /// </summary>

    public partial class StatusItemsGetResponse : ApiResponse
    {


	    private IList<StatusItemStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<StatusItemStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<StatusItemStateDto>)new XmlSerializer(typeof(IList<StatusItemStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<StatusItemStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<StatusItemStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItemStateEvent
    /// </summary>

    public partial class StatusItemStateEventGetResponse : ApiResponse
    {


	    private StatusItemStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(StatusItemStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class StatusItemHistoryState
    /// </summary>

    public partial class StatusItemHistoryStateGetResponse : ApiResponse
    {


	    private StatusItemStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public StatusItemStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (StatusItemStateDto)new XmlSerializer(typeof(StatusItemStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<StatusItemStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<StatusItemStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProduct
    /// </summary>

    public partial class SupplierProductGetResponse : ApiResponse
    {


	    private SupplierProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateDto)new XmlSerializer(typeof(SupplierProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProducts
    /// </summary>

    public partial class SupplierProductsGetResponse : ApiResponse
    {


	    private IList<SupplierProductStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<SupplierProductStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<SupplierProductStateDto>)new XmlSerializer(typeof(IList<SupplierProductStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<SupplierProductStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<SupplierProductStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProductStateEvent
    /// </summary>

    public partial class SupplierProductStateEventGetResponse : ApiResponse
    {


	    private SupplierProductStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(SupplierProductStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class SupplierProductHistoryState
    /// </summary>

    public partial class SupplierProductHistoryStateGetResponse : ApiResponse
    {


	    private SupplierProductStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public SupplierProductStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (SupplierProductStateDto)new XmlSerializer(typeof(SupplierProductStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<SupplierProductStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<SupplierProductStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Uom
    /// </summary>

    public partial class UomGetResponse : ApiResponse
    {


	    private UomStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomStateDto)new XmlSerializer(typeof(UomStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Uoms
    /// </summary>

    public partial class UomsGetResponse : ApiResponse
    {


	    private IList<UomStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<UomStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<UomStateDto>)new XmlSerializer(typeof(IList<UomStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<UomStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<UomStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomStateEvent
    /// </summary>

    public partial class UomStateEventGetResponse : ApiResponse
    {


	    private UomStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(UomStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomHistoryState
    /// </summary>

    public partial class UomHistoryStateGetResponse : ApiResponse
    {


	    private UomStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomStateDto)new XmlSerializer(typeof(UomStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomConversion
    /// </summary>

    public partial class UomConversionGetResponse : ApiResponse
    {


	    private UomConversionStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomConversionStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomConversionStateDto)new XmlSerializer(typeof(UomConversionStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomConversionStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomConversionStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomConversions
    /// </summary>

    public partial class UomConversionsGetResponse : ApiResponse
    {


	    private IList<UomConversionStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<UomConversionStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<UomConversionStateDto>)new XmlSerializer(typeof(IList<UomConversionStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<UomConversionStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<UomConversionStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomConversionStateEvent
    /// </summary>

    public partial class UomConversionStateEventGetResponse : ApiResponse
    {


	    private UomConversionStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomConversionStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomConversionStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(UomConversionStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomConversionStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomConversionStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomConversionHistoryState
    /// </summary>

    public partial class UomConversionHistoryStateGetResponse : ApiResponse
    {


	    private UomConversionStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomConversionStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomConversionStateDto)new XmlSerializer(typeof(UomConversionStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomConversionStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomConversionStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomType
    /// </summary>

    public partial class UomTypeGetResponse : ApiResponse
    {


	    private UomTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomTypeStateDto)new XmlSerializer(typeof(UomTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomTypes
    /// </summary>

    public partial class UomTypesGetResponse : ApiResponse
    {


	    private IList<UomTypeStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<UomTypeStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<UomTypeStateDto>)new XmlSerializer(typeof(IList<UomTypeStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<UomTypeStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<UomTypeStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomTypeStateEvent
    /// </summary>

    public partial class UomTypeStateEventGetResponse : ApiResponse
    {


	    private UomTypeStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomTypeStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomTypeStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(UomTypeStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomTypeStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomTypeStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class UomTypeHistoryState
    /// </summary>

    public partial class UomTypeHistoryStateGetResponse : ApiResponse
    {


	    private UomTypeStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public UomTypeStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (UomTypeStateDto)new XmlSerializer(typeof(UomTypeStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<UomTypeStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<UomTypeStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouse
    /// </summary>

    public partial class WarehouseGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class Warehouses
    /// </summary>

    public partial class WarehousesGetResponse : ApiResponse
    {


	    private IList<WarehouseStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<WarehouseStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<WarehouseStateDto>)new XmlSerializer(typeof(IList<WarehouseStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<WarehouseStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<WarehouseStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseStateEvent
    /// </summary>

    public partial class WarehouseStateEventGetResponse : ApiResponse
    {


	    private WarehouseStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(WarehouseStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class WarehouseHistoryState
    /// </summary>

    public partial class WarehouseHistoryStateGetResponse : ApiResponse
    {


	    private WarehouseStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public WarehouseStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (WarehouseStateDto)new XmlSerializer(typeof(WarehouseStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<WarehouseStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<WarehouseStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstance
    /// </summary>

    public partial class AttributeSetInstanceGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstances
    /// </summary>

    public partial class AttributeSetInstancesGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceStateEvent
    /// </summary>

    public partial class AttributeSetInstanceStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceHistoryState
    /// </summary>

    public partial class AttributeSetInstanceHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceStateDto)new XmlSerializer(typeof(AttributeSetInstanceStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionField
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFields
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldsGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroup
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroups
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupsGetResponse : ApiResponse
    {


	    private IList<AttributeSetInstanceExtensionFieldGroupStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<AttributeSetInstanceExtensionFieldGroupStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<AttributeSetInstanceExtensionFieldGroupStateDto>)new XmlSerializer(typeof(IList<AttributeSetInstanceExtensionFieldGroupStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<AttributeSetInstanceExtensionFieldGroupStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupStateEvent
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupStateEventGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateCreatedOrMergePatchedOrDeletedDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class AttributeSetInstanceExtensionFieldGroupHistoryState
    /// </summary>

    public partial class AttributeSetInstanceExtensionFieldGroupHistoryStateGetResponse : ApiResponse
    {


	    private AttributeSetInstanceExtensionFieldGroupStateDto typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public AttributeSetInstanceExtensionFieldGroupStateDto Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (AttributeSetInstanceExtensionFieldGroupStateDto)new XmlSerializer(typeof(AttributeSetInstanceExtensionFieldGroupStateDto)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<AttributeSetInstanceExtensionFieldGroupStateDto>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class LocatorTrees
    /// </summary>

    public partial class LocatorTreesGetResponse : ApiResponse
    {


	    private IList<LocatorStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<LocatorStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<LocatorStateDto>)new XmlSerializer(typeof(IList<LocatorStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<LocatorStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<LocatorStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class

    /// <summary>
    /// Response object for method Get of class OrganizationTrees
    /// </summary>

    public partial class OrganizationTreesGetResponse : ApiResponse
    {


	    private IList<OrganizationStateDto> typedContent;
        /// <summary>
        /// Typed Response content
        /// </summary>
        public IList<OrganizationStateDto> Content 
    	{
	        get
	        {
		        if (typedContent != null)
			        return typedContent;

                IEnumerable<string> values = new List<string>();
                if (RawContent != null && RawContent.Headers != null)
                    RawContent.Headers.TryGetValues("Content-Type", out values);

                if (values.Any(hv => hv.ToLowerInvariant().Contains("xml")) &&
                    !values.Any(hv => hv.ToLowerInvariant().Contains("json")))
                {
                    var task = RawContent.ReadAsStreamAsync();

                    var xmlStream = task.GetAwaiter().GetResult();
                    typedContent = (IList<OrganizationStateDto>)new XmlSerializer(typeof(IList<OrganizationStateDto>)).Deserialize(xmlStream);
                }
                else
                {
                    var task =  Formatters != null && Formatters.Any() 
                                ? RawContent.ReadAsAsync<IList<OrganizationStateDto>>(Formatters).ConfigureAwait(false)
                                : RawContent.ReadAsAsync<IList<OrganizationStateDto>>().ConfigureAwait(false);
		        
		            typedContent = task.GetAwaiter().GetResult();
                }

		        return typedContent;
	        }
	    }

		


    } // end class


} // end Models namespace


