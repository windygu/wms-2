// <autogenerated>
//   This file was generated by T4 code generator GenerateShipmentDomainNHibernate.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using Dddml.Wms.Specialization;
using Dddml.Wms.Domain;
using Dddml.Wms.Domain.Shipment;
using Dddml.Wms.Specialization.NHibernate;
using NHibernate;
using NHibernate.Criterion;
using Spring.Transaction.Interceptor;
using Dddml.Support.Criterion;
using NHibernateICriterion = NHibernate.Criterion.ICriterion;
using NHibernateRestrictions = NHibernate.Criterion.Restrictions;
using NHibernateDisjunction = NHibernate.Criterion.Disjunction;

namespace Dddml.Wms.Domain.Shipment.NHibernate
{

	public partial class NHibernateShipmentStateQueryRepository : IShipmentStateQueryRepository
	{
		public ISessionFactory SessionFactory { get; set; }

		protected ISession CurrentSession {
			get { return this.SessionFactory.GetCurrentSession (); }
		}

        private static readonly ISet<string> _readOnlyPropertyNames = new SortedSet<string>(new String[] { "ShipmentId", "ShipmentTypeId", "StatusId", "PrimaryOrderId", "PrimaryReturnId", "PrimaryShipGroupSeqId", "OnlyOneOrder", "OnlyOneOrderShipGroup", "PicklistBinId", "BolNumber", "SealNumber", "VehicleId", "ExternalOrderNumber", "Carrier", "DateShipped", "EstimatedReadyDate", "EstimatedShipDate", "EstimatedShipWorkEffId", "EstimatedArrivalDate", "EstimatedArrivalWorkEffId", "LatestCancelDate", "EstimatedShipCost", "CurrencyUomId", "HandlingInstructions", "OriginFacilityId", "DestinationFacilityId", "OriginContactMechId", "OriginTelecomNumberId", "DestinationContactMechId", "DestinationTelecomNumberId", "PartyIdTo", "PartyIdFrom", "AdditionalShippingCharge", "AddtlShippingChargeDesc", "ShipmentItems", "ShipmentReceipts", "ItemIssuances", "ShipmentImages", "Version", "CreatedBy", "CreatedAt", "UpdatedBy", "UpdatedAt", "Active", "Deleted" });
    
        public IReadOnlyProxyGenerator ReadOnlyProxyGenerator { get; set; }

		public NHibernateShipmentStateQueryRepository ()
		{
		}

		[Transaction (ReadOnly = true)]
		public IShipmentState Get(string id)
		{
			IShipmentState state = CurrentSession.Get<ShipmentState>(id);
            if (ReadOnlyProxyGenerator != null && state != null)
            {
                return ReadOnlyProxyGenerator.CreateProxy<IShipmentState>(state, new Type[] { typeof(ISaveable) }, _readOnlyPropertyNames);
            }
			return state;
		}

        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentState> GetAll(int firstResult, int maxResults)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentState>();
            criteria.SetFirstResult(firstResult);
            criteria.SetMaxResults(maxResults);
            AddNotDeletedRestriction(criteria);
            return criteria.List<ShipmentState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IShipmentState> Get(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentState>();

            NHibernateUtils.CriteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
            AddNotDeletedRestriction(criteria);
            return criteria.List<ShipmentState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IShipmentState> Get(Dddml.Support.Criterion.ICriterion filter, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentState>();

            NHibernateUtils.CriteriaAddFilterAndOrdersAndSetFirstResultAndMaxResults(criteria, filter, orders, firstResult, maxResults);
            AddNotDeletedRestriction(criteria);
            return criteria.List<ShipmentState>();
        }


        [Transaction(ReadOnly = true)]
        public virtual IShipmentState GetFirst(IEnumerable<KeyValuePair<string, object>> filter, IList<string> orders = null)
        {
            var list = (IList<ShipmentState>)Get(filter, orders, 0, 1);
            if (list == null || list.Count <= 0)
            {
                return null;
            }
            return list[0];
        }

        [Transaction(ReadOnly = true)]
        public virtual IShipmentState GetFirst(KeyValuePair<string, object> keyValue, IList<string> orders = null)
        {
            return GetFirst(new KeyValuePair<string, object>[] { keyValue }, orders);
        }

        [Transaction(ReadOnly = true)]
        public virtual IEnumerable<IShipmentState> GetByProperty(string propertyName, object propertyValue, IList<string> orders = null, int firstResult = 0, int maxResults = int.MaxValue)
        {
            var filter = new KeyValuePair<string, object>[] { new KeyValuePair<string, object>(propertyName, propertyValue) };
            return Get(filter, orders, firstResult, maxResults);
        }

        [Transaction(ReadOnly = true)]
        public virtual long GetCount(IEnumerable<KeyValuePair<string, object>> filter)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentState>();
            criteria.SetProjection(Projections.RowCountInt64());
            NHibernateUtils.CriteriaAddFilter(criteria, filter);
            AddNotDeletedRestriction(criteria);
            return criteria.UniqueResult<long>();
        }

        [Transaction(ReadOnly = true)]
        public virtual long GetCount(Dddml.Support.Criterion.ICriterion filter)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentState>();
            criteria.SetProjection(Projections.RowCountInt64());
            if (filter != null)
            {
                NHibernateICriterion hc = CriterionUtils.ToNHibernateCriterion(filter);
                criteria.Add(hc);
            }
            AddNotDeletedRestriction(criteria);
            return criteria.UniqueResult<long>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IShipmentImageState GetShipmentImage(string shipmentId, string sequenceId)
        {
            var entityId = new ShipmentImageId(shipmentId, sequenceId);
            return CurrentSession.Get<ShipmentImageState>(entityId);
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentImageState> GetShipmentImages(string shipmentId)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentImageState>();
            var partIdCondition = global::NHibernate.Criterion.Restrictions.Conjunction()
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentImageId.ShipmentId", shipmentId))
                ;

            return criteria.Add(partIdCondition).List<ShipmentImageState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IShipmentItemState GetShipmentItem(string shipmentId, string shipmentItemSeqId)
        {
            var entityId = new ShipmentItemId(shipmentId, shipmentItemSeqId);
            return CurrentSession.Get<ShipmentItemState>(entityId);
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentItemState> GetShipmentItems(string shipmentId)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentItemState>();
            var partIdCondition = global::NHibernate.Criterion.Restrictions.Conjunction()
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentItemId.ShipmentId", shipmentId))
                ;

            return criteria.Add(partIdCondition).List<ShipmentItemState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IShipmentReceiptState GetShipmentReceipt(string shipmentId, string receiptSeqId)
        {
            var entityId = new ShipmentReceiptId(shipmentId, receiptSeqId);
            return CurrentSession.Get<ShipmentReceiptState>(entityId);
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentReceiptState> GetShipmentReceipts(string shipmentId)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentReceiptState>();
            var partIdCondition = global::NHibernate.Criterion.Restrictions.Conjunction()
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentReceiptId.ShipmentId", shipmentId))
                ;

            return criteria.Add(partIdCondition).List<ShipmentReceiptState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IShipmentReceiptImageState GetShipmentReceiptImage(string shipmentId, string shipmentReceiptReceiptSeqId, string sequenceId)
        {
            var entityId = new ShipmentReceiptImageId(shipmentId, shipmentReceiptReceiptSeqId, sequenceId);
            return CurrentSession.Get<ShipmentReceiptImageState>(entityId);
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<IShipmentReceiptImageState> GetShipmentReceiptImages(string shipmentId, string shipmentReceiptReceiptSeqId)
        {
            var criteria = CurrentSession.CreateCriteria<ShipmentReceiptImageState>();
            var partIdCondition = global::NHibernate.Criterion.Restrictions.Conjunction()
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentReceiptImageId.ShipmentId", shipmentId))
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentReceiptImageId.ShipmentReceiptReceiptSeqId", shipmentReceiptReceiptSeqId))
                ;

            return criteria.Add(partIdCondition).List<ShipmentReceiptImageState>();
        }

        [Transaction(ReadOnly = true)]
        public virtual IItemIssuanceState GetItemIssuance(string shipmentId, string itemIssuanceSeqId)
        {
            var entityId = new ShipmentItemIssuanceId(shipmentId, itemIssuanceSeqId);
            return CurrentSession.Get<ItemIssuanceState>(entityId);
        }

        [Transaction(ReadOnly = true)]
        public IEnumerable<IItemIssuanceState> GetItemIssuances(string shipmentId)
        {
            var criteria = CurrentSession.CreateCriteria<ItemIssuanceState>();
            var partIdCondition = global::NHibernate.Criterion.Restrictions.Conjunction()
                .Add(global::NHibernate.Criterion.Restrictions.Eq("ShipmentItemIssuanceId.ShipmentId", shipmentId))
                ;

            return criteria.Add(partIdCondition).List<ItemIssuanceState>();
        }


        protected static void AddNotDeletedRestriction(ICriteria criteria)
        {
        }

	}
}

